import { type CodegenConfig } from "@graphql-codegen/cli";

const GENERATED: string = "generated";

// Apollo client migration guide:
// 1. https://www.apollographql.com/docs/react/migrating/apollo-client-4-migration
// 2. https://www.apollographql.com/docs/react/development-testing/graphql-codegen
const config: CodegenConfig = {
  schema: "../server/schemas/*.graphql",
  // This assumes that all your source files are in a top-level `src/` directory - you might need to adjust this to your file structure
  documents: ["src/gql/fragments/*.ts", "src/gql/queries/*.ts", "src/**/*.graphql"],
  ignoreNoDocuments: true,
  generates: {
    [`src/gql/__${GENERATED}__/graphql.${GENERATED}.ts`]: {
      plugins: ["typescript"],
    },
    "src/": {
      preset: "near-operation-file",
      presetConfig: {
        // This should be the file generated by the "typescript" plugin above,
        // relative to the directory specified for this configuration
        baseTypesPath: `./gql/__${GENERATED}__/graphql.${GENERATED}.ts`,
        folder: `../__${GENERATED}__/`,
      },
      plugins: ["typescript-operations", "typed-document-node"],
      // Note: these config options moved from the other generated file config
      config: {
        avoidOptionals: {
          // Use `null` for nullable fields instead of optionals
          field: true,
          // Allow nullable input fields to remain unspecified
          inputValue: false,
        },
        // Use `unknown` instead of `any` for unconfigured scalars
        defaultScalarType: "unknown",
        // Apollo Client always includes `__typename` fields
        nonOptionalTypename: true,
        // Apollo Client doesn't add the `__typename` field to root types so
        // don't generate a type for the `__typename` for root operation types.
        skipTypeNameForRoot: true,
        scalars: {
          DateTime: "Date",
          FileSize: "number",
          ID: "string",
          Cursor: "string",
          URL: "string",
          Lang: "string",
          TranslatedString: "{ [lang in string]?: string } | null",
        },
      },
    },
  },
  hooks: { afterAllFileWrite: ["prettier --write"] },
};

export default config;
