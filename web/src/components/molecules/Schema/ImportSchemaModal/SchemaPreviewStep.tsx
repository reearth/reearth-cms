import styled from "@emotion/styled";
import ReactDragListView from "react-drag-listview";

import Button from "@reearth-cms/components/atoms/Button";
import Col from "@reearth-cms/components/atoms/Col";
import Icon from "@reearth-cms/components/atoms/Icon";
import List from "@reearth-cms/components/atoms/List";
import Row from "@reearth-cms/components/atoms/Row";
import Select from "@reearth-cms/components/atoms/Select";
import Tag from "@reearth-cms/components/atoms/Tag";
import { useT } from "@reearth-cms/i18n";

import { CreateFieldInput, FieldType } from "../types";

type Props = {
  fields: CreateFieldInput[];
  fieldTypeOptions: { value: string; label: JSX.Element }[];
  onDragEnd: (fromIndex: number, toIndex: number) => void;
  onFieldTypeChange: (id: string, value: FieldType) => void;
  onFieldDelete: (id: string, name: string) => void;
  hasUpdateRight: boolean;
  hasDeleteRight: boolean;
};

const SchemaPreviewStep: React.FC<Props> = ({
  fields,
  fieldTypeOptions,
  onDragEnd,
  onFieldTypeChange,
  onFieldDelete,
  hasUpdateRight,
  hasDeleteRight,
}) => {
  const t = useT();

  return (
    <>
      <Section>
        <SectionTitle>{t("Schema preview")}</SectionTitle>
        <Description>
          {t(
            "Here is the schema generated by your file. Please confirm the type of each field. If it does not match your expectations, you can modify the field type.",
          )}
        </Description>
      </Section>
      <ReactDragListView
        nodeSelector=".ant-list-item"
        handleSelector=".grabbable"
        lineClassName="dragLine"
        onDragEnd={onDragEnd}>
        <FieldStyledList
          itemLayout="horizontal"
          header={
            <HeaderRow>
              <Col span={1} />
              <HeaderCol span={11}>
                <span>Field Name</span>
              </HeaderCol>
              <HeaderCol span={11}>
                <span>Field Type</span>
              </HeaderCol>
              <Col span={1} />
            </HeaderRow>
          }>
          {fields?.map((field, index) => (
            <List.Item className="draggable-item" key={index}>
              <List.Item.Meta
                title={
                  <Row>
                    <Col span={1}>
                      <FieldThumbnail>
                        {hasUpdateRight && <DragIcon icon="menu" className="grabbable" />}
                      </FieldThumbnail>
                    </Col>
                    <AlignLeftCol span={11}>
                      <ItemTitle>
                        <ItemTitleHeading>{field.title}</ItemTitleHeading>
                        {field.required ? " *" : ""}
                        <ItemKey>#{field.key}</ItemKey>
                        {field.unique ? <ItemUnique>({t("unique")})</ItemUnique> : ""}
                        {field.isTitle ? <ItemTitleTag>{t("Title")}</ItemTitleTag> : ""}
                      </ItemTitle>
                    </AlignLeftCol>
                    <AlignLeftCol span={11}>
                      <FieldTypeSelect
                        value={field.type}
                        onChange={value => onFieldTypeChange(field.key, value as FieldType)}
                        options={fieldTypeOptions}
                      />
                    </AlignLeftCol>
                    <Col span={1}>
                      <Button
                        type="text"
                        shape="circle"
                        size="small"
                        onClick={() => onFieldDelete(field.key, field.title)}
                        icon={<Icon icon="delete" color="#8c8c8c" />}
                        disabled={!hasDeleteRight}
                      />
                    </Col>
                  </Row>
                }
              />
            </List.Item>
          ))}
        </FieldStyledList>
      </ReactDragListView>
    </>
  );
};

export default SchemaPreviewStep;

const Section = styled.div`
  margin-top: 24px;
`;

const SectionTitle = styled.h3``;

const Description = styled.p`
  color: rgba(0, 0, 0, 0.45);
`;

const HeaderRow = styled(Row)`
  padding: 0 24px;
  color: rgba(0, 0, 0, 0.45);
`;

const HeaderCol = styled(Col)`
  text-align: left;
`;

const AlignLeftCol = styled(Col)`
  text-align: left;
`;

const FieldTypeSelect = styled(Select)`
  width: 176px;
`;

const FieldStyledList = styled(List)`
  .ant-list-empty-text {
    display: none;
  }
  .ant-list-item {
    background-color: #fff;
    padding: 12px 24px;
    .ant-list-item-meta {
      .ant-list-item-meta-content {
        text-align: center;
        margin: auto;
      }
      .ant-list-item-meta-title {
        margin: 0;
      }
      align-items: center;
    }
    .ant-list-item-action > li {
      padding: 0 3px;
    }
  }
`;

const FieldThumbnail = styled.div`
  display: flex;
  align-items: center;
  h3 {
    margin: 0;
    margin-left: 12px;
    font-weight: 400;
    font-size: 14px;
    line-height: 22px;
    color: rgba(0, 0, 0, 0.45);
  }
`;

const ItemTitle = styled.p`
  color: rgba(0, 0, 0, 0.85);
  margin: 0;
  display: flex;
  justify-content: start;
`;

const ItemTitleHeading = styled.span`
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
`;

const ItemKey = styled.span`
  margin-left: 4px;
  color: rgba(0, 0, 0, 0.45);
  font-weight: 400;
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
`;

const ItemUnique = styled.span`
  margin-left: 4px;
  color: rgba(0, 0, 0, 0.45);
  font-weight: 400;
`;

const ItemTitleTag = styled(Tag)`
  margin-left: 4px;
  color: rgba(0, 0, 0, 0.45);
  background-color: #fafafa;
`;

const DragIcon = styled(Icon)`
  margin-right: 16px;
  cursor: grab;
  :active {
    cursor: grabbing;
  }
`;
