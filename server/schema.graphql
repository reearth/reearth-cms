# Built-in

scalar Upload
scalar Any

directive @goModel(
  model: String
  models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

directive @goField(
  forceResolver: Boolean
  name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

# Meta Type

scalar Cursor

interface Node {
  id: ID!
}

enum NodeType {
  USER
  WORKSPACE
  PROJECT
}

type PageInfo {
  startCursor: Cursor
  endCursor: Cursor
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

# Basic types

scalar DateTime
scalar URL
scalar Lang
scalar FileSize

enum Theme {
  DEFAULT
  LIGHT
  DARK
}

# User

type User implements Node {
  id: ID!
  name: String!
  email: String!
}

type Me {
  id: ID!
  name: String!
  email: String!
  lang: Lang!
  theme: Theme!
  myWorkspaceId: ID!
  auths: [String!]!
  workspaces: [Workspace!]! @goField(forceResolver: true)
  myWorkspace: Workspace! @goField(forceResolver: true)
}

type Workspace implements Node {
  id: ID!
  name: String!
  members: [WorkspaceMember!]!
  personal: Boolean!
}

type WorkspaceMember {
  userId: ID!
  role: Role!
  user: User @goField(forceResolver: true)
}

enum Role {
  # a role who can read project
  READER
  # a role who can read and write project
  WRITER
  # a eole who can have full controll of project
  OWNER
}

type ProjectAliasAvailability {
  alias: String!
  available: Boolean!
}

type Project implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String!
  alias: String!
  workspaceId: ID!
  workspace: Workspace @goField(forceResolver: true)
}

input CreateProjectInput {
  workspaceId: ID!
  name: String
  description: String
  alias: String
}

input UpdateProjectInput {
  projectId: ID!
  name: String
  description: String
}

input DeleteProjectInput {
  projectId: ID!
}

input SignupInput {
  lang: Lang
  theme: Theme
  userId: ID
  workspaceId: ID
  secret: String
}

input UpdateMeInput {
  name: String
  email: String
  lang: Lang
  theme: Theme
  password: String
  passwordConfirmation: String
}

input RemoveMyAuthInput {
  auth: String!
}

input DeleteMeInput {
  userId: ID!
}

input CreateWorkspaceInput {
  name: String!
}

input UpdateWorkspaceInput {
  workspaceId: ID!
  name: String!
}

input AddMemberToWorkspaceInput {
  workspaceId: ID!
  userId: ID!
  role: Role!
}

input RemoveMemberFromWorkspaceInput {
  workspaceId: ID!
  userId: ID!
}

input UpdateMemberOfWorkspaceInput {
  workspaceId: ID!
  userId: ID!
  role: Role!
}

input DeleteWorkspaceInput {
  workspaceId: ID!
}

type Query {
  me: Me
  node(id: ID!, type: NodeType!): Node
  nodes(id: [ID!]!, type: NodeType!): [Node]!
  searchUser(nameOrEmail: String!): User
  projects(
    workspaceId: ID!
    first: Int
    last: Int
    after: Cursor
    before: Cursor
  ): ProjectConnection!
  checkProjectAlias(alias: String!): ProjectAliasAvailability!
}

# Payload

type UpdateMePayload {
  me: Me!
}

type SignupPayload {
  user: User!
  workspace: Workspace!
}

type DeleteMePayload {
  userId: ID!
}

type CreateWorkspacePayload {
  workspace: Workspace!
}

type UpdateWorkspacePayload {
  workspace: Workspace!
}

type AddMemberToWorkspacePayload {
  workspace: Workspace!
}

type RemoveMemberFromWorkspacePayload {
  workspace: Workspace!
}

type UpdateMemberOfWorkspacePayload {
  workspace: Workspace!
}

type DeleteWorkspacePayload {
  workspaceId: ID!
}

type ProjectPayload {
  project: Project!
}

type DeleteProjectPayload {
  projectId: ID!
}

type ProjectConnection {
  edges: [ProjectEdge!]!
  nodes: [Project]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ProjectEdge {
  cursor: Cursor!
  node: Project
}

type Mutation {
  # User
  signup(input: SignupInput!): SignupPayload
  updateMe(input: UpdateMeInput!): UpdateMePayload
  removeMyAuth(input: RemoveMyAuthInput!): UpdateMePayload
  deleteMe(input: DeleteMeInput!): DeleteMePayload

  # Workspace
  createWorkspace(input: CreateWorkspaceInput!): CreateWorkspacePayload
  deleteWorkspace(input: DeleteWorkspaceInput!): DeleteWorkspacePayload
  updateWorkspace(input: UpdateWorkspaceInput!): UpdateWorkspacePayload
  addMemberToWorkspace(input: AddMemberToWorkspaceInput!): AddMemberToWorkspacePayload
  removeMemberFromWorkspace(
    input: RemoveMemberFromWorkspaceInput!
  ): RemoveMemberFromWorkspacePayload
  updateMemberOfWorkspace(input: UpdateMemberOfWorkspaceInput!): UpdateMemberOfWorkspacePayload

  # Project
  createProject(input: CreateProjectInput!): ProjectPayload
  updateProject(input: UpdateProjectInput!): ProjectPayload
  deleteProject(input: DeleteProjectInput!): DeleteProjectPayload
}

schema {
  query: Query
  mutation: Mutation
}