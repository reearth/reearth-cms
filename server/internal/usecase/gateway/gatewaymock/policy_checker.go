// Code generated by MockGen. DO NOT EDIT.
// Source: ./policy_checker.go

// Package gatewaymock is a generated GoMock package.
package gatewaymock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gateway "github.com/reearth/reearth-cms/server/internal/usecase/gateway"
)

// MockPolicyChecker is a mock of PolicyChecker interface.
type MockPolicyChecker struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyCheckerMockRecorder
}

// MockPolicyCheckerMockRecorder is the mock recorder for MockPolicyChecker.
type MockPolicyCheckerMockRecorder struct {
	mock *MockPolicyChecker
}

// NewMockPolicyChecker creates a new mock instance.
func NewMockPolicyChecker(ctrl *gomock.Controller) *MockPolicyChecker {
	mock := &MockPolicyChecker{ctrl: ctrl}
	mock.recorder = &MockPolicyCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicyChecker) EXPECT() *MockPolicyCheckerMockRecorder {
	return m.recorder
}

// CheckPolicy mocks base method.
func (m *MockPolicyChecker) CheckPolicy(ctx context.Context, req gateway.PolicyCheckRequest) (*gateway.PolicyCheckResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPolicy", ctx, req)
	ret0, _ := ret[0].(*gateway.PolicyCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPolicy indicates an expected call of CheckPolicy.
func (mr *MockPolicyCheckerMockRecorder) CheckPolicy(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPolicy", reflect.TypeOf((*MockPolicyChecker)(nil).CheckPolicy), ctx, req)
}