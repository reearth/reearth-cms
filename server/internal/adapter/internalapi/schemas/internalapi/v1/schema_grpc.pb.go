// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: schemas/internalapi/v1/schema.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReEarthCMS_CreateProject_FullMethodName            = "/reearth.cms.v1.ReEarthCMS/CreateProject"
	ReEarthCMS_UpdateProject_FullMethodName            = "/reearth.cms.v1.ReEarthCMS/UpdateProject"
	ReEarthCMS_DeleteProject_FullMethodName            = "/reearth.cms.v1.ReEarthCMS/DeleteProject"
	ReEarthCMS_CheckAliasAvailability_FullMethodName   = "/reearth.cms.v1.ReEarthCMS/CheckAliasAvailability"
	ReEarthCMS_GetProject_FullMethodName               = "/reearth.cms.v1.ReEarthCMS/GetProject"
	ReEarthCMS_ListProjects_FullMethodName             = "/reearth.cms.v1.ReEarthCMS/ListProjects"
	ReEarthCMS_GetAsset_FullMethodName                 = "/reearth.cms.v1.ReEarthCMS/GetAsset"
	ReEarthCMS_ListAssets_FullMethodName               = "/reearth.cms.v1.ReEarthCMS/ListAssets"
	ReEarthCMS_GetModel_FullMethodName                 = "/reearth.cms.v1.ReEarthCMS/GetModel"
	ReEarthCMS_ListModels_FullMethodName               = "/reearth.cms.v1.ReEarthCMS/ListModels"
	ReEarthCMS_ListItems_FullMethodName                = "/reearth.cms.v1.ReEarthCMS/ListItems"
	ReEarthCMS_GetModelExportURL_FullMethodName        = "/reearth.cms.v1.ReEarthCMS/GetModelExportURL"
	ReEarthCMS_GetModelGeoJSONExportURL_FullMethodName = "/reearth.cms.v1.ReEarthCMS/GetModelGeoJSONExportURL"
)

// ReEarthCMSClient is the client API for ReEarthCMS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReEarthCMSClient interface {
	// Main operations
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*ProjectResponse, error)
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*ProjectResponse, error)
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error)
	CheckAliasAvailability(ctx context.Context, in *AliasAvailabilityRequest, opts ...grpc.CallOption) (*AliasAvailabilityResponse, error)
	GetProject(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*ProjectResponse, error)
	ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	GetAsset(ctx context.Context, in *AssetRequest, opts ...grpc.CallOption) (*AssetResponse, error)
	ListAssets(ctx context.Context, in *ListAssetsRequest, opts ...grpc.CallOption) (*ListAssetsResponse, error)
	GetModel(ctx context.Context, in *ModelRequest, opts ...grpc.CallOption) (*ModelResponse, error)
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error)
	ListItems(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (*ListItemsResponse, error)
	GetModelExportURL(ctx context.Context, in *ModelExportRequest, opts ...grpc.CallOption) (*ExportURLResponse, error)
	// Deprecated: Do not use.
	GetModelGeoJSONExportURL(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportURLResponse, error)
}

type reEarthCMSClient struct {
	cc grpc.ClientConnInterface
}

func NewReEarthCMSClient(cc grpc.ClientConnInterface) ReEarthCMSClient {
	return &reEarthCMSClient{cc}
}

func (c *reEarthCMSClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*ProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProjectResponse)
	err := c.cc.Invoke(ctx, ReEarthCMS_CreateProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reEarthCMSClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*ProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProjectResponse)
	err := c.cc.Invoke(ctx, ReEarthCMS_UpdateProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reEarthCMSClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProjectResponse)
	err := c.cc.Invoke(ctx, ReEarthCMS_DeleteProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reEarthCMSClient) CheckAliasAvailability(ctx context.Context, in *AliasAvailabilityRequest, opts ...grpc.CallOption) (*AliasAvailabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AliasAvailabilityResponse)
	err := c.cc.Invoke(ctx, ReEarthCMS_CheckAliasAvailability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reEarthCMSClient) GetProject(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*ProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProjectResponse)
	err := c.cc.Invoke(ctx, ReEarthCMS_GetProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reEarthCMSClient) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, ReEarthCMS_ListProjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reEarthCMSClient) GetAsset(ctx context.Context, in *AssetRequest, opts ...grpc.CallOption) (*AssetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssetResponse)
	err := c.cc.Invoke(ctx, ReEarthCMS_GetAsset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reEarthCMSClient) ListAssets(ctx context.Context, in *ListAssetsRequest, opts ...grpc.CallOption) (*ListAssetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAssetsResponse)
	err := c.cc.Invoke(ctx, ReEarthCMS_ListAssets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reEarthCMSClient) GetModel(ctx context.Context, in *ModelRequest, opts ...grpc.CallOption) (*ModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModelResponse)
	err := c.cc.Invoke(ctx, ReEarthCMS_GetModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reEarthCMSClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListModelsResponse)
	err := c.cc.Invoke(ctx, ReEarthCMS_ListModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reEarthCMSClient) ListItems(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (*ListItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListItemsResponse)
	err := c.cc.Invoke(ctx, ReEarthCMS_ListItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reEarthCMSClient) GetModelExportURL(ctx context.Context, in *ModelExportRequest, opts ...grpc.CallOption) (*ExportURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportURLResponse)
	err := c.cc.Invoke(ctx, ReEarthCMS_GetModelExportURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *reEarthCMSClient) GetModelGeoJSONExportURL(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportURLResponse)
	err := c.cc.Invoke(ctx, ReEarthCMS_GetModelGeoJSONExportURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReEarthCMSServer is the server API for ReEarthCMS service.
// All implementations must embed UnimplementedReEarthCMSServer
// for forward compatibility.
type ReEarthCMSServer interface {
	// Main operations
	CreateProject(context.Context, *CreateProjectRequest) (*ProjectResponse, error)
	UpdateProject(context.Context, *UpdateProjectRequest) (*ProjectResponse, error)
	DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error)
	CheckAliasAvailability(context.Context, *AliasAvailabilityRequest) (*AliasAvailabilityResponse, error)
	GetProject(context.Context, *ProjectRequest) (*ProjectResponse, error)
	ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error)
	GetAsset(context.Context, *AssetRequest) (*AssetResponse, error)
	ListAssets(context.Context, *ListAssetsRequest) (*ListAssetsResponse, error)
	GetModel(context.Context, *ModelRequest) (*ModelResponse, error)
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	ListItems(context.Context, *ListItemsRequest) (*ListItemsResponse, error)
	GetModelExportURL(context.Context, *ModelExportRequest) (*ExportURLResponse, error)
	// Deprecated: Do not use.
	GetModelGeoJSONExportURL(context.Context, *ExportRequest) (*ExportURLResponse, error)
	mustEmbedUnimplementedReEarthCMSServer()
}

// UnimplementedReEarthCMSServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReEarthCMSServer struct{}

func (UnimplementedReEarthCMSServer) CreateProject(context.Context, *CreateProjectRequest) (*ProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedReEarthCMSServer) UpdateProject(context.Context, *UpdateProjectRequest) (*ProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedReEarthCMSServer) DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedReEarthCMSServer) CheckAliasAvailability(context.Context, *AliasAvailabilityRequest) (*AliasAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAliasAvailability not implemented")
}
func (UnimplementedReEarthCMSServer) GetProject(context.Context, *ProjectRequest) (*ProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedReEarthCMSServer) ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (UnimplementedReEarthCMSServer) GetAsset(context.Context, *AssetRequest) (*AssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAsset not implemented")
}
func (UnimplementedReEarthCMSServer) ListAssets(context.Context, *ListAssetsRequest) (*ListAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssets not implemented")
}
func (UnimplementedReEarthCMSServer) GetModel(context.Context, *ModelRequest) (*ModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModel not implemented")
}
func (UnimplementedReEarthCMSServer) ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedReEarthCMSServer) ListItems(context.Context, *ListItemsRequest) (*ListItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListItems not implemented")
}
func (UnimplementedReEarthCMSServer) GetModelExportURL(context.Context, *ModelExportRequest) (*ExportURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelExportURL not implemented")
}
func (UnimplementedReEarthCMSServer) GetModelGeoJSONExportURL(context.Context, *ExportRequest) (*ExportURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelGeoJSONExportURL not implemented")
}
func (UnimplementedReEarthCMSServer) mustEmbedUnimplementedReEarthCMSServer() {}
func (UnimplementedReEarthCMSServer) testEmbeddedByValue()                    {}

// UnsafeReEarthCMSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReEarthCMSServer will
// result in compilation errors.
type UnsafeReEarthCMSServer interface {
	mustEmbedUnimplementedReEarthCMSServer()
}

func RegisterReEarthCMSServer(s grpc.ServiceRegistrar, srv ReEarthCMSServer) {
	// If the following call pancis, it indicates UnimplementedReEarthCMSServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReEarthCMS_ServiceDesc, srv)
}

func _ReEarthCMS_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReEarthCMSServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReEarthCMS_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReEarthCMSServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReEarthCMS_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReEarthCMSServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReEarthCMS_UpdateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReEarthCMSServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReEarthCMS_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReEarthCMSServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReEarthCMS_DeleteProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReEarthCMSServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReEarthCMS_CheckAliasAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AliasAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReEarthCMSServer).CheckAliasAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReEarthCMS_CheckAliasAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReEarthCMSServer).CheckAliasAvailability(ctx, req.(*AliasAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReEarthCMS_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReEarthCMSServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReEarthCMS_GetProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReEarthCMSServer).GetProject(ctx, req.(*ProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReEarthCMS_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReEarthCMSServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReEarthCMS_ListProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReEarthCMSServer).ListProjects(ctx, req.(*ListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReEarthCMS_GetAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReEarthCMSServer).GetAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReEarthCMS_GetAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReEarthCMSServer).GetAsset(ctx, req.(*AssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReEarthCMS_ListAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReEarthCMSServer).ListAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReEarthCMS_ListAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReEarthCMSServer).ListAssets(ctx, req.(*ListAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReEarthCMS_GetModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReEarthCMSServer).GetModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReEarthCMS_GetModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReEarthCMSServer).GetModel(ctx, req.(*ModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReEarthCMS_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReEarthCMSServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReEarthCMS_ListModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReEarthCMSServer).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReEarthCMS_ListItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReEarthCMSServer).ListItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReEarthCMS_ListItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReEarthCMSServer).ListItems(ctx, req.(*ListItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReEarthCMS_GetModelExportURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReEarthCMSServer).GetModelExportURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReEarthCMS_GetModelExportURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReEarthCMSServer).GetModelExportURL(ctx, req.(*ModelExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReEarthCMS_GetModelGeoJSONExportURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReEarthCMSServer).GetModelGeoJSONExportURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReEarthCMS_GetModelGeoJSONExportURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReEarthCMSServer).GetModelGeoJSONExportURL(ctx, req.(*ExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReEarthCMS_ServiceDesc is the grpc.ServiceDesc for ReEarthCMS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReEarthCMS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reearth.cms.v1.ReEarthCMS",
	HandlerType: (*ReEarthCMSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProject",
			Handler:    _ReEarthCMS_CreateProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _ReEarthCMS_UpdateProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _ReEarthCMS_DeleteProject_Handler,
		},
		{
			MethodName: "CheckAliasAvailability",
			Handler:    _ReEarthCMS_CheckAliasAvailability_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _ReEarthCMS_GetProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _ReEarthCMS_ListProjects_Handler,
		},
		{
			MethodName: "GetAsset",
			Handler:    _ReEarthCMS_GetAsset_Handler,
		},
		{
			MethodName: "ListAssets",
			Handler:    _ReEarthCMS_ListAssets_Handler,
		},
		{
			MethodName: "GetModel",
			Handler:    _ReEarthCMS_GetModel_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _ReEarthCMS_ListModels_Handler,
		},
		{
			MethodName: "ListItems",
			Handler:    _ReEarthCMS_ListItems_Handler,
		},
		{
			MethodName: "GetModelExportURL",
			Handler:    _ReEarthCMS_GetModelExportURL_Handler,
		},
		{
			MethodName: "GetModelGeoJSONExportURL",
			Handler:    _ReEarthCMS_GetModelGeoJSONExportURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schemas/internalapi/v1/schema.proto",
}
