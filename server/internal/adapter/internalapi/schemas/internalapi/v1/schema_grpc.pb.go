// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: schemas/internalapi/v1/schema.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReEarthCMS_CreateProject_FullMethodName            = "/reearth.cms.v1.ReEarthCMS/CreateProject"
	ReEarthCMS_ListProjects_FullMethodName             = "/reearth.cms.v1.ReEarthCMS/ListProjects"
	ReEarthCMS_ListModels_FullMethodName               = "/reearth.cms.v1.ReEarthCMS/ListModels"
	ReEarthCMS_GetModelGeoJSONExportURL_FullMethodName = "/reearth.cms.v1.ReEarthCMS/GetModelGeoJSONExportURL"
)

// ReEarthCMSClient is the client API for ReEarthCMS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReEarthCMSClient interface {
	// Main operations
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error)
	GetModelGeoJSONExportURL(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportURLResponse, error)
}

type reEarthCMSClient struct {
	cc grpc.ClientConnInterface
}

func NewReEarthCMSClient(cc grpc.ClientConnInterface) ReEarthCMSClient {
	return &reEarthCMSClient{cc}
}

func (c *reEarthCMSClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProjectResponse)
	err := c.cc.Invoke(ctx, ReEarthCMS_CreateProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reEarthCMSClient) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, ReEarthCMS_ListProjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reEarthCMSClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListModelsResponse)
	err := c.cc.Invoke(ctx, ReEarthCMS_ListModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reEarthCMSClient) GetModelGeoJSONExportURL(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportURLResponse)
	err := c.cc.Invoke(ctx, ReEarthCMS_GetModelGeoJSONExportURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReEarthCMSServer is the server API for ReEarthCMS service.
// All implementations must embed UnimplementedReEarthCMSServer
// for forward compatibility.
type ReEarthCMSServer interface {
	// Main operations
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error)
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	GetModelGeoJSONExportURL(context.Context, *ExportRequest) (*ExportURLResponse, error)
	mustEmbedUnimplementedReEarthCMSServer()
}

// UnimplementedReEarthCMSServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReEarthCMSServer struct{}

func (UnimplementedReEarthCMSServer) CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedReEarthCMSServer) ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (UnimplementedReEarthCMSServer) ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedReEarthCMSServer) GetModelGeoJSONExportURL(context.Context, *ExportRequest) (*ExportURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelGeoJSONExportURL not implemented")
}
func (UnimplementedReEarthCMSServer) mustEmbedUnimplementedReEarthCMSServer() {}
func (UnimplementedReEarthCMSServer) testEmbeddedByValue()                    {}

// UnsafeReEarthCMSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReEarthCMSServer will
// result in compilation errors.
type UnsafeReEarthCMSServer interface {
	mustEmbedUnimplementedReEarthCMSServer()
}

func RegisterReEarthCMSServer(s grpc.ServiceRegistrar, srv ReEarthCMSServer) {
	// If the following call pancis, it indicates UnimplementedReEarthCMSServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReEarthCMS_ServiceDesc, srv)
}

func _ReEarthCMS_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReEarthCMSServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReEarthCMS_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReEarthCMSServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReEarthCMS_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReEarthCMSServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReEarthCMS_ListProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReEarthCMSServer).ListProjects(ctx, req.(*ListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReEarthCMS_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReEarthCMSServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReEarthCMS_ListModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReEarthCMSServer).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReEarthCMS_GetModelGeoJSONExportURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReEarthCMSServer).GetModelGeoJSONExportURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReEarthCMS_GetModelGeoJSONExportURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReEarthCMSServer).GetModelGeoJSONExportURL(ctx, req.(*ExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReEarthCMS_ServiceDesc is the grpc.ServiceDesc for ReEarthCMS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReEarthCMS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reearth.cms.v1.ReEarthCMS",
	HandlerType: (*ReEarthCMSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProject",
			Handler:    _ReEarthCMS_CreateProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _ReEarthCMS_ListProjects_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _ReEarthCMS_ListModels_Handler,
		},
		{
			MethodName: "GetModelGeoJSONExportURL",
			Handler:    _ReEarthCMS_GetModelGeoJSONExportURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schemas/internalapi/v1/schema.proto",
}
