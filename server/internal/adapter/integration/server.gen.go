// Package integration provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package integration

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"mime/multipart"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/reearth/reearth-cms/server/pkg/id"
	. "github.com/reearth/reearth-cms/server/pkg/integrationapi"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (DELETE /assets/{assetId})
	AssetDelete(ctx echo.Context, assetId AssetIdParam) error

	// (GET /assets/{assetId})
	AssetGet(ctx echo.Context, assetId AssetIdParam) error

	// (GET /assets/{assetId}/comments)
	AssetCommentList(ctx echo.Context, assetId AssetIdParam) error

	// (POST /assets/{assetId}/comments)
	AssetCommentCreate(ctx echo.Context, assetId AssetIdParam) error

	// (DELETE /assets/{assetId}/comments/{commentId})
	AssetCommentDelete(ctx echo.Context, assetId AssetIdParam, commentId CommentIdParam) error
	// Update AssetComment
	// (PATCH /assets/{assetId}/comments/{commentId})
	AssetCommentUpdate(ctx echo.Context, assetId AssetIdParam, commentId CommentIdParam) error

	// (DELETE /items/{itemId})
	ItemDelete(ctx echo.Context, itemId ItemIdParam) error
	// Returns an items.
	// (GET /items/{itemId})
	ItemGet(ctx echo.Context, itemId ItemIdParam, params ItemGetParams) error
	// Update an item.
	// (PATCH /items/{itemId})
	ItemUpdate(ctx echo.Context, itemId ItemIdParam) error

	// (GET /items/{itemId}/comments)
	ItemCommentList(ctx echo.Context, itemId ItemIdParam) error

	// (POST /items/{itemId}/comments)
	ItemCommentCreate(ctx echo.Context, itemId ItemIdParam) error

	// (DELETE /items/{itemId}/comments/{commentId})
	ItemCommentDelete(ctx echo.Context, itemId ItemIdParam, commentId CommentIdParam) error
	// Update Item Comment
	// (PATCH /items/{itemId}/comments/{commentId})
	ItemCommentUpdate(ctx echo.Context, itemId ItemIdParam, commentId CommentIdParam) error
	// Returns a list of items.
	// (GET /models/{modelIdOrKey}/items)
	ItemFilter(ctx echo.Context, modelIdOrKey ModelIdOrKeyParam, params ItemFilterParams) error

	// (POST /models/{modelIdOrKey}/items)
	ItemCreate(ctx echo.Context, modelIdOrKey ModelIdOrKeyParam) error
	// Returns a list of assets.
	// (GET /projects/{projectId}/assets)
	AssetFilter(ctx echo.Context, projectId ProjectIdParam, params AssetFilterParams) error
	// Returns a list of assets.
	// (POST /projects/{projectId}/assets)
	AssetCreate(ctx echo.Context, projectId ProjectIdParam) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AssetDelete converts echo context to params.
func (w *ServerInterfaceWrapper) AssetDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "assetId" -------------
	var assetId AssetIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "assetId", runtime.ParamLocationPath, ctx.Param("assetId"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssetDelete(ctx, assetId)
	return err
}

// AssetGet converts echo context to params.
func (w *ServerInterfaceWrapper) AssetGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "assetId" -------------
	var assetId AssetIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "assetId", runtime.ParamLocationPath, ctx.Param("assetId"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssetGet(ctx, assetId)
	return err
}

// AssetCommentList converts echo context to params.
func (w *ServerInterfaceWrapper) AssetCommentList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "assetId" -------------
	var assetId AssetIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "assetId", runtime.ParamLocationPath, ctx.Param("assetId"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssetCommentList(ctx, assetId)
	return err
}

// AssetCommentCreate converts echo context to params.
func (w *ServerInterfaceWrapper) AssetCommentCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "assetId" -------------
	var assetId AssetIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "assetId", runtime.ParamLocationPath, ctx.Param("assetId"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssetCommentCreate(ctx, assetId)
	return err
}

// AssetCommentDelete converts echo context to params.
func (w *ServerInterfaceWrapper) AssetCommentDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "assetId" -------------
	var assetId AssetIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "assetId", runtime.ParamLocationPath, ctx.Param("assetId"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetId: %s", err))
	}

	// ------------- Path parameter "commentId" -------------
	var commentId CommentIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "commentId", runtime.ParamLocationPath, ctx.Param("commentId"), &commentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commentId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssetCommentDelete(ctx, assetId, commentId)
	return err
}

// AssetCommentUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) AssetCommentUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "assetId" -------------
	var assetId AssetIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "assetId", runtime.ParamLocationPath, ctx.Param("assetId"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetId: %s", err))
	}

	// ------------- Path parameter "commentId" -------------
	var commentId CommentIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "commentId", runtime.ParamLocationPath, ctx.Param("commentId"), &commentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commentId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssetCommentUpdate(ctx, assetId, commentId)
	return err
}

// ItemDelete converts echo context to params.
func (w *ServerInterfaceWrapper) ItemDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId ItemIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "itemId", runtime.ParamLocationPath, ctx.Param("itemId"), &itemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ItemDelete(ctx, itemId)
	return err
}

// ItemGet converts echo context to params.
func (w *ServerInterfaceWrapper) ItemGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId ItemIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "itemId", runtime.ParamLocationPath, ctx.Param("itemId"), &itemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ItemGetParams
	// ------------- Optional query parameter "ref" -------------

	err = runtime.BindQueryParameter("form", true, false, "ref", ctx.QueryParams(), &params.Ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ItemGet(ctx, itemId, params)
	return err
}

// ItemUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ItemUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId ItemIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "itemId", runtime.ParamLocationPath, ctx.Param("itemId"), &itemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ItemUpdate(ctx, itemId)
	return err
}

// ItemCommentList converts echo context to params.
func (w *ServerInterfaceWrapper) ItemCommentList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId ItemIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "itemId", runtime.ParamLocationPath, ctx.Param("itemId"), &itemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ItemCommentList(ctx, itemId)
	return err
}

// ItemCommentCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ItemCommentCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId ItemIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "itemId", runtime.ParamLocationPath, ctx.Param("itemId"), &itemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ItemCommentCreate(ctx, itemId)
	return err
}

// ItemCommentDelete converts echo context to params.
func (w *ServerInterfaceWrapper) ItemCommentDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId ItemIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "itemId", runtime.ParamLocationPath, ctx.Param("itemId"), &itemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	// ------------- Path parameter "commentId" -------------
	var commentId CommentIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "commentId", runtime.ParamLocationPath, ctx.Param("commentId"), &commentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commentId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ItemCommentDelete(ctx, itemId, commentId)
	return err
}

// ItemCommentUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ItemCommentUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId ItemIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "itemId", runtime.ParamLocationPath, ctx.Param("itemId"), &itemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	// ------------- Path parameter "commentId" -------------
	var commentId CommentIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "commentId", runtime.ParamLocationPath, ctx.Param("commentId"), &commentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commentId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ItemCommentUpdate(ctx, itemId, commentId)
	return err
}

// ItemFilter converts echo context to params.
func (w *ServerInterfaceWrapper) ItemFilter(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "modelIdOrKey", runtime.ParamLocationPath, ctx.Param("modelIdOrKey"), &modelIdOrKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ItemFilterParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "dir" -------------

	err = runtime.BindQueryParameter("form", true, false, "dir", ctx.QueryParams(), &params.Dir)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dir: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// ------------- Optional query parameter "ref" -------------

	err = runtime.BindQueryParameter("form", true, false, "ref", ctx.QueryParams(), &params.Ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ItemFilter(ctx, modelIdOrKey, params)
	return err
}

// ItemCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ItemCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "modelIdOrKey", runtime.ParamLocationPath, ctx.Param("modelIdOrKey"), &modelIdOrKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ItemCreate(ctx, modelIdOrKey)
	return err
}

// AssetFilter converts echo context to params.
func (w *ServerInterfaceWrapper) AssetFilter(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId ProjectIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssetFilterParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "dir" -------------

	err = runtime.BindQueryParameter("form", true, false, "dir", ctx.QueryParams(), &params.Dir)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dir: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssetFilter(ctx, projectId, params)
	return err
}

// AssetCreate converts echo context to params.
func (w *ServerInterfaceWrapper) AssetCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId ProjectIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssetCreate(ctx, projectId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/assets/:assetId", wrapper.AssetDelete)
	router.GET(baseURL+"/assets/:assetId", wrapper.AssetGet)
	router.GET(baseURL+"/assets/:assetId/comments", wrapper.AssetCommentList)
	router.POST(baseURL+"/assets/:assetId/comments", wrapper.AssetCommentCreate)
	router.DELETE(baseURL+"/assets/:assetId/comments/:commentId", wrapper.AssetCommentDelete)
	router.PATCH(baseURL+"/assets/:assetId/comments/:commentId", wrapper.AssetCommentUpdate)
	router.DELETE(baseURL+"/items/:itemId", wrapper.ItemDelete)
	router.GET(baseURL+"/items/:itemId", wrapper.ItemGet)
	router.PATCH(baseURL+"/items/:itemId", wrapper.ItemUpdate)
	router.GET(baseURL+"/items/:itemId/comments", wrapper.ItemCommentList)
	router.POST(baseURL+"/items/:itemId/comments", wrapper.ItemCommentCreate)
	router.DELETE(baseURL+"/items/:itemId/comments/:commentId", wrapper.ItemCommentDelete)
	router.PATCH(baseURL+"/items/:itemId/comments/:commentId", wrapper.ItemCommentUpdate)
	router.GET(baseURL+"/models/:modelIdOrKey/items", wrapper.ItemFilter)
	router.POST(baseURL+"/models/:modelIdOrKey/items", wrapper.ItemCreate)
	router.GET(baseURL+"/projects/:projectId/assets", wrapper.AssetFilter)
	router.POST(baseURL+"/projects/:projectId/assets", wrapper.AssetCreate)

}

type UnauthorizedErrorResponse struct {
}

type AssetDeleteRequestObject struct {
	AssetId AssetIdParam `json:"assetId"`
}

type AssetDeleteResponseObject interface {
	VisitAssetDeleteResponse(w http.ResponseWriter) error
}

type AssetDelete200JSONResponse struct {
	Id *id.AssetID `json:"id,omitempty"`
}

func (response AssetDelete200JSONResponse) VisitAssetDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetDelete400Response struct {
}

func (response AssetDelete400Response) VisitAssetDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetDelete401Response = UnauthorizedErrorResponse

func (response AssetDelete401Response) VisitAssetDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetDelete404Response struct {
}

func (response AssetDelete404Response) VisitAssetDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetGetRequestObject struct {
	AssetId AssetIdParam `json:"assetId"`
}

type AssetGetResponseObject interface {
	VisitAssetGetResponse(w http.ResponseWriter) error
}

type AssetGet200JSONResponse Asset

func (response AssetGet200JSONResponse) VisitAssetGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetGet400Response struct {
}

func (response AssetGet400Response) VisitAssetGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetGet401Response = UnauthorizedErrorResponse

func (response AssetGet401Response) VisitAssetGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetGet404Response struct {
}

func (response AssetGet404Response) VisitAssetGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetCommentListRequestObject struct {
	AssetId AssetIdParam `json:"assetId"`
}

type AssetCommentListResponseObject interface {
	VisitAssetCommentListResponse(w http.ResponseWriter) error
}

type AssetCommentList200JSONResponse struct {
	Comments *[]Comment `json:"comments,omitempty"`
}

func (response AssetCommentList200JSONResponse) VisitAssetCommentListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetCommentList400Response struct {
}

func (response AssetCommentList400Response) VisitAssetCommentListResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetCommentList401Response = UnauthorizedErrorResponse

func (response AssetCommentList401Response) VisitAssetCommentListResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetCommentList404Response struct {
}

func (response AssetCommentList404Response) VisitAssetCommentListResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetCommentCreateRequestObject struct {
	AssetId AssetIdParam `json:"assetId"`
	Body    *AssetCommentCreateJSONRequestBody
}

type AssetCommentCreateResponseObject interface {
	VisitAssetCommentCreateResponse(w http.ResponseWriter) error
}

type AssetCommentCreate200JSONResponse Comment

func (response AssetCommentCreate200JSONResponse) VisitAssetCommentCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetCommentCreate400Response struct {
}

func (response AssetCommentCreate400Response) VisitAssetCommentCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetCommentCreate401Response = UnauthorizedErrorResponse

func (response AssetCommentCreate401Response) VisitAssetCommentCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetCommentCreate404Response struct {
}

func (response AssetCommentCreate404Response) VisitAssetCommentCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetCommentDeleteRequestObject struct {
	AssetId   AssetIdParam   `json:"assetId"`
	CommentId CommentIdParam `json:"commentId"`
}

type AssetCommentDeleteResponseObject interface {
	VisitAssetCommentDeleteResponse(w http.ResponseWriter) error
}

type AssetCommentDelete200JSONResponse struct {
	Id *id.CommentID `json:"id,omitempty"`
}

func (response AssetCommentDelete200JSONResponse) VisitAssetCommentDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetCommentDelete400Response struct {
}

func (response AssetCommentDelete400Response) VisitAssetCommentDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetCommentDelete401Response = UnauthorizedErrorResponse

func (response AssetCommentDelete401Response) VisitAssetCommentDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetCommentDelete404Response struct {
}

func (response AssetCommentDelete404Response) VisitAssetCommentDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetCommentUpdateRequestObject struct {
	AssetId   AssetIdParam   `json:"assetId"`
	CommentId CommentIdParam `json:"commentId"`
	Body      *AssetCommentUpdateJSONRequestBody
}

type AssetCommentUpdateResponseObject interface {
	VisitAssetCommentUpdateResponse(w http.ResponseWriter) error
}

type AssetCommentUpdate200JSONResponse Comment

func (response AssetCommentUpdate200JSONResponse) VisitAssetCommentUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetCommentUpdate400Response struct {
}

func (response AssetCommentUpdate400Response) VisitAssetCommentUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetCommentUpdate401Response = UnauthorizedErrorResponse

func (response AssetCommentUpdate401Response) VisitAssetCommentUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetCommentUpdate404Response struct {
}

func (response AssetCommentUpdate404Response) VisitAssetCommentUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemDeleteRequestObject struct {
	ItemId ItemIdParam `json:"itemId"`
}

type ItemDeleteResponseObject interface {
	VisitItemDeleteResponse(w http.ResponseWriter) error
}

type ItemDelete200JSONResponse struct {
	Id *id.ItemID `json:"id,omitempty"`
}

func (response ItemDelete200JSONResponse) VisitItemDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemDelete400Response struct {
}

func (response ItemDelete400Response) VisitItemDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemDelete401Response = UnauthorizedErrorResponse

func (response ItemDelete401Response) VisitItemDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemDelete404Response struct {
}

func (response ItemDelete404Response) VisitItemDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemGetRequestObject struct {
	ItemId ItemIdParam `json:"itemId"`
	Params ItemGetParams
}

type ItemGetResponseObject interface {
	VisitItemGetResponse(w http.ResponseWriter) error
}

type ItemGet200JSONResponse VersionedItem

func (response ItemGet200JSONResponse) VisitItemGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemGet400Response struct {
}

func (response ItemGet400Response) VisitItemGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemGet401Response = UnauthorizedErrorResponse

func (response ItemGet401Response) VisitItemGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemGet404Response struct {
}

func (response ItemGet404Response) VisitItemGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemUpdateRequestObject struct {
	ItemId ItemIdParam `json:"itemId"`
	Body   *ItemUpdateJSONRequestBody
}

type ItemUpdateResponseObject interface {
	VisitItemUpdateResponse(w http.ResponseWriter) error
}

type ItemUpdate200JSONResponse VersionedItem

func (response ItemUpdate200JSONResponse) VisitItemUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemUpdate400Response struct {
}

func (response ItemUpdate400Response) VisitItemUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemUpdate401Response = UnauthorizedErrorResponse

func (response ItemUpdate401Response) VisitItemUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemUpdate404Response struct {
}

func (response ItemUpdate404Response) VisitItemUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemCommentListRequestObject struct {
	ItemId ItemIdParam `json:"itemId"`
}

type ItemCommentListResponseObject interface {
	VisitItemCommentListResponse(w http.ResponseWriter) error
}

type ItemCommentList200JSONResponse struct {
	Comments *[]Comment `json:"comments,omitempty"`
}

func (response ItemCommentList200JSONResponse) VisitItemCommentListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemCommentList400Response struct {
}

func (response ItemCommentList400Response) VisitItemCommentListResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemCommentList401Response = UnauthorizedErrorResponse

func (response ItemCommentList401Response) VisitItemCommentListResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemCommentList404Response struct {
}

func (response ItemCommentList404Response) VisitItemCommentListResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemCommentCreateRequestObject struct {
	ItemId ItemIdParam `json:"itemId"`
	Body   *ItemCommentCreateJSONRequestBody
}

type ItemCommentCreateResponseObject interface {
	VisitItemCommentCreateResponse(w http.ResponseWriter) error
}

type ItemCommentCreate200JSONResponse Comment

func (response ItemCommentCreate200JSONResponse) VisitItemCommentCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemCommentCreate400Response struct {
}

func (response ItemCommentCreate400Response) VisitItemCommentCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemCommentCreate401Response = UnauthorizedErrorResponse

func (response ItemCommentCreate401Response) VisitItemCommentCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemCommentCreate404Response struct {
}

func (response ItemCommentCreate404Response) VisitItemCommentCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemCommentDeleteRequestObject struct {
	ItemId    ItemIdParam    `json:"itemId"`
	CommentId CommentIdParam `json:"commentId"`
}

type ItemCommentDeleteResponseObject interface {
	VisitItemCommentDeleteResponse(w http.ResponseWriter) error
}

type ItemCommentDelete200JSONResponse struct {
	Id *id.CommentID `json:"id,omitempty"`
}

func (response ItemCommentDelete200JSONResponse) VisitItemCommentDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemCommentDelete400Response struct {
}

func (response ItemCommentDelete400Response) VisitItemCommentDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemCommentDelete401Response = UnauthorizedErrorResponse

func (response ItemCommentDelete401Response) VisitItemCommentDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemCommentDelete404Response struct {
}

func (response ItemCommentDelete404Response) VisitItemCommentDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemCommentUpdateRequestObject struct {
	ItemId    ItemIdParam    `json:"itemId"`
	CommentId CommentIdParam `json:"commentId"`
	Body      *ItemCommentUpdateJSONRequestBody
}

type ItemCommentUpdateResponseObject interface {
	VisitItemCommentUpdateResponse(w http.ResponseWriter) error
}

type ItemCommentUpdate200JSONResponse Comment

func (response ItemCommentUpdate200JSONResponse) VisitItemCommentUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemCommentUpdate400Response struct {
}

func (response ItemCommentUpdate400Response) VisitItemCommentUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemCommentUpdate401Response = UnauthorizedErrorResponse

func (response ItemCommentUpdate401Response) VisitItemCommentUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemCommentUpdate404Response struct {
}

func (response ItemCommentUpdate404Response) VisitItemCommentUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemFilterRequestObject struct {
	ModelIdOrKey ModelIdOrKeyParam `json:"modelIdOrKey"`
	Params       ItemFilterParams
}

type ItemFilterResponseObject interface {
	VisitItemFilterResponse(w http.ResponseWriter) error
}

type ItemFilter200JSONResponse struct {
	Items      *[]VersionedItem `json:"items,omitempty"`
	Page       *int             `json:"page,omitempty"`
	PerPage    *int             `json:"perPage,omitempty"`
	TotalCount *int             `json:"totalCount,omitempty"`
}

func (response ItemFilter200JSONResponse) VisitItemFilterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemFilter400Response struct {
}

func (response ItemFilter400Response) VisitItemFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemFilter401Response = UnauthorizedErrorResponse

func (response ItemFilter401Response) VisitItemFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemFilter404Response struct {
}

func (response ItemFilter404Response) VisitItemFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemCreateRequestObject struct {
	ModelIdOrKey ModelIdOrKeyParam `json:"modelIdOrKey"`
	Body         *ItemCreateJSONRequestBody
}

type ItemCreateResponseObject interface {
	VisitItemCreateResponse(w http.ResponseWriter) error
}

type ItemCreate200JSONResponse VersionedItem

func (response ItemCreate200JSONResponse) VisitItemCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemCreate400Response struct {
}

func (response ItemCreate400Response) VisitItemCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemCreate401Response = UnauthorizedErrorResponse

func (response ItemCreate401Response) VisitItemCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetFilterRequestObject struct {
	ProjectId ProjectIdParam `json:"projectId"`
	Params    AssetFilterParams
}

type AssetFilterResponseObject interface {
	VisitAssetFilterResponse(w http.ResponseWriter) error
}

type AssetFilter200JSONResponse struct {
	Items      *[]Asset `json:"items,omitempty"`
	Page       *int     `json:"page,omitempty"`
	PerPage    *int     `json:"perPage,omitempty"`
	TotalCount *int     `json:"totalCount,omitempty"`
}

func (response AssetFilter200JSONResponse) VisitAssetFilterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetFilter400Response struct {
}

func (response AssetFilter400Response) VisitAssetFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetFilter401Response = UnauthorizedErrorResponse

func (response AssetFilter401Response) VisitAssetFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetFilter404Response struct {
}

func (response AssetFilter404Response) VisitAssetFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetCreateRequestObject struct {
	ProjectId     ProjectIdParam `json:"projectId"`
	JSONBody      *AssetCreateJSONRequestBody
	MultipartBody *multipart.Reader
}

type AssetCreateResponseObject interface {
	VisitAssetCreateResponse(w http.ResponseWriter) error
}

type AssetCreate200JSONResponse Asset

func (response AssetCreate200JSONResponse) VisitAssetCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetCreate400Response struct {
}

func (response AssetCreate400Response) VisitAssetCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetCreate401Response = UnauthorizedErrorResponse

func (response AssetCreate401Response) VisitAssetCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetCreate404Response struct {
}

func (response AssetCreate404Response) VisitAssetCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (DELETE /assets/{assetId})
	AssetDelete(ctx context.Context, request AssetDeleteRequestObject) (AssetDeleteResponseObject, error)

	// (GET /assets/{assetId})
	AssetGet(ctx context.Context, request AssetGetRequestObject) (AssetGetResponseObject, error)

	// (GET /assets/{assetId}/comments)
	AssetCommentList(ctx context.Context, request AssetCommentListRequestObject) (AssetCommentListResponseObject, error)

	// (POST /assets/{assetId}/comments)
	AssetCommentCreate(ctx context.Context, request AssetCommentCreateRequestObject) (AssetCommentCreateResponseObject, error)

	// (DELETE /assets/{assetId}/comments/{commentId})
	AssetCommentDelete(ctx context.Context, request AssetCommentDeleteRequestObject) (AssetCommentDeleteResponseObject, error)
	// Update AssetComment
	// (PATCH /assets/{assetId}/comments/{commentId})
	AssetCommentUpdate(ctx context.Context, request AssetCommentUpdateRequestObject) (AssetCommentUpdateResponseObject, error)

	// (DELETE /items/{itemId})
	ItemDelete(ctx context.Context, request ItemDeleteRequestObject) (ItemDeleteResponseObject, error)
	// Returns an items.
	// (GET /items/{itemId})
	ItemGet(ctx context.Context, request ItemGetRequestObject) (ItemGetResponseObject, error)
	// Update an item.
	// (PATCH /items/{itemId})
	ItemUpdate(ctx context.Context, request ItemUpdateRequestObject) (ItemUpdateResponseObject, error)

	// (GET /items/{itemId}/comments)
	ItemCommentList(ctx context.Context, request ItemCommentListRequestObject) (ItemCommentListResponseObject, error)

	// (POST /items/{itemId}/comments)
	ItemCommentCreate(ctx context.Context, request ItemCommentCreateRequestObject) (ItemCommentCreateResponseObject, error)

	// (DELETE /items/{itemId}/comments/{commentId})
	ItemCommentDelete(ctx context.Context, request ItemCommentDeleteRequestObject) (ItemCommentDeleteResponseObject, error)
	// Update Item Comment
	// (PATCH /items/{itemId}/comments/{commentId})
	ItemCommentUpdate(ctx context.Context, request ItemCommentUpdateRequestObject) (ItemCommentUpdateResponseObject, error)
	// Returns a list of items.
	// (GET /models/{modelIdOrKey}/items)
	ItemFilter(ctx context.Context, request ItemFilterRequestObject) (ItemFilterResponseObject, error)

	// (POST /models/{modelIdOrKey}/items)
	ItemCreate(ctx context.Context, request ItemCreateRequestObject) (ItemCreateResponseObject, error)
	// Returns a list of assets.
	// (GET /projects/{projectId}/assets)
	AssetFilter(ctx context.Context, request AssetFilterRequestObject) (AssetFilterResponseObject, error)
	// Returns a list of assets.
	// (POST /projects/{projectId}/assets)
	AssetCreate(ctx context.Context, request AssetCreateRequestObject) (AssetCreateResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// AssetDelete operation middleware
func (sh *strictHandler) AssetDelete(ctx echo.Context, assetId AssetIdParam) error {
	var request AssetDeleteRequestObject

	request.AssetId = assetId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetDelete(ctx.Request().Context(), request.(AssetDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetDeleteResponseObject); ok {
		return validResponse.VisitAssetDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AssetGet operation middleware
func (sh *strictHandler) AssetGet(ctx echo.Context, assetId AssetIdParam) error {
	var request AssetGetRequestObject

	request.AssetId = assetId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetGet(ctx.Request().Context(), request.(AssetGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetGetResponseObject); ok {
		return validResponse.VisitAssetGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AssetCommentList operation middleware
func (sh *strictHandler) AssetCommentList(ctx echo.Context, assetId AssetIdParam) error {
	var request AssetCommentListRequestObject

	request.AssetId = assetId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetCommentList(ctx.Request().Context(), request.(AssetCommentListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetCommentList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetCommentListResponseObject); ok {
		return validResponse.VisitAssetCommentListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AssetCommentCreate operation middleware
func (sh *strictHandler) AssetCommentCreate(ctx echo.Context, assetId AssetIdParam) error {
	var request AssetCommentCreateRequestObject

	request.AssetId = assetId

	var body AssetCommentCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetCommentCreate(ctx.Request().Context(), request.(AssetCommentCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetCommentCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetCommentCreateResponseObject); ok {
		return validResponse.VisitAssetCommentCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AssetCommentDelete operation middleware
func (sh *strictHandler) AssetCommentDelete(ctx echo.Context, assetId AssetIdParam, commentId CommentIdParam) error {
	var request AssetCommentDeleteRequestObject

	request.AssetId = assetId
	request.CommentId = commentId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetCommentDelete(ctx.Request().Context(), request.(AssetCommentDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetCommentDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetCommentDeleteResponseObject); ok {
		return validResponse.VisitAssetCommentDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AssetCommentUpdate operation middleware
func (sh *strictHandler) AssetCommentUpdate(ctx echo.Context, assetId AssetIdParam, commentId CommentIdParam) error {
	var request AssetCommentUpdateRequestObject

	request.AssetId = assetId
	request.CommentId = commentId

	var body AssetCommentUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetCommentUpdate(ctx.Request().Context(), request.(AssetCommentUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetCommentUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetCommentUpdateResponseObject); ok {
		return validResponse.VisitAssetCommentUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ItemDelete operation middleware
func (sh *strictHandler) ItemDelete(ctx echo.Context, itemId ItemIdParam) error {
	var request ItemDeleteRequestObject

	request.ItemId = itemId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemDelete(ctx.Request().Context(), request.(ItemDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemDeleteResponseObject); ok {
		return validResponse.VisitItemDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ItemGet operation middleware
func (sh *strictHandler) ItemGet(ctx echo.Context, itemId ItemIdParam, params ItemGetParams) error {
	var request ItemGetRequestObject

	request.ItemId = itemId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemGet(ctx.Request().Context(), request.(ItemGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemGetResponseObject); ok {
		return validResponse.VisitItemGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ItemUpdate operation middleware
func (sh *strictHandler) ItemUpdate(ctx echo.Context, itemId ItemIdParam) error {
	var request ItemUpdateRequestObject

	request.ItemId = itemId

	var body ItemUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemUpdate(ctx.Request().Context(), request.(ItemUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemUpdateResponseObject); ok {
		return validResponse.VisitItemUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ItemCommentList operation middleware
func (sh *strictHandler) ItemCommentList(ctx echo.Context, itemId ItemIdParam) error {
	var request ItemCommentListRequestObject

	request.ItemId = itemId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemCommentList(ctx.Request().Context(), request.(ItemCommentListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemCommentList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemCommentListResponseObject); ok {
		return validResponse.VisitItemCommentListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ItemCommentCreate operation middleware
func (sh *strictHandler) ItemCommentCreate(ctx echo.Context, itemId ItemIdParam) error {
	var request ItemCommentCreateRequestObject

	request.ItemId = itemId

	var body ItemCommentCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemCommentCreate(ctx.Request().Context(), request.(ItemCommentCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemCommentCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemCommentCreateResponseObject); ok {
		return validResponse.VisitItemCommentCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ItemCommentDelete operation middleware
func (sh *strictHandler) ItemCommentDelete(ctx echo.Context, itemId ItemIdParam, commentId CommentIdParam) error {
	var request ItemCommentDeleteRequestObject

	request.ItemId = itemId
	request.CommentId = commentId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemCommentDelete(ctx.Request().Context(), request.(ItemCommentDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemCommentDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemCommentDeleteResponseObject); ok {
		return validResponse.VisitItemCommentDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ItemCommentUpdate operation middleware
func (sh *strictHandler) ItemCommentUpdate(ctx echo.Context, itemId ItemIdParam, commentId CommentIdParam) error {
	var request ItemCommentUpdateRequestObject

	request.ItemId = itemId
	request.CommentId = commentId

	var body ItemCommentUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemCommentUpdate(ctx.Request().Context(), request.(ItemCommentUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemCommentUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemCommentUpdateResponseObject); ok {
		return validResponse.VisitItemCommentUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ItemFilter operation middleware
func (sh *strictHandler) ItemFilter(ctx echo.Context, modelIdOrKey ModelIdOrKeyParam, params ItemFilterParams) error {
	var request ItemFilterRequestObject

	request.ModelIdOrKey = modelIdOrKey
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemFilter(ctx.Request().Context(), request.(ItemFilterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemFilter")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemFilterResponseObject); ok {
		return validResponse.VisitItemFilterResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ItemCreate operation middleware
func (sh *strictHandler) ItemCreate(ctx echo.Context, modelIdOrKey ModelIdOrKeyParam) error {
	var request ItemCreateRequestObject

	request.ModelIdOrKey = modelIdOrKey

	var body ItemCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemCreate(ctx.Request().Context(), request.(ItemCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemCreateResponseObject); ok {
		return validResponse.VisitItemCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AssetFilter operation middleware
func (sh *strictHandler) AssetFilter(ctx echo.Context, projectId ProjectIdParam, params AssetFilterParams) error {
	var request AssetFilterRequestObject

	request.ProjectId = projectId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetFilter(ctx.Request().Context(), request.(AssetFilterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetFilter")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetFilterResponseObject); ok {
		return validResponse.VisitAssetFilterResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AssetCreate operation middleware
func (sh *strictHandler) AssetCreate(ctx echo.Context, projectId ProjectIdParam) error {
	var request AssetCreateRequestObject

	request.ProjectId = projectId
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body AssetCreateJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "multipart/form-data") {
		if reader, err := ctx.Request().MultipartReader(); err != nil {
			return err
		} else {
			request.MultipartBody = reader
		}
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetCreate(ctx.Request().Context(), request.(AssetCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetCreateResponseObject); ok {
		return validResponse.VisitAssetCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"gIRwtwQ1AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
