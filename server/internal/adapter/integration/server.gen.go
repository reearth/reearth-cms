// Package integration provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package integration

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"mime/multipart"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/reearth/reearth-cms/server/pkg/id"
	. "github.com/reearth/reearth-cms/server/pkg/integrationapi"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (DELETE /items/{itemId})
	ItemDelete(ctx echo.Context, itemId ItemIdParam) error
	// Returns an items.
	// (GET /items/{itemId})
	ItemGet(ctx echo.Context, itemId ItemIdParam, params ItemGetParams) error
	// Update an item.
	// (POST /items/{itemId})
	ItemUpdate(ctx echo.Context, itemId ItemIdParam, params ItemUpdateParams) error
	// Returns a list of items.
	// (GET /models/{modelId}/items)
	ItemFilter(ctx echo.Context, modelId ModelIdParam, params ItemFilterParams) error

	// (POST /models/{modelId}/items)
	ItemCreate(ctx echo.Context, modelId ModelIdParam) error
	// Set ref and version.
	// (POST /models/{modelId}/items/{itemId}/refs)
	ItemPublish(ctx echo.Context, modelId ModelIdParam, itemId ItemIdParam) error
	// Returns a list of assets.
	// (GET /projects/{projectId}/assets)
	AssetFilter(ctx echo.Context, projectId ProjectIdParam, params AssetFilterParams) error
	// Returns a list of assets.
	// (POST /projects/{projectId}/assets)
	AssetCreate(ctx echo.Context, projectId ProjectIdParam) error

	// (DELETE /projects/{projectId}/assets/{assetId})
	AssetDelete(ctx echo.Context, projectId ProjectIdParam, assetId AssetIdParam) error

	// (GET /projects/{projectId}/assets/{assetId})
	AssetGet(ctx echo.Context, projectId ProjectIdParam, assetId AssetIdParam) error

	// (GET /projects/{projectId}/assets/{assetId}/comments)
	AssetCommentList(ctx echo.Context, projectId ProjectIdParam, assetId AssetIdParam) error

	// (POST /projects/{projectId}/assets/{assetId}/comments)
	AssetCommentCreate(ctx echo.Context, projectId ProjectIdParam, assetId AssetIdParam) error

	// (DELETE /projects/{projectId}/assets/{assetId}/comments/{commentId})
	AssetCommentDelete(ctx echo.Context, projectId ProjectIdParam, assetId AssetIdParam, commentId CommentIdParam) error
	// Update AssetComment
	// (PATCH /projects/{projectId}/assets/{assetId}/comments/{commentId})
	AssetCommentUpdate(ctx echo.Context, projectId ProjectIdParam, assetId AssetIdParam, commentId CommentIdParam) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ItemDelete converts echo context to params.
func (w *ServerInterfaceWrapper) ItemDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId ItemIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "itemId", runtime.ParamLocationPath, ctx.Param("itemId"), &itemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ItemDelete(ctx, itemId)
	return err
}

// ItemGet converts echo context to params.
func (w *ServerInterfaceWrapper) ItemGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId ItemIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "itemId", runtime.ParamLocationPath, ctx.Param("itemId"), &itemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ItemGetParams
	// ------------- Optional query parameter "ref" -------------

	err = runtime.BindQueryParameter("form", true, false, "ref", ctx.QueryParams(), &params.Ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ItemGet(ctx, itemId, params)
	return err
}

// ItemUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ItemUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId ItemIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "itemId", runtime.ParamLocationPath, ctx.Param("itemId"), &itemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ItemUpdateParams
	// ------------- Optional query parameter "ref" -------------

	err = runtime.BindQueryParameter("form", true, false, "ref", ctx.QueryParams(), &params.Ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ItemUpdate(ctx, itemId, params)
	return err
}

// ItemFilter converts echo context to params.
func (w *ServerInterfaceWrapper) ItemFilter(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "modelId" -------------
	var modelId ModelIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "modelId", runtime.ParamLocationPath, ctx.Param("modelId"), &modelId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ItemFilterParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "dir" -------------

	err = runtime.BindQueryParameter("form", true, false, "dir", ctx.QueryParams(), &params.Dir)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dir: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// ------------- Optional query parameter "ref" -------------

	err = runtime.BindQueryParameter("form", true, false, "ref", ctx.QueryParams(), &params.Ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ItemFilter(ctx, modelId, params)
	return err
}

// ItemCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ItemCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "modelId" -------------
	var modelId ModelIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "modelId", runtime.ParamLocationPath, ctx.Param("modelId"), &modelId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ItemCreate(ctx, modelId)
	return err
}

// ItemPublish converts echo context to params.
func (w *ServerInterfaceWrapper) ItemPublish(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "modelId" -------------
	var modelId ModelIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "modelId", runtime.ParamLocationPath, ctx.Param("modelId"), &modelId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelId: %s", err))
	}

	// ------------- Path parameter "itemId" -------------
	var itemId ItemIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "itemId", runtime.ParamLocationPath, ctx.Param("itemId"), &itemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ItemPublish(ctx, modelId, itemId)
	return err
}

// AssetFilter converts echo context to params.
func (w *ServerInterfaceWrapper) AssetFilter(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId ProjectIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssetFilterParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "dir" -------------

	err = runtime.BindQueryParameter("form", true, false, "dir", ctx.QueryParams(), &params.Dir)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dir: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssetFilter(ctx, projectId, params)
	return err
}

// AssetCreate converts echo context to params.
func (w *ServerInterfaceWrapper) AssetCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId ProjectIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssetCreate(ctx, projectId)
	return err
}

// AssetDelete converts echo context to params.
func (w *ServerInterfaceWrapper) AssetDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId ProjectIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "assetId" -------------
	var assetId AssetIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "assetId", runtime.ParamLocationPath, ctx.Param("assetId"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssetDelete(ctx, projectId, assetId)
	return err
}

// AssetGet converts echo context to params.
func (w *ServerInterfaceWrapper) AssetGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId ProjectIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "assetId" -------------
	var assetId AssetIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "assetId", runtime.ParamLocationPath, ctx.Param("assetId"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssetGet(ctx, projectId, assetId)
	return err
}

// AssetCommentList converts echo context to params.
func (w *ServerInterfaceWrapper) AssetCommentList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId ProjectIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "assetId" -------------
	var assetId AssetIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "assetId", runtime.ParamLocationPath, ctx.Param("assetId"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssetCommentList(ctx, projectId, assetId)
	return err
}

// AssetCommentCreate converts echo context to params.
func (w *ServerInterfaceWrapper) AssetCommentCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId ProjectIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "assetId" -------------
	var assetId AssetIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "assetId", runtime.ParamLocationPath, ctx.Param("assetId"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssetCommentCreate(ctx, projectId, assetId)
	return err
}

// AssetCommentDelete converts echo context to params.
func (w *ServerInterfaceWrapper) AssetCommentDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId ProjectIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "assetId" -------------
	var assetId AssetIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "assetId", runtime.ParamLocationPath, ctx.Param("assetId"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetId: %s", err))
	}

	// ------------- Path parameter "commentId" -------------
	var commentId CommentIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "commentId", runtime.ParamLocationPath, ctx.Param("commentId"), &commentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commentId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssetCommentDelete(ctx, projectId, assetId, commentId)
	return err
}

// AssetCommentUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) AssetCommentUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId ProjectIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "assetId" -------------
	var assetId AssetIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "assetId", runtime.ParamLocationPath, ctx.Param("assetId"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetId: %s", err))
	}

	// ------------- Path parameter "commentId" -------------
	var commentId CommentIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "commentId", runtime.ParamLocationPath, ctx.Param("commentId"), &commentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commentId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssetCommentUpdate(ctx, projectId, assetId, commentId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/items/:itemId", wrapper.ItemDelete)
	router.GET(baseURL+"/items/:itemId", wrapper.ItemGet)
	router.POST(baseURL+"/items/:itemId", wrapper.ItemUpdate)
	router.GET(baseURL+"/models/:modelId/items", wrapper.ItemFilter)
	router.POST(baseURL+"/models/:modelId/items", wrapper.ItemCreate)
	router.POST(baseURL+"/models/:modelId/items/:itemId/refs", wrapper.ItemPublish)
	router.GET(baseURL+"/projects/:projectId/assets", wrapper.AssetFilter)
	router.POST(baseURL+"/projects/:projectId/assets", wrapper.AssetCreate)
	router.DELETE(baseURL+"/projects/:projectId/assets/:assetId", wrapper.AssetDelete)
	router.GET(baseURL+"/projects/:projectId/assets/:assetId", wrapper.AssetGet)
	router.GET(baseURL+"/projects/:projectId/assets/:assetId/comments", wrapper.AssetCommentList)
	router.POST(baseURL+"/projects/:projectId/assets/:assetId/comments", wrapper.AssetCommentCreate)
	router.DELETE(baseURL+"/projects/:projectId/assets/:assetId/comments/:commentId", wrapper.AssetCommentDelete)
	router.PATCH(baseURL+"/projects/:projectId/assets/:assetId/comments/:commentId", wrapper.AssetCommentUpdate)

}

type UnauthorizedErrorResponse struct {
}

type ItemDeleteRequestObject struct {
	ItemId ItemIdParam `json:"itemId"`
}

type ItemDeleteResponseObject interface {
	VisitItemDeleteResponse(w http.ResponseWriter) error
}

type ItemDelete200JSONResponse struct {
	Id *id.ItemID `json:"id,omitempty"`
}

func (response ItemDelete200JSONResponse) VisitItemDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemDelete400Response struct {
}

func (response ItemDelete400Response) VisitItemDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemDelete401Response = UnauthorizedErrorResponse

func (response ItemDelete401Response) VisitItemDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemDelete404Response struct {
}

func (response ItemDelete404Response) VisitItemDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemGetRequestObject struct {
	ItemId ItemIdParam `json:"itemId"`
	Params ItemGetParams
}

type ItemGetResponseObject interface {
	VisitItemGetResponse(w http.ResponseWriter) error
}

type ItemGet200JSONResponse Item

func (response ItemGet200JSONResponse) VisitItemGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemGet400Response struct {
}

func (response ItemGet400Response) VisitItemGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemGet401Response = UnauthorizedErrorResponse

func (response ItemGet401Response) VisitItemGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemUpdateRequestObject struct {
	ItemId ItemIdParam `json:"itemId"`
	Params ItemUpdateParams
	Body   *ItemUpdateJSONRequestBody
}

type ItemUpdateResponseObject interface {
	VisitItemUpdateResponse(w http.ResponseWriter) error
}

type ItemUpdate200JSONResponse Item

func (response ItemUpdate200JSONResponse) VisitItemUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemUpdate400Response struct {
}

func (response ItemUpdate400Response) VisitItemUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemUpdate401Response = UnauthorizedErrorResponse

func (response ItemUpdate401Response) VisitItemUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemFilterRequestObject struct {
	ModelId ModelIdParam `json:"modelId"`
	Params  ItemFilterParams
}

type ItemFilterResponseObject interface {
	VisitItemFilterResponse(w http.ResponseWriter) error
}

type ItemFilter200JSONResponse struct {
	Items      *[]Item `json:"items,omitempty"`
	Page       *int    `json:"page,omitempty"`
	PerPage    *int    `json:"perPage,omitempty"`
	TotalCount *int    `json:"totalCount,omitempty"`
}

func (response ItemFilter200JSONResponse) VisitItemFilterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemFilter400Response struct {
}

func (response ItemFilter400Response) VisitItemFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemFilter401Response = UnauthorizedErrorResponse

func (response ItemFilter401Response) VisitItemFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemCreateRequestObject struct {
	ModelId ModelIdParam `json:"modelId"`
	Body    *ItemCreateJSONRequestBody
}

type ItemCreateResponseObject interface {
	VisitItemCreateResponse(w http.ResponseWriter) error
}

type ItemCreate200JSONResponse Item

func (response ItemCreate200JSONResponse) VisitItemCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemCreate400Response struct {
}

func (response ItemCreate400Response) VisitItemCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemCreate401Response = UnauthorizedErrorResponse

func (response ItemCreate401Response) VisitItemCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemPublishRequestObject struct {
	ModelId ModelIdParam `json:"modelId"`
	ItemId  ItemIdParam  `json:"itemId"`
	Body    *ItemPublishJSONRequestBody
}

type ItemPublishResponseObject interface {
	VisitItemPublishResponse(w http.ResponseWriter) error
}

type ItemPublish200JSONResponse Item

func (response ItemPublish200JSONResponse) VisitItemPublishResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemPublish400Response struct {
}

func (response ItemPublish400Response) VisitItemPublishResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemPublish401Response = UnauthorizedErrorResponse

func (response ItemPublish401Response) VisitItemPublishResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetFilterRequestObject struct {
	ProjectId ProjectIdParam `json:"projectId"`
	Params    AssetFilterParams
}

type AssetFilterResponseObject interface {
	VisitAssetFilterResponse(w http.ResponseWriter) error
}

type AssetFilter200JSONResponse struct {
	Items      *[]Asset `json:"items,omitempty"`
	Page       *int     `json:"page,omitempty"`
	PerPage    *int     `json:"perPage,omitempty"`
	TotalCount *int     `json:"totalCount,omitempty"`
}

func (response AssetFilter200JSONResponse) VisitAssetFilterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetFilter400Response struct {
}

func (response AssetFilter400Response) VisitAssetFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetFilter401Response = UnauthorizedErrorResponse

func (response AssetFilter401Response) VisitAssetFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetCreateRequestObject struct {
	ProjectId ProjectIdParam `json:"projectId"`
	Body      *multipart.Reader
}

type AssetCreateResponseObject interface {
	VisitAssetCreateResponse(w http.ResponseWriter) error
}

type AssetCreate200JSONResponse Asset

func (response AssetCreate200JSONResponse) VisitAssetCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetCreate400Response struct {
}

func (response AssetCreate400Response) VisitAssetCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetCreate401Response = UnauthorizedErrorResponse

func (response AssetCreate401Response) VisitAssetCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetDeleteRequestObject struct {
	ProjectId ProjectIdParam `json:"projectId"`
	AssetId   AssetIdParam   `json:"assetId"`
}

type AssetDeleteResponseObject interface {
	VisitAssetDeleteResponse(w http.ResponseWriter) error
}

type AssetDelete200JSONResponse struct {
	Id *id.AssetID `json:"id,omitempty"`
}

func (response AssetDelete200JSONResponse) VisitAssetDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetDelete400Response struct {
}

func (response AssetDelete400Response) VisitAssetDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetDelete401Response = UnauthorizedErrorResponse

func (response AssetDelete401Response) VisitAssetDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetGetRequestObject struct {
	ProjectId ProjectIdParam `json:"projectId"`
	AssetId   AssetIdParam   `json:"assetId"`
}

type AssetGetResponseObject interface {
	VisitAssetGetResponse(w http.ResponseWriter) error
}

type AssetGet200JSONResponse Asset

func (response AssetGet200JSONResponse) VisitAssetGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetGet400Response struct {
}

func (response AssetGet400Response) VisitAssetGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetGet401Response = UnauthorizedErrorResponse

func (response AssetGet401Response) VisitAssetGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetCommentListRequestObject struct {
	ProjectId ProjectIdParam `json:"projectId"`
	AssetId   AssetIdParam   `json:"assetId"`
}

type AssetCommentListResponseObject interface {
	VisitAssetCommentListResponse(w http.ResponseWriter) error
}

type AssetCommentList200JSONResponse struct {
	Comments *[]Comment `json:"comments,omitempty"`
}

func (response AssetCommentList200JSONResponse) VisitAssetCommentListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetCommentList400Response struct {
}

func (response AssetCommentList400Response) VisitAssetCommentListResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetCommentList401Response = UnauthorizedErrorResponse

func (response AssetCommentList401Response) VisitAssetCommentListResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetCommentCreateRequestObject struct {
	ProjectId ProjectIdParam `json:"projectId"`
	AssetId   AssetIdParam   `json:"assetId"`
	Body      *AssetCommentCreateJSONRequestBody
}

type AssetCommentCreateResponseObject interface {
	VisitAssetCommentCreateResponse(w http.ResponseWriter) error
}

type AssetCommentCreate200JSONResponse Comment

func (response AssetCommentCreate200JSONResponse) VisitAssetCommentCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetCommentCreate400Response struct {
}

func (response AssetCommentCreate400Response) VisitAssetCommentCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetCommentCreate401Response = UnauthorizedErrorResponse

func (response AssetCommentCreate401Response) VisitAssetCommentCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetCommentDeleteRequestObject struct {
	ProjectId ProjectIdParam `json:"projectId"`
	AssetId   AssetIdParam   `json:"assetId"`
	CommentId CommentIdParam `json:"commentId"`
}

type AssetCommentDeleteResponseObject interface {
	VisitAssetCommentDeleteResponse(w http.ResponseWriter) error
}

type AssetCommentDelete200JSONResponse struct {
	Id *id.CommentID `json:"id,omitempty"`
}

func (response AssetCommentDelete200JSONResponse) VisitAssetCommentDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetCommentDelete400Response struct {
}

func (response AssetCommentDelete400Response) VisitAssetCommentDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetCommentDelete401Response = UnauthorizedErrorResponse

func (response AssetCommentDelete401Response) VisitAssetCommentDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetCommentDelete404Response struct {
}

func (response AssetCommentDelete404Response) VisitAssetCommentDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetCommentUpdateRequestObject struct {
	ProjectId ProjectIdParam `json:"projectId"`
	AssetId   AssetIdParam   `json:"assetId"`
	CommentId CommentIdParam `json:"commentId"`
	Body      *AssetCommentUpdateJSONRequestBody
}

type AssetCommentUpdateResponseObject interface {
	VisitAssetCommentUpdateResponse(w http.ResponseWriter) error
}

type AssetCommentUpdate200JSONResponse Comment

func (response AssetCommentUpdate200JSONResponse) VisitAssetCommentUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetCommentUpdate400Response struct {
}

func (response AssetCommentUpdate400Response) VisitAssetCommentUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetCommentUpdate401Response = UnauthorizedErrorResponse

func (response AssetCommentUpdate401Response) VisitAssetCommentUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (DELETE /items/{itemId})
	ItemDelete(ctx context.Context, request ItemDeleteRequestObject) (ItemDeleteResponseObject, error)
	// Returns an items.
	// (GET /items/{itemId})
	ItemGet(ctx context.Context, request ItemGetRequestObject) (ItemGetResponseObject, error)
	// Update an item.
	// (POST /items/{itemId})
	ItemUpdate(ctx context.Context, request ItemUpdateRequestObject) (ItemUpdateResponseObject, error)
	// Returns a list of items.
	// (GET /models/{modelId}/items)
	ItemFilter(ctx context.Context, request ItemFilterRequestObject) (ItemFilterResponseObject, error)

	// (POST /models/{modelId}/items)
	ItemCreate(ctx context.Context, request ItemCreateRequestObject) (ItemCreateResponseObject, error)
	// Set ref and version.
	// (POST /models/{modelId}/items/{itemId}/refs)
	ItemPublish(ctx context.Context, request ItemPublishRequestObject) (ItemPublishResponseObject, error)
	// Returns a list of assets.
	// (GET /projects/{projectId}/assets)
	AssetFilter(ctx context.Context, request AssetFilterRequestObject) (AssetFilterResponseObject, error)
	// Returns a list of assets.
	// (POST /projects/{projectId}/assets)
	AssetCreate(ctx context.Context, request AssetCreateRequestObject) (AssetCreateResponseObject, error)

	// (DELETE /projects/{projectId}/assets/{assetId})
	AssetDelete(ctx context.Context, request AssetDeleteRequestObject) (AssetDeleteResponseObject, error)

	// (GET /projects/{projectId}/assets/{assetId})
	AssetGet(ctx context.Context, request AssetGetRequestObject) (AssetGetResponseObject, error)

	// (GET /projects/{projectId}/assets/{assetId}/comments)
	AssetCommentList(ctx context.Context, request AssetCommentListRequestObject) (AssetCommentListResponseObject, error)

	// (POST /projects/{projectId}/assets/{assetId}/comments)
	AssetCommentCreate(ctx context.Context, request AssetCommentCreateRequestObject) (AssetCommentCreateResponseObject, error)

	// (DELETE /projects/{projectId}/assets/{assetId}/comments/{commentId})
	AssetCommentDelete(ctx context.Context, request AssetCommentDeleteRequestObject) (AssetCommentDeleteResponseObject, error)
	// Update AssetComment
	// (PATCH /projects/{projectId}/assets/{assetId}/comments/{commentId})
	AssetCommentUpdate(ctx context.Context, request AssetCommentUpdateRequestObject) (AssetCommentUpdateResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ItemDelete operation middleware
func (sh *strictHandler) ItemDelete(ctx echo.Context, itemId ItemIdParam) error {
	var request ItemDeleteRequestObject

	request.ItemId = itemId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemDelete(ctx.Request().Context(), request.(ItemDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemDeleteResponseObject); ok {
		return validResponse.VisitItemDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ItemGet operation middleware
func (sh *strictHandler) ItemGet(ctx echo.Context, itemId ItemIdParam, params ItemGetParams) error {
	var request ItemGetRequestObject

	request.ItemId = itemId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemGet(ctx.Request().Context(), request.(ItemGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemGetResponseObject); ok {
		return validResponse.VisitItemGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ItemUpdate operation middleware
func (sh *strictHandler) ItemUpdate(ctx echo.Context, itemId ItemIdParam, params ItemUpdateParams) error {
	var request ItemUpdateRequestObject

	request.ItemId = itemId
	request.Params = params

	var body ItemUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemUpdate(ctx.Request().Context(), request.(ItemUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemUpdateResponseObject); ok {
		return validResponse.VisitItemUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ItemFilter operation middleware
func (sh *strictHandler) ItemFilter(ctx echo.Context, modelId ModelIdParam, params ItemFilterParams) error {
	var request ItemFilterRequestObject

	request.ModelId = modelId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemFilter(ctx.Request().Context(), request.(ItemFilterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemFilter")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemFilterResponseObject); ok {
		return validResponse.VisitItemFilterResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ItemCreate operation middleware
func (sh *strictHandler) ItemCreate(ctx echo.Context, modelId ModelIdParam) error {
	var request ItemCreateRequestObject

	request.ModelId = modelId

	var body ItemCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemCreate(ctx.Request().Context(), request.(ItemCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemCreateResponseObject); ok {
		return validResponse.VisitItemCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ItemPublish operation middleware
func (sh *strictHandler) ItemPublish(ctx echo.Context, modelId ModelIdParam, itemId ItemIdParam) error {
	var request ItemPublishRequestObject

	request.ModelId = modelId
	request.ItemId = itemId

	var body ItemPublishJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemPublish(ctx.Request().Context(), request.(ItemPublishRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemPublish")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemPublishResponseObject); ok {
		return validResponse.VisitItemPublishResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AssetFilter operation middleware
func (sh *strictHandler) AssetFilter(ctx echo.Context, projectId ProjectIdParam, params AssetFilterParams) error {
	var request AssetFilterRequestObject

	request.ProjectId = projectId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetFilter(ctx.Request().Context(), request.(AssetFilterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetFilter")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetFilterResponseObject); ok {
		return validResponse.VisitAssetFilterResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AssetCreate operation middleware
func (sh *strictHandler) AssetCreate(ctx echo.Context, projectId ProjectIdParam) error {
	var request AssetCreateRequestObject

	request.ProjectId = projectId

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetCreate(ctx.Request().Context(), request.(AssetCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetCreateResponseObject); ok {
		return validResponse.VisitAssetCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AssetDelete operation middleware
func (sh *strictHandler) AssetDelete(ctx echo.Context, projectId ProjectIdParam, assetId AssetIdParam) error {
	var request AssetDeleteRequestObject

	request.ProjectId = projectId
	request.AssetId = assetId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetDelete(ctx.Request().Context(), request.(AssetDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetDeleteResponseObject); ok {
		return validResponse.VisitAssetDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AssetGet operation middleware
func (sh *strictHandler) AssetGet(ctx echo.Context, projectId ProjectIdParam, assetId AssetIdParam) error {
	var request AssetGetRequestObject

	request.ProjectId = projectId
	request.AssetId = assetId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetGet(ctx.Request().Context(), request.(AssetGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetGetResponseObject); ok {
		return validResponse.VisitAssetGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AssetCommentList operation middleware
func (sh *strictHandler) AssetCommentList(ctx echo.Context, projectId ProjectIdParam, assetId AssetIdParam) error {
	var request AssetCommentListRequestObject

	request.ProjectId = projectId
	request.AssetId = assetId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetCommentList(ctx.Request().Context(), request.(AssetCommentListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetCommentList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetCommentListResponseObject); ok {
		return validResponse.VisitAssetCommentListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AssetCommentCreate operation middleware
func (sh *strictHandler) AssetCommentCreate(ctx echo.Context, projectId ProjectIdParam, assetId AssetIdParam) error {
	var request AssetCommentCreateRequestObject

	request.ProjectId = projectId
	request.AssetId = assetId

	var body AssetCommentCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetCommentCreate(ctx.Request().Context(), request.(AssetCommentCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetCommentCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetCommentCreateResponseObject); ok {
		return validResponse.VisitAssetCommentCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AssetCommentDelete operation middleware
func (sh *strictHandler) AssetCommentDelete(ctx echo.Context, projectId ProjectIdParam, assetId AssetIdParam, commentId CommentIdParam) error {
	var request AssetCommentDeleteRequestObject

	request.ProjectId = projectId
	request.AssetId = assetId
	request.CommentId = commentId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetCommentDelete(ctx.Request().Context(), request.(AssetCommentDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetCommentDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetCommentDeleteResponseObject); ok {
		return validResponse.VisitAssetCommentDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AssetCommentUpdate operation middleware
func (sh *strictHandler) AssetCommentUpdate(ctx echo.Context, projectId ProjectIdParam, assetId AssetIdParam, commentId CommentIdParam) error {
	var request AssetCommentUpdateRequestObject

	request.ProjectId = projectId
	request.AssetId = assetId
	request.CommentId = commentId

	var body AssetCommentUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetCommentUpdate(ctx.Request().Context(), request.(AssetCommentUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetCommentUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetCommentUpdateResponseObject); ok {
		return validResponse.VisitAssetCommentUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"yC8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
