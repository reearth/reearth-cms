// Package integration provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package integration

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	"github.com/reearth/reearth-cms/server/pkg/id"
	. "github.com/reearth/reearth-cms/server/pkg/integrationapi"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (DELETE /assets/{assetId})
	AssetDelete(ctx echo.Context, assetId AssetIdParam) error

	// (GET /assets/{assetId})
	AssetGet(ctx echo.Context, assetId AssetIdParam) error

	// (GET /assets/{assetId}/comments)
	AssetCommentList(ctx echo.Context, assetId AssetIdParam) error

	// (POST /assets/{assetId}/comments)
	AssetCommentCreate(ctx echo.Context, assetId AssetIdParam) error

	// (DELETE /assets/{assetId}/comments/{commentId})
	AssetCommentDelete(ctx echo.Context, assetId AssetIdParam, commentId CommentIdParam) error
	// Update AssetComment
	// (PATCH /assets/{assetId}/comments/{commentId})
	AssetCommentUpdate(ctx echo.Context, assetId AssetIdParam, commentId CommentIdParam) error
	// delete an item
	// (DELETE /items/{itemId})
	ItemDelete(ctx echo.Context, itemId ItemIdParam) error
	// Returns an items.
	// (GET /items/{itemId})
	ItemGet(ctx echo.Context, itemId ItemIdParam, params ItemGetParams) error
	// Update an item.
	// (PATCH /items/{itemId})
	ItemUpdate(ctx echo.Context, itemId ItemIdParam) error

	// (GET /items/{itemId}/comments)
	ItemCommentList(ctx echo.Context, itemId ItemIdParam) error

	// (POST /items/{itemId}/comments)
	ItemCommentCreate(ctx echo.Context, itemId ItemIdParam) error

	// (DELETE /items/{itemId}/comments/{commentId})
	ItemCommentDelete(ctx echo.Context, itemId ItemIdParam, commentId CommentIdParam) error
	// Update Item Comment
	// (PATCH /items/{itemId}/comments/{commentId})
	ItemCommentUpdate(ctx echo.Context, itemId ItemIdParam, commentId CommentIdParam) error
	// delete a model
	// (DELETE /models/{modelId})
	ModelDelete(ctx echo.Context, modelId ModelIdParam) error
	// Returns a model.
	// (GET /models/{modelId})
	ModelGet(ctx echo.Context, modelId ModelIdParam) error
	// Update a model.
	// (PATCH /models/{modelId})
	ModelUpdate(ctx echo.Context, modelId ModelIdParam) error
	// Returns a list of items.
	// (GET /models/{modelId}/items)
	ItemFilter(ctx echo.Context, modelId ModelIdParam, params ItemFilterParams) error
	// create an item
	// (POST /models/{modelId}/items)
	ItemCreate(ctx echo.Context, modelId ModelIdParam) error
	// Returns a CSV that has a list of items as features.
	// (GET /models/{modelId}/items.csv)
	ItemsAsCSV(ctx echo.Context, modelId ModelIdParam, params ItemsAsCSVParams) error
	// Returns a GeoJSON that has a list of items as features.
	// (GET /models/{modelId}/items.geojson)
	ItemsAsGeoJSON(ctx echo.Context, modelId ModelIdParam, params ItemsAsGeoJSONParams) error
	// Returns a models.
	// (GET /projects/{projectIdOrAlias}/models)
	ModelFilter(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, params ModelFilterParams) error
	// create a model
	// (POST /projects/{projectIdOrAlias}/models)
	ModelCreate(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, params ModelCreateParams) error
	// Delete a model.
	// (DELETE /projects/{projectIdOrAlias}/models/{modelIdOrKey})
	ModelDeleteWithProject(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error
	// Returns a model.
	// (GET /projects/{projectIdOrAlias}/models/{modelIdOrKey})
	ModelGetWithProject(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error
	// Update a model.
	// (PATCH /projects/{projectIdOrAlias}/models/{modelIdOrKey})
	ModelUpdateWithProject(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error
	// create a field
	// (POST /projects/{projectIdOrAlias}/models/{modelIdOrKey}/fields)
	FieldCreateWithProject(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error
	// Delete a field.
	// (DELETE /projects/{projectIdOrAlias}/models/{modelIdOrKey}/fields/{fieldIdOrKey})
	FieldDeleteWithProject(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, fieldIdOrKey FieldIdOrKeyParam) error
	// update a field
	// (PATCH /projects/{projectIdOrAlias}/models/{modelIdOrKey}/fields/{fieldIdOrKey})
	FieldUpdateWithProject(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, fieldIdOrKey FieldIdOrKeyParam) error
	// Returns a list of items.
	// (GET /projects/{projectIdOrAlias}/models/{modelIdOrKey}/items)
	ItemFilterWithProject(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, params ItemFilterWithProjectParams) error

	// (POST /projects/{projectIdOrAlias}/models/{modelIdOrKey}/items)
	ItemCreateWithProject(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error
	// Returns a CSV that has a list of items as features.
	// (GET /projects/{projectIdOrAlias}/models/{modelIdOrKey}/items.csv)
	ItemsWithProjectAsCSV(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, params ItemsWithProjectAsCSVParams) error
	// Returns a GeoJSON that has a list of items as features.
	// (GET /projects/{projectIdOrAlias}/models/{modelIdOrKey}/items.geojson)
	ItemsWithProjectAsGeoJSON(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, params ItemsWithProjectAsGeoJSONParams) error
	// Returns a list of assets.
	// (GET /projects/{projectId}/assets)
	AssetFilter(ctx echo.Context, projectId ProjectIdParam, params AssetFilterParams) error
	// Create an new asset.
	// (POST /projects/{projectId}/assets)
	AssetCreate(ctx echo.Context, projectId ProjectIdParam) error
	// Upload an asset.
	// (POST /projects/{projectId}/assets/uploads)
	AssetUploadCreate(ctx echo.Context, projectId ProjectIdParam) error
	// create a field
	// (POST /schemata/{schemaId}/fields)
	FieldCreate(ctx echo.Context, schemaId SchemaIdParam) error
	// delete a field
	// (DELETE /schemata/{schemaId}/fields/{fieldIdOrKey})
	FieldDelete(ctx echo.Context, schemaId SchemaIdParam, fieldIdOrKey FieldIdOrKeyParam) error
	// update a field
	// (PATCH /schemata/{schemaId}/fields/{fieldIdOrKey})
	FieldUpdate(ctx echo.Context, schemaId SchemaIdParam, fieldIdOrKey FieldIdOrKeyParam) error
	// Returns a list of projects.
	// (GET /{workspaceId}/projects)
	ProjectFilter(ctx echo.Context, workspaceId WorkspaceIdParam, params ProjectFilterParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AssetDelete converts echo context to params.
func (w *ServerInterfaceWrapper) AssetDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "assetId" -------------
	var assetId AssetIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "assetId", ctx.Param("assetId"), &assetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetDelete(ctx, assetId)
	return err
}

// AssetGet converts echo context to params.
func (w *ServerInterfaceWrapper) AssetGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "assetId" -------------
	var assetId AssetIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "assetId", ctx.Param("assetId"), &assetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetGet(ctx, assetId)
	return err
}

// AssetCommentList converts echo context to params.
func (w *ServerInterfaceWrapper) AssetCommentList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "assetId" -------------
	var assetId AssetIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "assetId", ctx.Param("assetId"), &assetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetCommentList(ctx, assetId)
	return err
}

// AssetCommentCreate converts echo context to params.
func (w *ServerInterfaceWrapper) AssetCommentCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "assetId" -------------
	var assetId AssetIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "assetId", ctx.Param("assetId"), &assetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetCommentCreate(ctx, assetId)
	return err
}

// AssetCommentDelete converts echo context to params.
func (w *ServerInterfaceWrapper) AssetCommentDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "assetId" -------------
	var assetId AssetIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "assetId", ctx.Param("assetId"), &assetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetId: %s", err))
	}

	// ------------- Path parameter "commentId" -------------
	var commentId CommentIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "commentId", ctx.Param("commentId"), &commentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commentId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetCommentDelete(ctx, assetId, commentId)
	return err
}

// AssetCommentUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) AssetCommentUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "assetId" -------------
	var assetId AssetIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "assetId", ctx.Param("assetId"), &assetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetId: %s", err))
	}

	// ------------- Path parameter "commentId" -------------
	var commentId CommentIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "commentId", ctx.Param("commentId"), &commentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commentId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetCommentUpdate(ctx, assetId, commentId)
	return err
}

// ItemDelete converts echo context to params.
func (w *ServerInterfaceWrapper) ItemDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId ItemIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", ctx.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemDelete(ctx, itemId)
	return err
}

// ItemGet converts echo context to params.
func (w *ServerInterfaceWrapper) ItemGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId ItemIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", ctx.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ItemGetParams
	// ------------- Optional query parameter "ref" -------------

	err = runtime.BindQueryParameter("form", true, false, "ref", ctx.QueryParams(), &params.Ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	// ------------- Optional query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, false, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemGet(ctx, itemId, params)
	return err
}

// ItemUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ItemUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId ItemIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", ctx.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemUpdate(ctx, itemId)
	return err
}

// ItemCommentList converts echo context to params.
func (w *ServerInterfaceWrapper) ItemCommentList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId ItemIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", ctx.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemCommentList(ctx, itemId)
	return err
}

// ItemCommentCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ItemCommentCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId ItemIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", ctx.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemCommentCreate(ctx, itemId)
	return err
}

// ItemCommentDelete converts echo context to params.
func (w *ServerInterfaceWrapper) ItemCommentDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId ItemIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", ctx.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	// ------------- Path parameter "commentId" -------------
	var commentId CommentIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "commentId", ctx.Param("commentId"), &commentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commentId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemCommentDelete(ctx, itemId, commentId)
	return err
}

// ItemCommentUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ItemCommentUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId ItemIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", ctx.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	// ------------- Path parameter "commentId" -------------
	var commentId CommentIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "commentId", ctx.Param("commentId"), &commentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commentId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemCommentUpdate(ctx, itemId, commentId)
	return err
}

// ModelDelete converts echo context to params.
func (w *ServerInterfaceWrapper) ModelDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "modelId" -------------
	var modelId ModelIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelId", ctx.Param("modelId"), &modelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ModelDelete(ctx, modelId)
	return err
}

// ModelGet converts echo context to params.
func (w *ServerInterfaceWrapper) ModelGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "modelId" -------------
	var modelId ModelIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelId", ctx.Param("modelId"), &modelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ModelGet(ctx, modelId)
	return err
}

// ModelUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ModelUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "modelId" -------------
	var modelId ModelIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelId", ctx.Param("modelId"), &modelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ModelUpdate(ctx, modelId)
	return err
}

// ItemFilter converts echo context to params.
func (w *ServerInterfaceWrapper) ItemFilter(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "modelId" -------------
	var modelId ModelIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelId", ctx.Param("modelId"), &modelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ItemFilterParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "dir" -------------

	err = runtime.BindQueryParameter("form", true, false, "dir", ctx.QueryParams(), &params.Dir)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dir: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// ------------- Optional query parameter "ref" -------------

	err = runtime.BindQueryParameter("form", true, false, "ref", ctx.QueryParams(), &params.Ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	// ------------- Optional query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, false, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// ------------- Optional query parameter "keyword" -------------

	err = runtime.BindQueryParameter("form", true, false, "keyword", ctx.QueryParams(), &params.Keyword)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keyword: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemFilter(ctx, modelId, params)
	return err
}

// ItemCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ItemCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "modelId" -------------
	var modelId ModelIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelId", ctx.Param("modelId"), &modelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemCreate(ctx, modelId)
	return err
}

// ItemsAsCSV converts echo context to params.
func (w *ServerInterfaceWrapper) ItemsAsCSV(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "modelId" -------------
	var modelId ModelIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelId", ctx.Param("modelId"), &modelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ItemsAsCSVParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// ------------- Optional query parameter "ref" -------------

	err = runtime.BindQueryParameter("form", true, false, "ref", ctx.QueryParams(), &params.Ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemsAsCSV(ctx, modelId, params)
	return err
}

// ItemsAsGeoJSON converts echo context to params.
func (w *ServerInterfaceWrapper) ItemsAsGeoJSON(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "modelId" -------------
	var modelId ModelIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelId", ctx.Param("modelId"), &modelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ItemsAsGeoJSONParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// ------------- Optional query parameter "ref" -------------

	err = runtime.BindQueryParameter("form", true, false, "ref", ctx.QueryParams(), &params.Ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemsAsGeoJSON(ctx, modelId, params)
	return err
}

// ModelFilter converts echo context to params.
func (w *ServerInterfaceWrapper) ModelFilter(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ModelFilterParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ModelFilter(ctx, projectIdOrAlias, params)
	return err
}

// ModelCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ModelCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ModelCreateParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ModelCreate(ctx, projectIdOrAlias, params)
	return err
}

// ModelDeleteWithProject converts echo context to params.
func (w *ServerInterfaceWrapper) ModelDeleteWithProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ModelDeleteWithProject(ctx, projectIdOrAlias, modelIdOrKey)
	return err
}

// ModelGetWithProject converts echo context to params.
func (w *ServerInterfaceWrapper) ModelGetWithProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ModelGetWithProject(ctx, projectIdOrAlias, modelIdOrKey)
	return err
}

// ModelUpdateWithProject converts echo context to params.
func (w *ServerInterfaceWrapper) ModelUpdateWithProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ModelUpdateWithProject(ctx, projectIdOrAlias, modelIdOrKey)
	return err
}

// FieldCreateWithProject converts echo context to params.
func (w *ServerInterfaceWrapper) FieldCreateWithProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FieldCreateWithProject(ctx, projectIdOrAlias, modelIdOrKey)
	return err
}

// FieldDeleteWithProject converts echo context to params.
func (w *ServerInterfaceWrapper) FieldDeleteWithProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	// ------------- Path parameter "fieldIdOrKey" -------------
	var fieldIdOrKey FieldIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "fieldIdOrKey", ctx.Param("fieldIdOrKey"), &fieldIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fieldIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FieldDeleteWithProject(ctx, projectIdOrAlias, modelIdOrKey, fieldIdOrKey)
	return err
}

// FieldUpdateWithProject converts echo context to params.
func (w *ServerInterfaceWrapper) FieldUpdateWithProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	// ------------- Path parameter "fieldIdOrKey" -------------
	var fieldIdOrKey FieldIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "fieldIdOrKey", ctx.Param("fieldIdOrKey"), &fieldIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fieldIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FieldUpdateWithProject(ctx, projectIdOrAlias, modelIdOrKey, fieldIdOrKey)
	return err
}

// ItemFilterWithProject converts echo context to params.
func (w *ServerInterfaceWrapper) ItemFilterWithProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ItemFilterWithProjectParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "dir" -------------

	err = runtime.BindQueryParameter("form", true, false, "dir", ctx.QueryParams(), &params.Dir)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dir: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// ------------- Optional query parameter "ref" -------------

	err = runtime.BindQueryParameter("form", true, false, "ref", ctx.QueryParams(), &params.Ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	// ------------- Optional query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, false, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemFilterWithProject(ctx, projectIdOrAlias, modelIdOrKey, params)
	return err
}

// ItemCreateWithProject converts echo context to params.
func (w *ServerInterfaceWrapper) ItemCreateWithProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemCreateWithProject(ctx, projectIdOrAlias, modelIdOrKey)
	return err
}

// ItemsWithProjectAsCSV converts echo context to params.
func (w *ServerInterfaceWrapper) ItemsWithProjectAsCSV(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ItemsWithProjectAsCSVParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// ------------- Optional query parameter "ref" -------------

	err = runtime.BindQueryParameter("form", true, false, "ref", ctx.QueryParams(), &params.Ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemsWithProjectAsCSV(ctx, projectIdOrAlias, modelIdOrKey, params)
	return err
}

// ItemsWithProjectAsGeoJSON converts echo context to params.
func (w *ServerInterfaceWrapper) ItemsWithProjectAsGeoJSON(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ItemsWithProjectAsGeoJSONParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// ------------- Optional query parameter "ref" -------------

	err = runtime.BindQueryParameter("form", true, false, "ref", ctx.QueryParams(), &params.Ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemsWithProjectAsGeoJSON(ctx, projectIdOrAlias, modelIdOrKey, params)
	return err
}

// AssetFilter converts echo context to params.
func (w *ServerInterfaceWrapper) AssetFilter(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId ProjectIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", ctx.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssetFilterParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "dir" -------------

	err = runtime.BindQueryParameter("form", true, false, "dir", ctx.QueryParams(), &params.Dir)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dir: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// ------------- Optional query parameter "keyword" -------------

	err = runtime.BindQueryParameter("form", true, false, "keyword", ctx.QueryParams(), &params.Keyword)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keyword: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetFilter(ctx, projectId, params)
	return err
}

// AssetCreate converts echo context to params.
func (w *ServerInterfaceWrapper) AssetCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId ProjectIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", ctx.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetCreate(ctx, projectId)
	return err
}

// AssetUploadCreate converts echo context to params.
func (w *ServerInterfaceWrapper) AssetUploadCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId ProjectIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", ctx.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetUploadCreate(ctx, projectId)
	return err
}

// FieldCreate converts echo context to params.
func (w *ServerInterfaceWrapper) FieldCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "schemaId" -------------
	var schemaId SchemaIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "schemaId", ctx.Param("schemaId"), &schemaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter schemaId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FieldCreate(ctx, schemaId)
	return err
}

// FieldDelete converts echo context to params.
func (w *ServerInterfaceWrapper) FieldDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "schemaId" -------------
	var schemaId SchemaIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "schemaId", ctx.Param("schemaId"), &schemaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter schemaId: %s", err))
	}

	// ------------- Path parameter "fieldIdOrKey" -------------
	var fieldIdOrKey FieldIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "fieldIdOrKey", ctx.Param("fieldIdOrKey"), &fieldIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fieldIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FieldDelete(ctx, schemaId, fieldIdOrKey)
	return err
}

// FieldUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) FieldUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "schemaId" -------------
	var schemaId SchemaIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "schemaId", ctx.Param("schemaId"), &schemaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter schemaId: %s", err))
	}

	// ------------- Path parameter "fieldIdOrKey" -------------
	var fieldIdOrKey FieldIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "fieldIdOrKey", ctx.Param("fieldIdOrKey"), &fieldIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fieldIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FieldUpdate(ctx, schemaId, fieldIdOrKey)
	return err
}

// ProjectFilter converts echo context to params.
func (w *ServerInterfaceWrapper) ProjectFilter(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceId" -------------
	var workspaceId WorkspaceIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", ctx.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProjectFilterParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProjectFilter(ctx, workspaceId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/assets/:assetId", wrapper.AssetDelete)
	router.GET(baseURL+"/assets/:assetId", wrapper.AssetGet)
	router.GET(baseURL+"/assets/:assetId/comments", wrapper.AssetCommentList)
	router.POST(baseURL+"/assets/:assetId/comments", wrapper.AssetCommentCreate)
	router.DELETE(baseURL+"/assets/:assetId/comments/:commentId", wrapper.AssetCommentDelete)
	router.PATCH(baseURL+"/assets/:assetId/comments/:commentId", wrapper.AssetCommentUpdate)
	router.DELETE(baseURL+"/items/:itemId", wrapper.ItemDelete)
	router.GET(baseURL+"/items/:itemId", wrapper.ItemGet)
	router.PATCH(baseURL+"/items/:itemId", wrapper.ItemUpdate)
	router.GET(baseURL+"/items/:itemId/comments", wrapper.ItemCommentList)
	router.POST(baseURL+"/items/:itemId/comments", wrapper.ItemCommentCreate)
	router.DELETE(baseURL+"/items/:itemId/comments/:commentId", wrapper.ItemCommentDelete)
	router.PATCH(baseURL+"/items/:itemId/comments/:commentId", wrapper.ItemCommentUpdate)
	router.DELETE(baseURL+"/models/:modelId", wrapper.ModelDelete)
	router.GET(baseURL+"/models/:modelId", wrapper.ModelGet)
	router.PATCH(baseURL+"/models/:modelId", wrapper.ModelUpdate)
	router.GET(baseURL+"/models/:modelId/items", wrapper.ItemFilter)
	router.POST(baseURL+"/models/:modelId/items", wrapper.ItemCreate)
	router.GET(baseURL+"/models/:modelId/items.csv", wrapper.ItemsAsCSV)
	router.GET(baseURL+"/models/:modelId/items.geojson", wrapper.ItemsAsGeoJSON)
	router.GET(baseURL+"/projects/:projectIdOrAlias/models", wrapper.ModelFilter)
	router.POST(baseURL+"/projects/:projectIdOrAlias/models", wrapper.ModelCreate)
	router.DELETE(baseURL+"/projects/:projectIdOrAlias/models/:modelIdOrKey", wrapper.ModelDeleteWithProject)
	router.GET(baseURL+"/projects/:projectIdOrAlias/models/:modelIdOrKey", wrapper.ModelGetWithProject)
	router.PATCH(baseURL+"/projects/:projectIdOrAlias/models/:modelIdOrKey", wrapper.ModelUpdateWithProject)
	router.POST(baseURL+"/projects/:projectIdOrAlias/models/:modelIdOrKey/fields", wrapper.FieldCreateWithProject)
	router.DELETE(baseURL+"/projects/:projectIdOrAlias/models/:modelIdOrKey/fields/:fieldIdOrKey", wrapper.FieldDeleteWithProject)
	router.PATCH(baseURL+"/projects/:projectIdOrAlias/models/:modelIdOrKey/fields/:fieldIdOrKey", wrapper.FieldUpdateWithProject)
	router.GET(baseURL+"/projects/:projectIdOrAlias/models/:modelIdOrKey/items", wrapper.ItemFilterWithProject)
	router.POST(baseURL+"/projects/:projectIdOrAlias/models/:modelIdOrKey/items", wrapper.ItemCreateWithProject)
	router.GET(baseURL+"/projects/:projectIdOrAlias/models/:modelIdOrKey/items.csv", wrapper.ItemsWithProjectAsCSV)
	router.GET(baseURL+"/projects/:projectIdOrAlias/models/:modelIdOrKey/items.geojson", wrapper.ItemsWithProjectAsGeoJSON)
	router.GET(baseURL+"/projects/:projectId/assets", wrapper.AssetFilter)
	router.POST(baseURL+"/projects/:projectId/assets", wrapper.AssetCreate)
	router.POST(baseURL+"/projects/:projectId/assets/uploads", wrapper.AssetUploadCreate)
	router.POST(baseURL+"/schemata/:schemaId/fields", wrapper.FieldCreate)
	router.DELETE(baseURL+"/schemata/:schemaId/fields/:fieldIdOrKey", wrapper.FieldDelete)
	router.PATCH(baseURL+"/schemata/:schemaId/fields/:fieldIdOrKey", wrapper.FieldUpdate)
	router.GET(baseURL+"/:workspaceId/projects", wrapper.ProjectFilter)

}

type NotFoundErrorResponse struct {
}

type UnauthorizedErrorResponse struct {
}

type AssetDeleteRequestObject struct {
	AssetId AssetIdParam `json:"assetId"`
}

type AssetDeleteResponseObject interface {
	VisitAssetDeleteResponse(w http.ResponseWriter) error
}

type AssetDelete200JSONResponse struct {
	Id *id.AssetID `json:"id,omitempty"`
}

func (response AssetDelete200JSONResponse) VisitAssetDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetDelete400Response struct {
}

func (response AssetDelete400Response) VisitAssetDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetDelete401Response = UnauthorizedErrorResponse

func (response AssetDelete401Response) VisitAssetDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetDelete404Response struct {
}

func (response AssetDelete404Response) VisitAssetDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetGetRequestObject struct {
	AssetId AssetIdParam `json:"assetId"`
}

type AssetGetResponseObject interface {
	VisitAssetGetResponse(w http.ResponseWriter) error
}

type AssetGet200JSONResponse Asset

func (response AssetGet200JSONResponse) VisitAssetGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetGet400Response struct {
}

func (response AssetGet400Response) VisitAssetGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetGet401Response = UnauthorizedErrorResponse

func (response AssetGet401Response) VisitAssetGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetGet404Response struct {
}

func (response AssetGet404Response) VisitAssetGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetCommentListRequestObject struct {
	AssetId AssetIdParam `json:"assetId"`
}

type AssetCommentListResponseObject interface {
	VisitAssetCommentListResponse(w http.ResponseWriter) error
}

type AssetCommentList200JSONResponse struct {
	Comments *[]Comment `json:"comments,omitempty"`
}

func (response AssetCommentList200JSONResponse) VisitAssetCommentListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetCommentList400Response struct {
}

func (response AssetCommentList400Response) VisitAssetCommentListResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetCommentList401Response = UnauthorizedErrorResponse

func (response AssetCommentList401Response) VisitAssetCommentListResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetCommentList404Response struct {
}

func (response AssetCommentList404Response) VisitAssetCommentListResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetCommentCreateRequestObject struct {
	AssetId AssetIdParam `json:"assetId"`
	Body    *AssetCommentCreateJSONRequestBody
}

type AssetCommentCreateResponseObject interface {
	VisitAssetCommentCreateResponse(w http.ResponseWriter) error
}

type AssetCommentCreate200JSONResponse Comment

func (response AssetCommentCreate200JSONResponse) VisitAssetCommentCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetCommentCreate400Response struct {
}

func (response AssetCommentCreate400Response) VisitAssetCommentCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetCommentCreate401Response = UnauthorizedErrorResponse

func (response AssetCommentCreate401Response) VisitAssetCommentCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetCommentCreate404Response struct {
}

func (response AssetCommentCreate404Response) VisitAssetCommentCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetCommentDeleteRequestObject struct {
	AssetId   AssetIdParam   `json:"assetId"`
	CommentId CommentIdParam `json:"commentId"`
}

type AssetCommentDeleteResponseObject interface {
	VisitAssetCommentDeleteResponse(w http.ResponseWriter) error
}

type AssetCommentDelete200JSONResponse struct {
	Id *id.CommentID `json:"id,omitempty"`
}

func (response AssetCommentDelete200JSONResponse) VisitAssetCommentDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetCommentDelete400Response struct {
}

func (response AssetCommentDelete400Response) VisitAssetCommentDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetCommentDelete401Response = UnauthorizedErrorResponse

func (response AssetCommentDelete401Response) VisitAssetCommentDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetCommentDelete404Response struct {
}

func (response AssetCommentDelete404Response) VisitAssetCommentDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetCommentUpdateRequestObject struct {
	AssetId   AssetIdParam   `json:"assetId"`
	CommentId CommentIdParam `json:"commentId"`
	Body      *AssetCommentUpdateJSONRequestBody
}

type AssetCommentUpdateResponseObject interface {
	VisitAssetCommentUpdateResponse(w http.ResponseWriter) error
}

type AssetCommentUpdate200JSONResponse Comment

func (response AssetCommentUpdate200JSONResponse) VisitAssetCommentUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetCommentUpdate400Response struct {
}

func (response AssetCommentUpdate400Response) VisitAssetCommentUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetCommentUpdate401Response = UnauthorizedErrorResponse

func (response AssetCommentUpdate401Response) VisitAssetCommentUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetCommentUpdate404Response struct {
}

func (response AssetCommentUpdate404Response) VisitAssetCommentUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemDeleteRequestObject struct {
	ItemId ItemIdParam `json:"itemId"`
}

type ItemDeleteResponseObject interface {
	VisitItemDeleteResponse(w http.ResponseWriter) error
}

type ItemDelete200JSONResponse struct {
	Id *id.ItemID `json:"id,omitempty"`
}

func (response ItemDelete200JSONResponse) VisitItemDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemDelete400Response struct {
}

func (response ItemDelete400Response) VisitItemDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemDelete401Response = UnauthorizedErrorResponse

func (response ItemDelete401Response) VisitItemDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemDelete404Response struct {
}

func (response ItemDelete404Response) VisitItemDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemGetRequestObject struct {
	ItemId ItemIdParam `json:"itemId"`
	Params ItemGetParams
}

type ItemGetResponseObject interface {
	VisitItemGetResponse(w http.ResponseWriter) error
}

type ItemGet200JSONResponse VersionedItem

func (response ItemGet200JSONResponse) VisitItemGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemGet400Response struct {
}

func (response ItemGet400Response) VisitItemGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemGet401Response = UnauthorizedErrorResponse

func (response ItemGet401Response) VisitItemGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemGet404Response struct {
}

func (response ItemGet404Response) VisitItemGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemGet500Response struct {
}

func (response ItemGet500Response) VisitItemGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ItemUpdateRequestObject struct {
	ItemId ItemIdParam `json:"itemId"`
	Body   *ItemUpdateJSONRequestBody
}

type ItemUpdateResponseObject interface {
	VisitItemUpdateResponse(w http.ResponseWriter) error
}

type ItemUpdate200JSONResponse VersionedItem

func (response ItemUpdate200JSONResponse) VisitItemUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemUpdate400Response struct {
}

func (response ItemUpdate400Response) VisitItemUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemUpdate401Response = UnauthorizedErrorResponse

func (response ItemUpdate401Response) VisitItemUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemUpdate404Response struct {
}

func (response ItemUpdate404Response) VisitItemUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemUpdate500Response struct {
}

func (response ItemUpdate500Response) VisitItemUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ItemCommentListRequestObject struct {
	ItemId ItemIdParam `json:"itemId"`
}

type ItemCommentListResponseObject interface {
	VisitItemCommentListResponse(w http.ResponseWriter) error
}

type ItemCommentList200JSONResponse struct {
	Comments *[]Comment `json:"comments,omitempty"`
}

func (response ItemCommentList200JSONResponse) VisitItemCommentListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemCommentList400Response struct {
}

func (response ItemCommentList400Response) VisitItemCommentListResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemCommentList401Response = UnauthorizedErrorResponse

func (response ItemCommentList401Response) VisitItemCommentListResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemCommentList404Response struct {
}

func (response ItemCommentList404Response) VisitItemCommentListResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemCommentCreateRequestObject struct {
	ItemId ItemIdParam `json:"itemId"`
	Body   *ItemCommentCreateJSONRequestBody
}

type ItemCommentCreateResponseObject interface {
	VisitItemCommentCreateResponse(w http.ResponseWriter) error
}

type ItemCommentCreate200JSONResponse Comment

func (response ItemCommentCreate200JSONResponse) VisitItemCommentCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemCommentCreate400Response struct {
}

func (response ItemCommentCreate400Response) VisitItemCommentCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemCommentCreate401Response = UnauthorizedErrorResponse

func (response ItemCommentCreate401Response) VisitItemCommentCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemCommentCreate404Response struct {
}

func (response ItemCommentCreate404Response) VisitItemCommentCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemCommentDeleteRequestObject struct {
	ItemId    ItemIdParam    `json:"itemId"`
	CommentId CommentIdParam `json:"commentId"`
}

type ItemCommentDeleteResponseObject interface {
	VisitItemCommentDeleteResponse(w http.ResponseWriter) error
}

type ItemCommentDelete200JSONResponse struct {
	Id *id.CommentID `json:"id,omitempty"`
}

func (response ItemCommentDelete200JSONResponse) VisitItemCommentDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemCommentDelete400Response struct {
}

func (response ItemCommentDelete400Response) VisitItemCommentDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemCommentDelete401Response = UnauthorizedErrorResponse

func (response ItemCommentDelete401Response) VisitItemCommentDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemCommentDelete404Response struct {
}

func (response ItemCommentDelete404Response) VisitItemCommentDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemCommentUpdateRequestObject struct {
	ItemId    ItemIdParam    `json:"itemId"`
	CommentId CommentIdParam `json:"commentId"`
	Body      *ItemCommentUpdateJSONRequestBody
}

type ItemCommentUpdateResponseObject interface {
	VisitItemCommentUpdateResponse(w http.ResponseWriter) error
}

type ItemCommentUpdate200JSONResponse Comment

func (response ItemCommentUpdate200JSONResponse) VisitItemCommentUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemCommentUpdate400Response struct {
}

func (response ItemCommentUpdate400Response) VisitItemCommentUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemCommentUpdate401Response = UnauthorizedErrorResponse

func (response ItemCommentUpdate401Response) VisitItemCommentUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemCommentUpdate404Response struct {
}

func (response ItemCommentUpdate404Response) VisitItemCommentUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ModelDeleteRequestObject struct {
	ModelId ModelIdParam `json:"modelId"`
}

type ModelDeleteResponseObject interface {
	VisitModelDeleteResponse(w http.ResponseWriter) error
}

type ModelDelete200JSONResponse struct {
	Id *id.ModelID `json:"id,omitempty"`
}

func (response ModelDelete200JSONResponse) VisitModelDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModelDelete400Response struct {
}

func (response ModelDelete400Response) VisitModelDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ModelDelete401Response = UnauthorizedErrorResponse

func (response ModelDelete401Response) VisitModelDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ModelGetRequestObject struct {
	ModelId ModelIdParam `json:"modelId"`
}

type ModelGetResponseObject interface {
	VisitModelGetResponse(w http.ResponseWriter) error
}

type ModelGet200JSONResponse Model

func (response ModelGet200JSONResponse) VisitModelGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModelGet400Response struct {
}

func (response ModelGet400Response) VisitModelGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ModelGet401Response = UnauthorizedErrorResponse

func (response ModelGet401Response) VisitModelGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ModelGet404Response struct {
}

func (response ModelGet404Response) VisitModelGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ModelGet500Response struct {
}

func (response ModelGet500Response) VisitModelGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ModelUpdateRequestObject struct {
	ModelId ModelIdParam `json:"modelId"`
	Body    *ModelUpdateJSONRequestBody
}

type ModelUpdateResponseObject interface {
	VisitModelUpdateResponse(w http.ResponseWriter) error
}

type ModelUpdate200JSONResponse Model

func (response ModelUpdate200JSONResponse) VisitModelUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModelUpdate400Response struct {
}

func (response ModelUpdate400Response) VisitModelUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ModelUpdate401Response = UnauthorizedErrorResponse

func (response ModelUpdate401Response) VisitModelUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemFilterRequestObject struct {
	ModelId ModelIdParam `json:"modelId"`
	Params  ItemFilterParams
	Body    *ItemFilterJSONRequestBody
}

type ItemFilterResponseObject interface {
	VisitItemFilterResponse(w http.ResponseWriter) error
}

type ItemFilter200JSONResponse struct {
	Items      *[]VersionedItem `json:"items,omitempty"`
	Page       *int             `json:"page,omitempty"`
	PerPage    *int             `json:"perPage,omitempty"`
	TotalCount *int             `json:"totalCount,omitempty"`
}

func (response ItemFilter200JSONResponse) VisitItemFilterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemFilter400Response struct {
}

func (response ItemFilter400Response) VisitItemFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemFilter401Response = UnauthorizedErrorResponse

func (response ItemFilter401Response) VisitItemFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemFilter404Response struct {
}

func (response ItemFilter404Response) VisitItemFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemFilter500Response struct {
}

func (response ItemFilter500Response) VisitItemFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ItemCreateRequestObject struct {
	ModelId ModelIdParam `json:"modelId"`
	Body    *ItemCreateJSONRequestBody
}

type ItemCreateResponseObject interface {
	VisitItemCreateResponse(w http.ResponseWriter) error
}

type ItemCreate200JSONResponse VersionedItem

func (response ItemCreate200JSONResponse) VisitItemCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemCreate400Response struct {
}

func (response ItemCreate400Response) VisitItemCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemCreate401Response = UnauthorizedErrorResponse

func (response ItemCreate401Response) VisitItemCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemsAsCSVRequestObject struct {
	ModelId ModelIdParam `json:"modelId"`
	Params  ItemsAsCSVParams
}

type ItemsAsCSVResponseObject interface {
	VisitItemsAsCSVResponse(w http.ResponseWriter) error
}

type ItemsAsCSV200TextcsvResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response ItemsAsCSV200TextcsvResponse) VisitItemsAsCSVResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/csv")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type ItemsAsCSV400Response struct {
}

func (response ItemsAsCSV400Response) VisitItemsAsCSVResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemsAsCSV401Response = UnauthorizedErrorResponse

func (response ItemsAsCSV401Response) VisitItemsAsCSVResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemsAsCSV404Response struct {
}

func (response ItemsAsCSV404Response) VisitItemsAsCSVResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemsAsCSV500Response struct {
}

func (response ItemsAsCSV500Response) VisitItemsAsCSVResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ItemsAsGeoJSONRequestObject struct {
	ModelId ModelIdParam `json:"modelId"`
	Params  ItemsAsGeoJSONParams
}

type ItemsAsGeoJSONResponseObject interface {
	VisitItemsAsGeoJSONResponse(w http.ResponseWriter) error
}

type ItemsAsGeoJSON200JSONResponse GeoJSON

func (response ItemsAsGeoJSON200JSONResponse) VisitItemsAsGeoJSONResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemsAsGeoJSON400Response struct {
}

func (response ItemsAsGeoJSON400Response) VisitItemsAsGeoJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemsAsGeoJSON401Response = UnauthorizedErrorResponse

func (response ItemsAsGeoJSON401Response) VisitItemsAsGeoJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemsAsGeoJSON404Response struct {
}

func (response ItemsAsGeoJSON404Response) VisitItemsAsGeoJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemsAsGeoJSON500Response struct {
}

func (response ItemsAsGeoJSON500Response) VisitItemsAsGeoJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ModelFilterRequestObject struct {
	ProjectIdOrAlias ProjectIdOrAliasParam `json:"projectIdOrAlias"`
	Params           ModelFilterParams
}

type ModelFilterResponseObject interface {
	VisitModelFilterResponse(w http.ResponseWriter) error
}

type ModelFilter200JSONResponse struct {
	Models     *[]Model `json:"models,omitempty"`
	Page       *int     `json:"page,omitempty"`
	PerPage    *int     `json:"perPage,omitempty"`
	TotalCount *int     `json:"totalCount,omitempty"`
}

func (response ModelFilter200JSONResponse) VisitModelFilterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModelFilter400Response struct {
}

func (response ModelFilter400Response) VisitModelFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ModelFilter401Response = UnauthorizedErrorResponse

func (response ModelFilter401Response) VisitModelFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ModelFilter404Response struct {
}

func (response ModelFilter404Response) VisitModelFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ModelFilter500Response struct {
}

func (response ModelFilter500Response) VisitModelFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ModelCreateRequestObject struct {
	ProjectIdOrAlias ProjectIdOrAliasParam `json:"projectIdOrAlias"`
	Params           ModelCreateParams
	Body             *ModelCreateJSONRequestBody
}

type ModelCreateResponseObject interface {
	VisitModelCreateResponse(w http.ResponseWriter) error
}

type ModelCreate200JSONResponse Model

func (response ModelCreate200JSONResponse) VisitModelCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModelCreate400Response struct {
}

func (response ModelCreate400Response) VisitModelCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ModelCreate401Response = UnauthorizedErrorResponse

func (response ModelCreate401Response) VisitModelCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ModelDeleteWithProjectRequestObject struct {
	ProjectIdOrAlias ProjectIdOrAliasParam `json:"projectIdOrAlias"`
	ModelIdOrKey     ModelIdOrKeyParam     `json:"modelIdOrKey"`
}

type ModelDeleteWithProjectResponseObject interface {
	VisitModelDeleteWithProjectResponse(w http.ResponseWriter) error
}

type ModelDeleteWithProject200JSONResponse struct {
	Id *id.ModelID `json:"id,omitempty"`
}

func (response ModelDeleteWithProject200JSONResponse) VisitModelDeleteWithProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModelDeleteWithProject400Response struct {
}

func (response ModelDeleteWithProject400Response) VisitModelDeleteWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ModelDeleteWithProject401Response = UnauthorizedErrorResponse

func (response ModelDeleteWithProject401Response) VisitModelDeleteWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ModelDeleteWithProject404Response struct {
}

func (response ModelDeleteWithProject404Response) VisitModelDeleteWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ModelDeleteWithProject500Response struct {
}

func (response ModelDeleteWithProject500Response) VisitModelDeleteWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ModelGetWithProjectRequestObject struct {
	ProjectIdOrAlias ProjectIdOrAliasParam `json:"projectIdOrAlias"`
	ModelIdOrKey     ModelIdOrKeyParam     `json:"modelIdOrKey"`
}

type ModelGetWithProjectResponseObject interface {
	VisitModelGetWithProjectResponse(w http.ResponseWriter) error
}

type ModelGetWithProject200JSONResponse Model

func (response ModelGetWithProject200JSONResponse) VisitModelGetWithProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModelGetWithProject400Response struct {
}

func (response ModelGetWithProject400Response) VisitModelGetWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ModelGetWithProject401Response = UnauthorizedErrorResponse

func (response ModelGetWithProject401Response) VisitModelGetWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ModelGetWithProject404Response struct {
}

func (response ModelGetWithProject404Response) VisitModelGetWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ModelGetWithProject500Response struct {
}

func (response ModelGetWithProject500Response) VisitModelGetWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ModelUpdateWithProjectRequestObject struct {
	ProjectIdOrAlias ProjectIdOrAliasParam `json:"projectIdOrAlias"`
	ModelIdOrKey     ModelIdOrKeyParam     `json:"modelIdOrKey"`
	Body             *ModelUpdateWithProjectJSONRequestBody
}

type ModelUpdateWithProjectResponseObject interface {
	VisitModelUpdateWithProjectResponse(w http.ResponseWriter) error
}

type ModelUpdateWithProject200JSONResponse Model

func (response ModelUpdateWithProject200JSONResponse) VisitModelUpdateWithProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModelUpdateWithProject400Response struct {
}

func (response ModelUpdateWithProject400Response) VisitModelUpdateWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ModelUpdateWithProject401Response = UnauthorizedErrorResponse

func (response ModelUpdateWithProject401Response) VisitModelUpdateWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ModelUpdateWithProject404Response struct {
}

func (response ModelUpdateWithProject404Response) VisitModelUpdateWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ModelUpdateWithProject500Response struct {
}

func (response ModelUpdateWithProject500Response) VisitModelUpdateWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type FieldCreateWithProjectRequestObject struct {
	ProjectIdOrAlias ProjectIdOrAliasParam `json:"projectIdOrAlias"`
	ModelIdOrKey     ModelIdOrKeyParam     `json:"modelIdOrKey"`
	Body             *FieldCreateWithProjectJSONRequestBody
}

type FieldCreateWithProjectResponseObject interface {
	VisitFieldCreateWithProjectResponse(w http.ResponseWriter) error
}

type FieldCreateWithProject200JSONResponse SchemaField

func (response FieldCreateWithProject200JSONResponse) VisitFieldCreateWithProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FieldCreateWithProject400Response struct {
}

func (response FieldCreateWithProject400Response) VisitFieldCreateWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type FieldCreateWithProject401Response = UnauthorizedErrorResponse

func (response FieldCreateWithProject401Response) VisitFieldCreateWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type FieldDeleteWithProjectRequestObject struct {
	ProjectIdOrAlias ProjectIdOrAliasParam `json:"projectIdOrAlias"`
	ModelIdOrKey     ModelIdOrKeyParam     `json:"modelIdOrKey"`
	FieldIdOrKey     FieldIdOrKeyParam     `json:"fieldIdOrKey"`
}

type FieldDeleteWithProjectResponseObject interface {
	VisitFieldDeleteWithProjectResponse(w http.ResponseWriter) error
}

type FieldDeleteWithProject200JSONResponse struct {
	Id *id.FieldID `json:"id,omitempty"`
}

func (response FieldDeleteWithProject200JSONResponse) VisitFieldDeleteWithProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FieldDeleteWithProject400Response struct {
}

func (response FieldDeleteWithProject400Response) VisitFieldDeleteWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type FieldDeleteWithProject401Response = UnauthorizedErrorResponse

func (response FieldDeleteWithProject401Response) VisitFieldDeleteWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type FieldDeleteWithProject404Response struct {
}

func (response FieldDeleteWithProject404Response) VisitFieldDeleteWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type FieldDeleteWithProject500Response struct {
}

func (response FieldDeleteWithProject500Response) VisitFieldDeleteWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type FieldUpdateWithProjectRequestObject struct {
	ProjectIdOrAlias ProjectIdOrAliasParam `json:"projectIdOrAlias"`
	ModelIdOrKey     ModelIdOrKeyParam     `json:"modelIdOrKey"`
	FieldIdOrKey     FieldIdOrKeyParam     `json:"fieldIdOrKey"`
	Body             *FieldUpdateWithProjectJSONRequestBody
}

type FieldUpdateWithProjectResponseObject interface {
	VisitFieldUpdateWithProjectResponse(w http.ResponseWriter) error
}

type FieldUpdateWithProject200JSONResponse SchemaField

func (response FieldUpdateWithProject200JSONResponse) VisitFieldUpdateWithProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FieldUpdateWithProject400Response struct {
}

func (response FieldUpdateWithProject400Response) VisitFieldUpdateWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type FieldUpdateWithProject401Response = UnauthorizedErrorResponse

func (response FieldUpdateWithProject401Response) VisitFieldUpdateWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemFilterWithProjectRequestObject struct {
	ProjectIdOrAlias ProjectIdOrAliasParam `json:"projectIdOrAlias"`
	ModelIdOrKey     ModelIdOrKeyParam     `json:"modelIdOrKey"`
	Params           ItemFilterWithProjectParams
}

type ItemFilterWithProjectResponseObject interface {
	VisitItemFilterWithProjectResponse(w http.ResponseWriter) error
}

type ItemFilterWithProject200JSONResponse struct {
	Items      *[]VersionedItem `json:"items,omitempty"`
	Page       *int             `json:"page,omitempty"`
	PerPage    *int             `json:"perPage,omitempty"`
	TotalCount *int             `json:"totalCount,omitempty"`
}

func (response ItemFilterWithProject200JSONResponse) VisitItemFilterWithProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemFilterWithProject400Response struct {
}

func (response ItemFilterWithProject400Response) VisitItemFilterWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemFilterWithProject401Response = UnauthorizedErrorResponse

func (response ItemFilterWithProject401Response) VisitItemFilterWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemFilterWithProject404Response struct {
}

func (response ItemFilterWithProject404Response) VisitItemFilterWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemFilterWithProject500Response struct {
}

func (response ItemFilterWithProject500Response) VisitItemFilterWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ItemCreateWithProjectRequestObject struct {
	ProjectIdOrAlias ProjectIdOrAliasParam `json:"projectIdOrAlias"`
	ModelIdOrKey     ModelIdOrKeyParam     `json:"modelIdOrKey"`
	Body             *ItemCreateWithProjectJSONRequestBody
}

type ItemCreateWithProjectResponseObject interface {
	VisitItemCreateWithProjectResponse(w http.ResponseWriter) error
}

type ItemCreateWithProject200JSONResponse VersionedItem

func (response ItemCreateWithProject200JSONResponse) VisitItemCreateWithProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemCreateWithProject400Response struct {
}

func (response ItemCreateWithProject400Response) VisitItemCreateWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemCreateWithProject401Response = UnauthorizedErrorResponse

func (response ItemCreateWithProject401Response) VisitItemCreateWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemsWithProjectAsCSVRequestObject struct {
	ProjectIdOrAlias ProjectIdOrAliasParam `json:"projectIdOrAlias"`
	ModelIdOrKey     ModelIdOrKeyParam     `json:"modelIdOrKey"`
	Params           ItemsWithProjectAsCSVParams
}

type ItemsWithProjectAsCSVResponseObject interface {
	VisitItemsWithProjectAsCSVResponse(w http.ResponseWriter) error
}

type ItemsWithProjectAsCSV200TextcsvResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response ItemsWithProjectAsCSV200TextcsvResponse) VisitItemsWithProjectAsCSVResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/csv")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type ItemsWithProjectAsCSV400Response struct {
}

func (response ItemsWithProjectAsCSV400Response) VisitItemsWithProjectAsCSVResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemsWithProjectAsCSV401Response = UnauthorizedErrorResponse

func (response ItemsWithProjectAsCSV401Response) VisitItemsWithProjectAsCSVResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemsWithProjectAsCSV404Response struct {
}

func (response ItemsWithProjectAsCSV404Response) VisitItemsWithProjectAsCSVResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemsWithProjectAsCSV500Response struct {
}

func (response ItemsWithProjectAsCSV500Response) VisitItemsWithProjectAsCSVResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ItemsWithProjectAsGeoJSONRequestObject struct {
	ProjectIdOrAlias ProjectIdOrAliasParam `json:"projectIdOrAlias"`
	ModelIdOrKey     ModelIdOrKeyParam     `json:"modelIdOrKey"`
	Params           ItemsWithProjectAsGeoJSONParams
}

type ItemsWithProjectAsGeoJSONResponseObject interface {
	VisitItemsWithProjectAsGeoJSONResponse(w http.ResponseWriter) error
}

type ItemsWithProjectAsGeoJSON200JSONResponse GeoJSON

func (response ItemsWithProjectAsGeoJSON200JSONResponse) VisitItemsWithProjectAsGeoJSONResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemsWithProjectAsGeoJSON400Response struct {
}

func (response ItemsWithProjectAsGeoJSON400Response) VisitItemsWithProjectAsGeoJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemsWithProjectAsGeoJSON401Response = UnauthorizedErrorResponse

func (response ItemsWithProjectAsGeoJSON401Response) VisitItemsWithProjectAsGeoJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemsWithProjectAsGeoJSON404Response struct {
}

func (response ItemsWithProjectAsGeoJSON404Response) VisitItemsWithProjectAsGeoJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemsWithProjectAsGeoJSON500Response struct {
}

func (response ItemsWithProjectAsGeoJSON500Response) VisitItemsWithProjectAsGeoJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type AssetFilterRequestObject struct {
	ProjectId ProjectIdParam `json:"projectId"`
	Params    AssetFilterParams
}

type AssetFilterResponseObject interface {
	VisitAssetFilterResponse(w http.ResponseWriter) error
}

type AssetFilter200JSONResponse struct {
	Items      *[]Asset `json:"items,omitempty"`
	Page       *int     `json:"page,omitempty"`
	PerPage    *int     `json:"perPage,omitempty"`
	TotalCount *int     `json:"totalCount,omitempty"`
}

func (response AssetFilter200JSONResponse) VisitAssetFilterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetFilter400Response struct {
}

func (response AssetFilter400Response) VisitAssetFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetFilter401Response = UnauthorizedErrorResponse

func (response AssetFilter401Response) VisitAssetFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetFilter404Response struct {
}

func (response AssetFilter404Response) VisitAssetFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetCreateRequestObject struct {
	ProjectId     ProjectIdParam `json:"projectId"`
	JSONBody      *AssetCreateJSONRequestBody
	MultipartBody *multipart.Reader
}

type AssetCreateResponseObject interface {
	VisitAssetCreateResponse(w http.ResponseWriter) error
}

type AssetCreate200JSONResponse Asset

func (response AssetCreate200JSONResponse) VisitAssetCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetCreate400Response struct {
}

func (response AssetCreate400Response) VisitAssetCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetCreate401Response = UnauthorizedErrorResponse

func (response AssetCreate401Response) VisitAssetCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetCreate404Response struct {
}

func (response AssetCreate404Response) VisitAssetCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetUploadCreateRequestObject struct {
	ProjectId ProjectIdParam `json:"projectId"`
	Body      *AssetUploadCreateJSONRequestBody
}

type AssetUploadCreateResponseObject interface {
	VisitAssetUploadCreateResponse(w http.ResponseWriter) error
}

type AssetUploadCreate200JSONResponse struct {
	ContentLength *int    `json:"contentLength,omitempty"`
	ContentType   *string `json:"contentType,omitempty"`
	Next          *string `json:"next,omitempty"`
	Token         *string `json:"token,omitempty"`
	Url           *string `json:"url,omitempty"`
}

func (response AssetUploadCreate200JSONResponse) VisitAssetUploadCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetUploadCreate400Response struct {
}

func (response AssetUploadCreate400Response) VisitAssetUploadCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetUploadCreate401Response = UnauthorizedErrorResponse

func (response AssetUploadCreate401Response) VisitAssetUploadCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetUploadCreate404Response struct {
}

func (response AssetUploadCreate404Response) VisitAssetUploadCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type FieldCreateRequestObject struct {
	SchemaId SchemaIdParam `json:"schemaId"`
	Body     *FieldCreateJSONRequestBody
}

type FieldCreateResponseObject interface {
	VisitFieldCreateResponse(w http.ResponseWriter) error
}

type FieldCreate200JSONResponse SchemaField

func (response FieldCreate200JSONResponse) VisitFieldCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FieldCreate400Response struct {
}

func (response FieldCreate400Response) VisitFieldCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type FieldCreate401Response = UnauthorizedErrorResponse

func (response FieldCreate401Response) VisitFieldCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type FieldDeleteRequestObject struct {
	SchemaId     SchemaIdParam     `json:"schemaId"`
	FieldIdOrKey FieldIdOrKeyParam `json:"fieldIdOrKey"`
}

type FieldDeleteResponseObject interface {
	VisitFieldDeleteResponse(w http.ResponseWriter) error
}

type FieldDelete200JSONResponse struct {
	Id *id.FieldID `json:"id,omitempty"`
}

func (response FieldDelete200JSONResponse) VisitFieldDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FieldDelete400Response struct {
}

func (response FieldDelete400Response) VisitFieldDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type FieldDelete401Response = UnauthorizedErrorResponse

func (response FieldDelete401Response) VisitFieldDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type FieldUpdateRequestObject struct {
	SchemaId     SchemaIdParam     `json:"schemaId"`
	FieldIdOrKey FieldIdOrKeyParam `json:"fieldIdOrKey"`
	Body         *FieldUpdateJSONRequestBody
}

type FieldUpdateResponseObject interface {
	VisitFieldUpdateResponse(w http.ResponseWriter) error
}

type FieldUpdate200JSONResponse SchemaField

func (response FieldUpdate200JSONResponse) VisitFieldUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FieldUpdate400Response struct {
}

func (response FieldUpdate400Response) VisitFieldUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type FieldUpdate401Response = UnauthorizedErrorResponse

func (response FieldUpdate401Response) VisitFieldUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ProjectFilterRequestObject struct {
	WorkspaceId WorkspaceIdParam `json:"workspaceId"`
	Params      ProjectFilterParams
}

type ProjectFilterResponseObject interface {
	VisitProjectFilterResponse(w http.ResponseWriter) error
}

type ProjectFilter200JSONResponse struct {
	Page       *int       `json:"page,omitempty"`
	PerPage    *int       `json:"perPage,omitempty"`
	Projects   *[]Project `json:"projects,omitempty"`
	TotalCount *int       `json:"totalCount,omitempty"`
}

func (response ProjectFilter200JSONResponse) VisitProjectFilterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProjectFilter400Response struct {
}

func (response ProjectFilter400Response) VisitProjectFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ProjectFilter401Response = UnauthorizedErrorResponse

func (response ProjectFilter401Response) VisitProjectFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ProjectFilter404Response = NotFoundErrorResponse

func (response ProjectFilter404Response) VisitProjectFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ProjectFilter500Response struct {
}

func (response ProjectFilter500Response) VisitProjectFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (DELETE /assets/{assetId})
	AssetDelete(ctx context.Context, request AssetDeleteRequestObject) (AssetDeleteResponseObject, error)

	// (GET /assets/{assetId})
	AssetGet(ctx context.Context, request AssetGetRequestObject) (AssetGetResponseObject, error)

	// (GET /assets/{assetId}/comments)
	AssetCommentList(ctx context.Context, request AssetCommentListRequestObject) (AssetCommentListResponseObject, error)

	// (POST /assets/{assetId}/comments)
	AssetCommentCreate(ctx context.Context, request AssetCommentCreateRequestObject) (AssetCommentCreateResponseObject, error)

	// (DELETE /assets/{assetId}/comments/{commentId})
	AssetCommentDelete(ctx context.Context, request AssetCommentDeleteRequestObject) (AssetCommentDeleteResponseObject, error)
	// Update AssetComment
	// (PATCH /assets/{assetId}/comments/{commentId})
	AssetCommentUpdate(ctx context.Context, request AssetCommentUpdateRequestObject) (AssetCommentUpdateResponseObject, error)
	// delete an item
	// (DELETE /items/{itemId})
	ItemDelete(ctx context.Context, request ItemDeleteRequestObject) (ItemDeleteResponseObject, error)
	// Returns an items.
	// (GET /items/{itemId})
	ItemGet(ctx context.Context, request ItemGetRequestObject) (ItemGetResponseObject, error)
	// Update an item.
	// (PATCH /items/{itemId})
	ItemUpdate(ctx context.Context, request ItemUpdateRequestObject) (ItemUpdateResponseObject, error)

	// (GET /items/{itemId}/comments)
	ItemCommentList(ctx context.Context, request ItemCommentListRequestObject) (ItemCommentListResponseObject, error)

	// (POST /items/{itemId}/comments)
	ItemCommentCreate(ctx context.Context, request ItemCommentCreateRequestObject) (ItemCommentCreateResponseObject, error)

	// (DELETE /items/{itemId}/comments/{commentId})
	ItemCommentDelete(ctx context.Context, request ItemCommentDeleteRequestObject) (ItemCommentDeleteResponseObject, error)
	// Update Item Comment
	// (PATCH /items/{itemId}/comments/{commentId})
	ItemCommentUpdate(ctx context.Context, request ItemCommentUpdateRequestObject) (ItemCommentUpdateResponseObject, error)
	// delete a model
	// (DELETE /models/{modelId})
	ModelDelete(ctx context.Context, request ModelDeleteRequestObject) (ModelDeleteResponseObject, error)
	// Returns a model.
	// (GET /models/{modelId})
	ModelGet(ctx context.Context, request ModelGetRequestObject) (ModelGetResponseObject, error)
	// Update a model.
	// (PATCH /models/{modelId})
	ModelUpdate(ctx context.Context, request ModelUpdateRequestObject) (ModelUpdateResponseObject, error)
	// Returns a list of items.
	// (GET /models/{modelId}/items)
	ItemFilter(ctx context.Context, request ItemFilterRequestObject) (ItemFilterResponseObject, error)
	// create an item
	// (POST /models/{modelId}/items)
	ItemCreate(ctx context.Context, request ItemCreateRequestObject) (ItemCreateResponseObject, error)
	// Returns a CSV that has a list of items as features.
	// (GET /models/{modelId}/items.csv)
	ItemsAsCSV(ctx context.Context, request ItemsAsCSVRequestObject) (ItemsAsCSVResponseObject, error)
	// Returns a GeoJSON that has a list of items as features.
	// (GET /models/{modelId}/items.geojson)
	ItemsAsGeoJSON(ctx context.Context, request ItemsAsGeoJSONRequestObject) (ItemsAsGeoJSONResponseObject, error)
	// Returns a models.
	// (GET /projects/{projectIdOrAlias}/models)
	ModelFilter(ctx context.Context, request ModelFilterRequestObject) (ModelFilterResponseObject, error)
	// create a model
	// (POST /projects/{projectIdOrAlias}/models)
	ModelCreate(ctx context.Context, request ModelCreateRequestObject) (ModelCreateResponseObject, error)
	// Delete a model.
	// (DELETE /projects/{projectIdOrAlias}/models/{modelIdOrKey})
	ModelDeleteWithProject(ctx context.Context, request ModelDeleteWithProjectRequestObject) (ModelDeleteWithProjectResponseObject, error)
	// Returns a model.
	// (GET /projects/{projectIdOrAlias}/models/{modelIdOrKey})
	ModelGetWithProject(ctx context.Context, request ModelGetWithProjectRequestObject) (ModelGetWithProjectResponseObject, error)
	// Update a model.
	// (PATCH /projects/{projectIdOrAlias}/models/{modelIdOrKey})
	ModelUpdateWithProject(ctx context.Context, request ModelUpdateWithProjectRequestObject) (ModelUpdateWithProjectResponseObject, error)
	// create a field
	// (POST /projects/{projectIdOrAlias}/models/{modelIdOrKey}/fields)
	FieldCreateWithProject(ctx context.Context, request FieldCreateWithProjectRequestObject) (FieldCreateWithProjectResponseObject, error)
	// Delete a field.
	// (DELETE /projects/{projectIdOrAlias}/models/{modelIdOrKey}/fields/{fieldIdOrKey})
	FieldDeleteWithProject(ctx context.Context, request FieldDeleteWithProjectRequestObject) (FieldDeleteWithProjectResponseObject, error)
	// update a field
	// (PATCH /projects/{projectIdOrAlias}/models/{modelIdOrKey}/fields/{fieldIdOrKey})
	FieldUpdateWithProject(ctx context.Context, request FieldUpdateWithProjectRequestObject) (FieldUpdateWithProjectResponseObject, error)
	// Returns a list of items.
	// (GET /projects/{projectIdOrAlias}/models/{modelIdOrKey}/items)
	ItemFilterWithProject(ctx context.Context, request ItemFilterWithProjectRequestObject) (ItemFilterWithProjectResponseObject, error)

	// (POST /projects/{projectIdOrAlias}/models/{modelIdOrKey}/items)
	ItemCreateWithProject(ctx context.Context, request ItemCreateWithProjectRequestObject) (ItemCreateWithProjectResponseObject, error)
	// Returns a CSV that has a list of items as features.
	// (GET /projects/{projectIdOrAlias}/models/{modelIdOrKey}/items.csv)
	ItemsWithProjectAsCSV(ctx context.Context, request ItemsWithProjectAsCSVRequestObject) (ItemsWithProjectAsCSVResponseObject, error)
	// Returns a GeoJSON that has a list of items as features.
	// (GET /projects/{projectIdOrAlias}/models/{modelIdOrKey}/items.geojson)
	ItemsWithProjectAsGeoJSON(ctx context.Context, request ItemsWithProjectAsGeoJSONRequestObject) (ItemsWithProjectAsGeoJSONResponseObject, error)
	// Returns a list of assets.
	// (GET /projects/{projectId}/assets)
	AssetFilter(ctx context.Context, request AssetFilterRequestObject) (AssetFilterResponseObject, error)
	// Create an new asset.
	// (POST /projects/{projectId}/assets)
	AssetCreate(ctx context.Context, request AssetCreateRequestObject) (AssetCreateResponseObject, error)
	// Upload an asset.
	// (POST /projects/{projectId}/assets/uploads)
	AssetUploadCreate(ctx context.Context, request AssetUploadCreateRequestObject) (AssetUploadCreateResponseObject, error)
	// create a field
	// (POST /schemata/{schemaId}/fields)
	FieldCreate(ctx context.Context, request FieldCreateRequestObject) (FieldCreateResponseObject, error)
	// delete a field
	// (DELETE /schemata/{schemaId}/fields/{fieldIdOrKey})
	FieldDelete(ctx context.Context, request FieldDeleteRequestObject) (FieldDeleteResponseObject, error)
	// update a field
	// (PATCH /schemata/{schemaId}/fields/{fieldIdOrKey})
	FieldUpdate(ctx context.Context, request FieldUpdateRequestObject) (FieldUpdateResponseObject, error)
	// Returns a list of projects.
	// (GET /{workspaceId}/projects)
	ProjectFilter(ctx context.Context, request ProjectFilterRequestObject) (ProjectFilterResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// AssetDelete operation middleware
func (sh *strictHandler) AssetDelete(ctx echo.Context, assetId AssetIdParam) error {
	var request AssetDeleteRequestObject

	request.AssetId = assetId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetDelete(ctx.Request().Context(), request.(AssetDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetDeleteResponseObject); ok {
		return validResponse.VisitAssetDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AssetGet operation middleware
func (sh *strictHandler) AssetGet(ctx echo.Context, assetId AssetIdParam) error {
	var request AssetGetRequestObject

	request.AssetId = assetId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetGet(ctx.Request().Context(), request.(AssetGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetGetResponseObject); ok {
		return validResponse.VisitAssetGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AssetCommentList operation middleware
func (sh *strictHandler) AssetCommentList(ctx echo.Context, assetId AssetIdParam) error {
	var request AssetCommentListRequestObject

	request.AssetId = assetId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetCommentList(ctx.Request().Context(), request.(AssetCommentListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetCommentList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetCommentListResponseObject); ok {
		return validResponse.VisitAssetCommentListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AssetCommentCreate operation middleware
func (sh *strictHandler) AssetCommentCreate(ctx echo.Context, assetId AssetIdParam) error {
	var request AssetCommentCreateRequestObject

	request.AssetId = assetId

	var body AssetCommentCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetCommentCreate(ctx.Request().Context(), request.(AssetCommentCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetCommentCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetCommentCreateResponseObject); ok {
		return validResponse.VisitAssetCommentCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AssetCommentDelete operation middleware
func (sh *strictHandler) AssetCommentDelete(ctx echo.Context, assetId AssetIdParam, commentId CommentIdParam) error {
	var request AssetCommentDeleteRequestObject

	request.AssetId = assetId
	request.CommentId = commentId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetCommentDelete(ctx.Request().Context(), request.(AssetCommentDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetCommentDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetCommentDeleteResponseObject); ok {
		return validResponse.VisitAssetCommentDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AssetCommentUpdate operation middleware
func (sh *strictHandler) AssetCommentUpdate(ctx echo.Context, assetId AssetIdParam, commentId CommentIdParam) error {
	var request AssetCommentUpdateRequestObject

	request.AssetId = assetId
	request.CommentId = commentId

	var body AssetCommentUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetCommentUpdate(ctx.Request().Context(), request.(AssetCommentUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetCommentUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetCommentUpdateResponseObject); ok {
		return validResponse.VisitAssetCommentUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemDelete operation middleware
func (sh *strictHandler) ItemDelete(ctx echo.Context, itemId ItemIdParam) error {
	var request ItemDeleteRequestObject

	request.ItemId = itemId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemDelete(ctx.Request().Context(), request.(ItemDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemDeleteResponseObject); ok {
		return validResponse.VisitItemDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemGet operation middleware
func (sh *strictHandler) ItemGet(ctx echo.Context, itemId ItemIdParam, params ItemGetParams) error {
	var request ItemGetRequestObject

	request.ItemId = itemId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemGet(ctx.Request().Context(), request.(ItemGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemGetResponseObject); ok {
		return validResponse.VisitItemGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemUpdate operation middleware
func (sh *strictHandler) ItemUpdate(ctx echo.Context, itemId ItemIdParam) error {
	var request ItemUpdateRequestObject

	request.ItemId = itemId

	var body ItemUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemUpdate(ctx.Request().Context(), request.(ItemUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemUpdateResponseObject); ok {
		return validResponse.VisitItemUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemCommentList operation middleware
func (sh *strictHandler) ItemCommentList(ctx echo.Context, itemId ItemIdParam) error {
	var request ItemCommentListRequestObject

	request.ItemId = itemId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemCommentList(ctx.Request().Context(), request.(ItemCommentListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemCommentList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemCommentListResponseObject); ok {
		return validResponse.VisitItemCommentListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemCommentCreate operation middleware
func (sh *strictHandler) ItemCommentCreate(ctx echo.Context, itemId ItemIdParam) error {
	var request ItemCommentCreateRequestObject

	request.ItemId = itemId

	var body ItemCommentCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemCommentCreate(ctx.Request().Context(), request.(ItemCommentCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemCommentCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemCommentCreateResponseObject); ok {
		return validResponse.VisitItemCommentCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemCommentDelete operation middleware
func (sh *strictHandler) ItemCommentDelete(ctx echo.Context, itemId ItemIdParam, commentId CommentIdParam) error {
	var request ItemCommentDeleteRequestObject

	request.ItemId = itemId
	request.CommentId = commentId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemCommentDelete(ctx.Request().Context(), request.(ItemCommentDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemCommentDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemCommentDeleteResponseObject); ok {
		return validResponse.VisitItemCommentDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemCommentUpdate operation middleware
func (sh *strictHandler) ItemCommentUpdate(ctx echo.Context, itemId ItemIdParam, commentId CommentIdParam) error {
	var request ItemCommentUpdateRequestObject

	request.ItemId = itemId
	request.CommentId = commentId

	var body ItemCommentUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemCommentUpdate(ctx.Request().Context(), request.(ItemCommentUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemCommentUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemCommentUpdateResponseObject); ok {
		return validResponse.VisitItemCommentUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ModelDelete operation middleware
func (sh *strictHandler) ModelDelete(ctx echo.Context, modelId ModelIdParam) error {
	var request ModelDeleteRequestObject

	request.ModelId = modelId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModelDelete(ctx.Request().Context(), request.(ModelDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModelDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ModelDeleteResponseObject); ok {
		return validResponse.VisitModelDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ModelGet operation middleware
func (sh *strictHandler) ModelGet(ctx echo.Context, modelId ModelIdParam) error {
	var request ModelGetRequestObject

	request.ModelId = modelId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModelGet(ctx.Request().Context(), request.(ModelGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModelGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ModelGetResponseObject); ok {
		return validResponse.VisitModelGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ModelUpdate operation middleware
func (sh *strictHandler) ModelUpdate(ctx echo.Context, modelId ModelIdParam) error {
	var request ModelUpdateRequestObject

	request.ModelId = modelId

	var body ModelUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModelUpdate(ctx.Request().Context(), request.(ModelUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModelUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ModelUpdateResponseObject); ok {
		return validResponse.VisitModelUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemFilter operation middleware
func (sh *strictHandler) ItemFilter(ctx echo.Context, modelId ModelIdParam, params ItemFilterParams) error {
	var request ItemFilterRequestObject

	request.ModelId = modelId
	request.Params = params

	var body ItemFilterJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemFilter(ctx.Request().Context(), request.(ItemFilterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemFilter")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemFilterResponseObject); ok {
		return validResponse.VisitItemFilterResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemCreate operation middleware
func (sh *strictHandler) ItemCreate(ctx echo.Context, modelId ModelIdParam) error {
	var request ItemCreateRequestObject

	request.ModelId = modelId

	var body ItemCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemCreate(ctx.Request().Context(), request.(ItemCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemCreateResponseObject); ok {
		return validResponse.VisitItemCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemsAsCSV operation middleware
func (sh *strictHandler) ItemsAsCSV(ctx echo.Context, modelId ModelIdParam, params ItemsAsCSVParams) error {
	var request ItemsAsCSVRequestObject

	request.ModelId = modelId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemsAsCSV(ctx.Request().Context(), request.(ItemsAsCSVRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemsAsCSV")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemsAsCSVResponseObject); ok {
		return validResponse.VisitItemsAsCSVResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemsAsGeoJSON operation middleware
func (sh *strictHandler) ItemsAsGeoJSON(ctx echo.Context, modelId ModelIdParam, params ItemsAsGeoJSONParams) error {
	var request ItemsAsGeoJSONRequestObject

	request.ModelId = modelId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemsAsGeoJSON(ctx.Request().Context(), request.(ItemsAsGeoJSONRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemsAsGeoJSON")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemsAsGeoJSONResponseObject); ok {
		return validResponse.VisitItemsAsGeoJSONResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ModelFilter operation middleware
func (sh *strictHandler) ModelFilter(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, params ModelFilterParams) error {
	var request ModelFilterRequestObject

	request.ProjectIdOrAlias = projectIdOrAlias
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModelFilter(ctx.Request().Context(), request.(ModelFilterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModelFilter")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ModelFilterResponseObject); ok {
		return validResponse.VisitModelFilterResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ModelCreate operation middleware
func (sh *strictHandler) ModelCreate(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, params ModelCreateParams) error {
	var request ModelCreateRequestObject

	request.ProjectIdOrAlias = projectIdOrAlias
	request.Params = params

	var body ModelCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModelCreate(ctx.Request().Context(), request.(ModelCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModelCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ModelCreateResponseObject); ok {
		return validResponse.VisitModelCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ModelDeleteWithProject operation middleware
func (sh *strictHandler) ModelDeleteWithProject(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error {
	var request ModelDeleteWithProjectRequestObject

	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModelDeleteWithProject(ctx.Request().Context(), request.(ModelDeleteWithProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModelDeleteWithProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ModelDeleteWithProjectResponseObject); ok {
		return validResponse.VisitModelDeleteWithProjectResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ModelGetWithProject operation middleware
func (sh *strictHandler) ModelGetWithProject(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error {
	var request ModelGetWithProjectRequestObject

	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModelGetWithProject(ctx.Request().Context(), request.(ModelGetWithProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModelGetWithProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ModelGetWithProjectResponseObject); ok {
		return validResponse.VisitModelGetWithProjectResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ModelUpdateWithProject operation middleware
func (sh *strictHandler) ModelUpdateWithProject(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error {
	var request ModelUpdateWithProjectRequestObject

	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey

	var body ModelUpdateWithProjectJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModelUpdateWithProject(ctx.Request().Context(), request.(ModelUpdateWithProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModelUpdateWithProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ModelUpdateWithProjectResponseObject); ok {
		return validResponse.VisitModelUpdateWithProjectResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// FieldCreateWithProject operation middleware
func (sh *strictHandler) FieldCreateWithProject(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error {
	var request FieldCreateWithProjectRequestObject

	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey

	var body FieldCreateWithProjectJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FieldCreateWithProject(ctx.Request().Context(), request.(FieldCreateWithProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FieldCreateWithProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FieldCreateWithProjectResponseObject); ok {
		return validResponse.VisitFieldCreateWithProjectResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// FieldDeleteWithProject operation middleware
func (sh *strictHandler) FieldDeleteWithProject(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, fieldIdOrKey FieldIdOrKeyParam) error {
	var request FieldDeleteWithProjectRequestObject

	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey
	request.FieldIdOrKey = fieldIdOrKey

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FieldDeleteWithProject(ctx.Request().Context(), request.(FieldDeleteWithProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FieldDeleteWithProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FieldDeleteWithProjectResponseObject); ok {
		return validResponse.VisitFieldDeleteWithProjectResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// FieldUpdateWithProject operation middleware
func (sh *strictHandler) FieldUpdateWithProject(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, fieldIdOrKey FieldIdOrKeyParam) error {
	var request FieldUpdateWithProjectRequestObject

	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey
	request.FieldIdOrKey = fieldIdOrKey

	var body FieldUpdateWithProjectJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FieldUpdateWithProject(ctx.Request().Context(), request.(FieldUpdateWithProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FieldUpdateWithProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FieldUpdateWithProjectResponseObject); ok {
		return validResponse.VisitFieldUpdateWithProjectResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemFilterWithProject operation middleware
func (sh *strictHandler) ItemFilterWithProject(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, params ItemFilterWithProjectParams) error {
	var request ItemFilterWithProjectRequestObject

	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemFilterWithProject(ctx.Request().Context(), request.(ItemFilterWithProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemFilterWithProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemFilterWithProjectResponseObject); ok {
		return validResponse.VisitItemFilterWithProjectResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemCreateWithProject operation middleware
func (sh *strictHandler) ItemCreateWithProject(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error {
	var request ItemCreateWithProjectRequestObject

	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey

	var body ItemCreateWithProjectJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemCreateWithProject(ctx.Request().Context(), request.(ItemCreateWithProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemCreateWithProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemCreateWithProjectResponseObject); ok {
		return validResponse.VisitItemCreateWithProjectResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemsWithProjectAsCSV operation middleware
func (sh *strictHandler) ItemsWithProjectAsCSV(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, params ItemsWithProjectAsCSVParams) error {
	var request ItemsWithProjectAsCSVRequestObject

	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemsWithProjectAsCSV(ctx.Request().Context(), request.(ItemsWithProjectAsCSVRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemsWithProjectAsCSV")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemsWithProjectAsCSVResponseObject); ok {
		return validResponse.VisitItemsWithProjectAsCSVResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemsWithProjectAsGeoJSON operation middleware
func (sh *strictHandler) ItemsWithProjectAsGeoJSON(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, params ItemsWithProjectAsGeoJSONParams) error {
	var request ItemsWithProjectAsGeoJSONRequestObject

	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemsWithProjectAsGeoJSON(ctx.Request().Context(), request.(ItemsWithProjectAsGeoJSONRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemsWithProjectAsGeoJSON")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemsWithProjectAsGeoJSONResponseObject); ok {
		return validResponse.VisitItemsWithProjectAsGeoJSONResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AssetFilter operation middleware
func (sh *strictHandler) AssetFilter(ctx echo.Context, projectId ProjectIdParam, params AssetFilterParams) error {
	var request AssetFilterRequestObject

	request.ProjectId = projectId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetFilter(ctx.Request().Context(), request.(AssetFilterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetFilter")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetFilterResponseObject); ok {
		return validResponse.VisitAssetFilterResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AssetCreate operation middleware
func (sh *strictHandler) AssetCreate(ctx echo.Context, projectId ProjectIdParam) error {
	var request AssetCreateRequestObject

	request.ProjectId = projectId
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body AssetCreateJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "multipart/form-data") {
		if reader, err := ctx.Request().MultipartReader(); err != nil {
			return err
		} else {
			request.MultipartBody = reader
		}
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetCreate(ctx.Request().Context(), request.(AssetCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetCreateResponseObject); ok {
		return validResponse.VisitAssetCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AssetUploadCreate operation middleware
func (sh *strictHandler) AssetUploadCreate(ctx echo.Context, projectId ProjectIdParam) error {
	var request AssetUploadCreateRequestObject

	request.ProjectId = projectId

	var body AssetUploadCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetUploadCreate(ctx.Request().Context(), request.(AssetUploadCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetUploadCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetUploadCreateResponseObject); ok {
		return validResponse.VisitAssetUploadCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// FieldCreate operation middleware
func (sh *strictHandler) FieldCreate(ctx echo.Context, schemaId SchemaIdParam) error {
	var request FieldCreateRequestObject

	request.SchemaId = schemaId

	var body FieldCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FieldCreate(ctx.Request().Context(), request.(FieldCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FieldCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FieldCreateResponseObject); ok {
		return validResponse.VisitFieldCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// FieldDelete operation middleware
func (sh *strictHandler) FieldDelete(ctx echo.Context, schemaId SchemaIdParam, fieldIdOrKey FieldIdOrKeyParam) error {
	var request FieldDeleteRequestObject

	request.SchemaId = schemaId
	request.FieldIdOrKey = fieldIdOrKey

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FieldDelete(ctx.Request().Context(), request.(FieldDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FieldDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FieldDeleteResponseObject); ok {
		return validResponse.VisitFieldDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// FieldUpdate operation middleware
func (sh *strictHandler) FieldUpdate(ctx echo.Context, schemaId SchemaIdParam, fieldIdOrKey FieldIdOrKeyParam) error {
	var request FieldUpdateRequestObject

	request.SchemaId = schemaId
	request.FieldIdOrKey = fieldIdOrKey

	var body FieldUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FieldUpdate(ctx.Request().Context(), request.(FieldUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FieldUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FieldUpdateResponseObject); ok {
		return validResponse.VisitFieldUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ProjectFilter operation middleware
func (sh *strictHandler) ProjectFilter(ctx echo.Context, workspaceId WorkspaceIdParam, params ProjectFilterParams) error {
	var request ProjectFilterRequestObject

	request.WorkspaceId = workspaceId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProjectFilter(ctx.Request().Context(), request.(ProjectFilterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProjectFilter")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ProjectFilterResponseObject); ok {
		return validResponse.VisitProjectFilterResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w92W/buJv/iqDdRzXO/Drzkrds0hSZbZtgkk6xKIqCkT7bnEikS1I5JvD/vuAlURZ1",
	"2XJOv7SxRFIfv/sS9RDGNFtQAkTw8OAhXCCGMhDA1C/EOYjT5FxelL8T4DHDC4EpCQ/C0+OATgMxh4BD",
	"CrGAJFATwijE8v4CiXkYhQRlEB7YtcIoZPArxwyS8ECwHKKQx3PIkFxf3C/kUC4YJrMwCu/ezeg7cxEn",
	"e4dqieNwuYz0cg2AXSwgxlMMPLidg5gD03AFCRIoQAwCyK4gSSAJMFHwM+B5KrgF/FcO7H4F8tCF878Z",
	"TMOD8L8mJfIm+i6fqNEf1APkJiSsMc0yIIMQaab4UVmstwkyj8wiGp1TDGlympyx/4X7FihZcA33Flg1",
	"x6IwowmkPDCP94LtPmNtyPWovRO11rFeS24AC8iGIFiO94OpV9oEtadyBY3Xa7i/pawJLnM3KBbysZ8Z",
	"FDYDIB+k8D+QgGqOJeCC0X8gbuA4d/W1MaMW2XOJZpbtpNpgQDeh3me1hCbfAs2gAbqvHJJAUMNRGjI0",
	"gwYimlslEAlMUZ6K8OC3KMwwwVmeqb8tHETADJgGAtj5aHDotfyg/LEfhRm6M7Ds73dDpkkhGeMwxYi3",
	"Mh6SIyxFW4m4uuza1DQLKZ7TK1Wg7q8t+oHbCucKl52bSZrPGEz7kRcFDKYSmzfAGkgsbZOXvGGKBHC5",
	"CSCSpt/LC4v8KsVx+CPyaBa9Uh9sqYEVg+BHmF1xEym90Gto9HHKxDFmHShMYIoJKOAoS4AFCWYQy0F2",
	"Bwz4ghIOQYq5iIJbnKbBFQR4RiiTNmPqTMY8IFQECwYciICkgRoJZg3UkEA6tEDql7roJwNlYugGfdtq",
	"gFMu3wBozAAJSA5dznGv5YvE/O0F/Jaya75AMQwRuGKSn4OcNXsLHYpjmhOR0AxhsvetWEGykBJBjSTl",
	"+H6h4oTmJPnAGGV1gC8VUn/lwCWsDDjNWQzBLdI8MZVTw2UUfiUoF3PK8L/QtNRhHAPngaDXQCRPZZhz",
	"TGZSxDG5QSlOHCFUsJ0AEjkD5a0zugAmsAZ6BjQDwe67PNSPdpx0m5IB/ky08kAzgl4p3bi0xH8ouMSC",
	"6uWL2mwz+oimqRbL+haneoj6W/ppvGuvFoLyeYgxdN8CrPP4fmB/BPrnxdmXFwNswSNVaGNKWYKJtAjy",
	"JyVwNg0PvrdDfE4xkeu2j/qcpwL3G/oJE7gw8PdZdcD4c5rezyjpC60Z/GMZWcHCA0jpylgXLTVmotBB",
	"UxQ6GzN3KlcsfMUs+9M+eDBnOMv33aQlqXQTT/WE/9S3uwp839UrpPWvqgEYDG7DWhqF/Vez7FRbrw7W",
	"lLIMKaNP86tUGjUzh+TZlXSmleNtcPi+A6E+SDdDQPm43+s3dfqjpi8Qi+f4Bj7cCYYUn10IJHLuMvYC",
	"SGLj2p8LRmcMuHTmE0okCqYIp5B42DMKY0oEEHFpJKV+v3A/KshFAt4JnDn4LadMcQpdCFJj+lrFIhtl",
	"vRIPnAsGNxhuL1ckHmcmQpP//+Q3cvUZUP3vz/fJz0ucAjc/sxupD5Q7/fO9dHdifiO9LnJN6C3xoq+M",
	"SLq34QQiUSioQOkF/tfdTcmipaPXG+s5S/35itJn+y7RHVWiKDkr6vQxS921knNzMI1SuZJ0CxXDpRwa",
	"+E2n2+pcrvy3bkQiomVFDV8ld85NsCZgxgTy6+SC6cdi+F5MXM0C1hAbU5JgvyuGSNJb8ZTLeJTPFeI4",
	"9nhPOlvYLbKQJhcqbKCKSeUaSGhX2xIAfuUolfJEqPig//YR4AaluSScFxVXlKbPCkp7RwIGiNSkyoLm",
	"PMxO9slQJo3gIoXt7hGTOM0T4IfkXm/0tHKhuK3E1r2dpu3IsHxYY7DNsELyNEVX28YKZAth8PFB/dnP",
	"ZTOaeaugzZTiYZdzJL3LFDg3fzo3zphi10vqjCiv9eFha2M2I5aGfHONxAtHdXt4lcoeYWLE/aj8xQVi",
	"gn/DKt0BJLF/Eiou3FuSV+zdPihusL0DUayMzVYRcwVTyqRBQ1OhzKa+cMbOiL1o/qbTyznm3wCuix+f",
	"KVHI0b/+DxBrx00fS7oJwnxSqxbwZG8YzRc9kzEf5VjtsfWy8qZaFuqClNfBsEFpG/3ULpVz02Usq5Ru",
	"45f+kK+GzcprVH4RpuQYCXB+ftUeV0YTPMWxO8K9ZEZxHbhYykRhBgKpB/fUwza0WEmozHGaMOgfUdro",
	"Y1UddQVDzdEHEnPvDe738H1702n8+uaG+6OVvOfDmv5qUZxr5uQUcfFZURmS/tBJmidIoIteRX6TYa7N",
	"68XTZemiNXJcM4QzpRyPf9i3g6HcHF9vU4PjRB/j2ZJbPfBQhbyRgqRRmLKC/0aKrhE9u2WOrgC0pbrh",
	"wW7JCVXkXmKRwom1UP2V81oJGUiT/skr/b8GzaMk8VAmXVPAmpF54rfrYxloNz6rS3bpofjuDjTuvj2W",
	"tx0TLOBOSNLCnThkgMIoZDieX+qrGWLXCb2Vnlo8h/j6it6FUdFMlWhzrKLqKNR1P5sjUVaZwRQYEFUB",
	"1Pkg7SFFoUAmX6YS3WdXpjJvL3xIsHQ6vH4fMI4pgUQ6UaMYtYFMPN2Ifcs6HOafjd3xE9xapZORwLNt",
	"NX4vg9nuwXq+O8+Vm9bgbpYPKKidnA5KaVcp6l+4ulonKGvoaQNFj50vfSEChzhnWNwr9aRZ8QoQA3aY",
	"awdO7VaRWF0ul50LsdDla0ymtF5d/gs+ICbm744+XwSnKv2oHN/g8PxULiKVfeeoYnPhb3v7e/smbiNo",
	"gcOD8P3e/t77ULuaCnDd/8gnD6bfc6mBSkEozaFjJkyJZKZQpdCP9c2VCvx/9vd1VbLIiaLFIjWO++Qf",
	"rrHdZMaGJfA9RFl1DbTe4rqDYhmFv2vwVvoYdMHetgYERTNtoIMlNe+3JpYutj+ptw2omb/Xn/il7DZY",
	"KsXIpVpWG+OhLl2KBrR/VGp4I5x3tsG+IkS6jdENRfFyyKTSOK1qyDW5mJiag2ndaCKTSdB/0p07I4qI",
	"+/ieKTNdI/FlWPuJj+1qfubUt+pYEdpVxN9/LH+sMkexp825JAoXlHfwwZFyUUzPE3DxPzS534gJmkpO",
	"fqJWO62WW9QfBbfVeen1MU6rfpg8FP3+3cbUsMmT2dTWemKdlHovASJBRUHsVENVNUSd41deMVHKBIl4",
	"3s4mXxfJm9cmGgfB4SthQZ5nGWL3zsYceoddSkg5ApMH/QpMq7aR8daTaRnnBZsBKgabEPFlk3VlPyVF",
	"deDsOP2roaDIGeF24l5RwHIpqoOCYaqqeHehh5py3tqTu9qavK+kBepccfic2SEK//DDJIARlAYc2A2w",
	"APR6Q5hnhQn4npd/htHfffOuYne8eraV/Ua2R0Xn4pD3NcfL6Y2bhHtqE7oTqVYz6/D1qkDVDWt37C/n",
	"vpLQXz7hdUX+irCbePc1lemN+x0e2IX9Lz/sr3FNi17oG/M7LPLyQn5XMexUgqsSxoz3HRbZhftuuP8a",
	"2K/mhkhqB/Vo36t79JEdkwdT3G1VNKrv6slUjHskQ28FY95AfwLKrhPOF+/LW5KpPfeJ5/XMekClFthy",
	"lc+g2BMMBH9enH0JlJsY0GmQc2ABQRnwNxtyl3TykHiYsaicm9Ij5m5lkZGtQldHXVN/U0Pf3FObki4O",
	"11BJFn8R6qbOETVm9JmGSREmdugiGd5JZKjxwS0W82CKUwGSmAEiiT6YApOZPwF0osYOTkGWZ2P0cJ0q",
	"h4X0GF+eAdRnsHtWT4/x6yZPu0dXTp7SydYxxFtTc8DrNT4BXo7rQozbMaZOTzp4aD37qDiUqXugeqX2",
	"iOZ6X8XYfe+BSp3Ozc6u1u1qReeMkdGum9fm/My4iZld6nm91POzkoohXKxbjluqec3WeC/mNz0s8tHF",
	"34GYIxHMUd1AIx7YU2r8Bpkf8qOLvwcb5Eeymd0lRAF3YmIQVTJb0aR7hQlSp2Ctep0eFtP3AkwUSs0S",
	"b1bpDmGrahaiPEtPctbG2rlFQGZAraLpEBJzhtNmgmIPgnqxwrK+hrZb9wqORW75MsnbFJmhTFY1BeVB",
	"Y6OIjJFCPnlYPW1zacSph9jogQ15hSKWG9HVLyHr5c8UIfnOx38NuTM+SvLMf2jtdhMBjTGE2sXIQcQu",
	"A/cSPP7mhH8/9Vx4O+o47ZXiTXXnx5UaQ4O61oO+YTE/Lxy0Z13nuSwPBk/emmKsU3T0stGInLCrID27",
	"CtLaRrD+nYFx6k+r7LYzhC/RED6HRsyO0tZgyzopk7JPK2NeB1JleLUDuQ0RepanUTyu2FUOHukhfEUS",
	"/UV4ofbMKysrpmKwmaxMHtxv/bT6pta4OR8USuqGQkH1HDzU4qCWfoG83dGb9U8VAvZ8/PWUHkv3pPr3",
	"sFpaLNWetufG7HTw69TBuXVYRtbBj9qrU2X4XdvOdt953DW+7NIBfRtfikLr02cHOtpntmE0d500b6KT",
	"ponjN7Ccj9NX4/D8rsVm12LzvFpsRtX/m4jio3bwVERy18yza+bZWjOPI6DrN/U8hpAuzbFkA6JJc77j",
	"oHBSHUb05t798Lyh8UShoTms84WFhC/hJNENojq9vb36mV0jxHX12Ky6iSNbHiBwa85FkxLMFJAqV2/O",
	"ytY3GyR65L4mfo0XxyB3xoDb85aLzxSrj7u5H2zS3wL2pD7pNfjrwY0fq6sf2axzr4iJifRS39mTuFve",
	"moJeXnHUb5eeT3+N/pLVBqf7vnxxPCreyygkoFUSO+znJF+kFJkislfiTjnPpcB9/euTEjVkPgktaKDn",
	"FodkNgjbVzWqELmNFcOoZ0R8AjKrfIvGMQpxzrj+SNAmjRjLkU9I6ga766s8cOf/lOMI+qfheGXNKK/h",
	"LIsaw7cKnqaiQJMH+8Ga9Zs27AoD+i52hb5doW+EZotmLm5tp2hslHj+3REvkZZJpbNhjMaGFY2zvd6E",
	"nZ7a6akRGhIenK+SLQund0CGqJiy6sea5Os2XhwbOZHh7rpXhsU6LJ4cy3br5AWkT+kVts/8QsWJdBKL",
	"WY9XObfYcV3Mc4ux4arckYxHeatsuVz+fwAAAP//Xztec8GTAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
