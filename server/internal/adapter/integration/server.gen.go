// Package integration provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package integration

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	"github.com/reearth/reearth-cms/server/pkg/id"
	. "github.com/reearth/reearth-cms/server/pkg/integrationapi"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// delete asset
	// (DELETE /assets/{assetId})
	AssetDelete(ctx echo.Context, assetId AssetIdParam) error
	// get asset
	// (GET /assets/{assetId})
	AssetGet(ctx echo.Context, assetId AssetIdParam) error
	// get asset comments
	// (GET /assets/{assetId}/comments)
	AssetCommentList(ctx echo.Context, assetId AssetIdParam) error
	// create asset comments
	// (POST /assets/{assetId}/comments)
	AssetCommentCreate(ctx echo.Context, assetId AssetIdParam) error
	// delete asset comments
	// (DELETE /assets/{assetId}/comments/{commentId})
	AssetCommentDelete(ctx echo.Context, assetId AssetIdParam, commentId CommentIdParam) error
	// Update AssetComment
	// (PATCH /assets/{assetId}/comments/{commentId})
	AssetCommentUpdate(ctx echo.Context, assetId AssetIdParam, commentId CommentIdParam) error
	// delete an item
	// (DELETE /items/{itemId})
	ItemDelete(ctx echo.Context, itemId ItemIdParam) error
	// Returns an item.
	// (GET /items/{itemId})
	ItemGet(ctx echo.Context, itemId ItemIdParam, params ItemGetParams) error
	// Update an item.
	// (PATCH /items/{itemId})
	ItemUpdate(ctx echo.Context, itemId ItemIdParam) error
	// get an item comment
	// (GET /items/{itemId}/comments)
	ItemCommentList(ctx echo.Context, itemId ItemIdParam) error
	// create an item comment
	// (POST /items/{itemId}/comments)
	ItemCommentCreate(ctx echo.Context, itemId ItemIdParam) error
	// delete item comment
	// (DELETE /items/{itemId}/comments/{commentId})
	ItemCommentDelete(ctx echo.Context, itemId ItemIdParam, commentId CommentIdParam) error
	// Update Item Comment
	// (PATCH /items/{itemId}/comments/{commentId})
	ItemCommentUpdate(ctx echo.Context, itemId ItemIdParam, commentId CommentIdParam) error
	// delete a model
	// (DELETE /models/{modelId})
	ModelDelete(ctx echo.Context, modelId ModelIdParam) error
	// Returns a model.
	// (GET /models/{modelId})
	ModelGet(ctx echo.Context, modelId ModelIdParam) error
	// Update a model.
	// (PATCH /models/{modelId})
	ModelUpdate(ctx echo.Context, modelId ModelIdParam) error
	// Copy schema and items of a selected model
	// (POST /models/{modelId}/copy)
	CopyModel(ctx echo.Context, modelId ModelIdParam) error
	// Import data under the selected model
	// (PUT /models/{modelId}/import)
	ModelImport(ctx echo.Context, modelId ModelIdParam) error
	// Returns a list of items.
	// (GET /models/{modelId}/items)
	ItemFilter(ctx echo.Context, modelId ModelIdParam, params ItemFilterParams) error
	// create an item
	// (POST /models/{modelId}/items)
	ItemCreate(ctx echo.Context, modelId ModelIdParam) error
	// Returns a CSV that has a list of items as features.
	// (GET /models/{modelId}/items.csv)
	ItemsAsCSV(ctx echo.Context, modelId ModelIdParam, params ItemsAsCSVParams) error
	// Returns a GeoJSON that has a list of items as features.
	// (GET /models/{modelId}/items.geojson)
	ItemsAsGeoJSON(ctx echo.Context, modelId ModelIdParam, params ItemsAsGeoJSONParams) error
	// Returns a metadata schema as json by model ID
	// (GET /models/{modelId}/metadata_schema.json)
	MetadataSchemaByModelAsJSON(ctx echo.Context, modelId ModelIdParam) error
	// Returns a schema as json by model ID
	// (GET /models/{modelId}/schema.json)
	SchemaByModelAsJSON(ctx echo.Context, modelId ModelIdParam) error
	// Returns a list of models.
	// (GET /projects/{projectIdOrAlias}/models)
	ModelFilter(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, params ModelFilterParams) error
	// create a model
	// (POST /projects/{projectIdOrAlias}/models)
	ModelCreate(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, params ModelCreateParams) error
	// Delete a model.
	// (DELETE /projects/{projectIdOrAlias}/models/{modelIdOrKey})
	ModelDeleteWithProject(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error
	// Returns a model.
	// (GET /projects/{projectIdOrAlias}/models/{modelIdOrKey})
	ModelGetWithProject(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error
	// Update a model.
	// (PATCH /projects/{projectIdOrAlias}/models/{modelIdOrKey})
	ModelUpdateWithProject(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error
	// create a field
	// (POST /projects/{projectIdOrAlias}/models/{modelIdOrKey}/fields)
	FieldCreateWithProject(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error
	// Delete a field.
	// (DELETE /projects/{projectIdOrAlias}/models/{modelIdOrKey}/fields/{fieldIdOrKey})
	FieldDeleteWithProject(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, fieldIdOrKey FieldIdOrKeyParam) error
	// update a field
	// (PATCH /projects/{projectIdOrAlias}/models/{modelIdOrKey}/fields/{fieldIdOrKey})
	FieldUpdateWithProject(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, fieldIdOrKey FieldIdOrKeyParam) error
	// Returns a list of items.
	// (GET /projects/{projectIdOrAlias}/models/{modelIdOrKey}/items)
	ItemFilterWithProject(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, params ItemFilterWithProjectParams) error
	// Create an Item.
	// (POST /projects/{projectIdOrAlias}/models/{modelIdOrKey}/items)
	ItemCreateWithProject(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error
	// Returns a CSV that has a list of items as features.
	// (GET /projects/{projectIdOrAlias}/models/{modelIdOrKey}/items.csv)
	ItemsWithProjectAsCSV(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, params ItemsWithProjectAsCSVParams) error
	// Returns a GeoJSON that has a list of items as features.
	// (GET /projects/{projectIdOrAlias}/models/{modelIdOrKey}/items.geojson)
	ItemsWithProjectAsGeoJSON(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, params ItemsWithProjectAsGeoJSONParams) error
	// Returns a metadata schema as json by project and model ID
	// (GET /projects/{projectIdOrAlias}/models/{modelIdOrKey}/metadata_schema.json)
	MetadataSchemaByModelWithProjectAsJSON(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error
	// Returns a schema as json by project and model ID
	// (GET /projects/{projectIdOrAlias}/models/{modelIdOrKey}/schema.json)
	SchemaByModelWithProjectAsJSON(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error
	// Returns a schema.
	// (GET /projects/{projectIdOrAlias}/schemata)
	SchemaFilter(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, params SchemaFilterParams) error
	// Returns a schema as json by project and schema ID
	// (GET /projects/{projectIdOrAlias}/schemata/{schemaId}/schema.json)
	SchemaByIDWithProjectAsJSON(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, schemaId SchemaIdParam) error
	// Returns a list of assets.
	// (GET /projects/{projectId}/assets)
	AssetFilter(ctx echo.Context, projectId ProjectIdParam, params AssetFilterParams) error
	// Create an new asset.
	// (POST /projects/{projectId}/assets)
	AssetCreate(ctx echo.Context, projectId ProjectIdParam) error
	// Upload an asset.
	// (POST /projects/{projectId}/assets/uploads)
	AssetUploadCreate(ctx echo.Context, projectId ProjectIdParam) error
	// create a field
	// (POST /schemata/{schemaId}/fields)
	FieldCreate(ctx echo.Context, schemaId SchemaIdParam) error
	// delete a field
	// (DELETE /schemata/{schemaId}/fields/{fieldIdOrKey})
	FieldDelete(ctx echo.Context, schemaId SchemaIdParam, fieldIdOrKey FieldIdOrKeyParam) error
	// update a field
	// (PATCH /schemata/{schemaId}/fields/{fieldIdOrKey})
	FieldUpdate(ctx echo.Context, schemaId SchemaIdParam, fieldIdOrKey FieldIdOrKeyParam) error
	// Returns a schema as json by schema ID
	// (GET /schemata/{schemaId}/schema.json)
	SchemaByIDAsJSON(ctx echo.Context, schemaId SchemaIdParam) error
	// Returns a list of projects.
	// (GET /{workspaceId}/projects)
	ProjectFilter(ctx echo.Context, workspaceId WorkspaceIdParam, params ProjectFilterParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AssetDelete converts echo context to params.
func (w *ServerInterfaceWrapper) AssetDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "assetId" -------------
	var assetId AssetIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "assetId", ctx.Param("assetId"), &assetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetDelete(ctx, assetId)
	return err
}

// AssetGet converts echo context to params.
func (w *ServerInterfaceWrapper) AssetGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "assetId" -------------
	var assetId AssetIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "assetId", ctx.Param("assetId"), &assetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetGet(ctx, assetId)
	return err
}

// AssetCommentList converts echo context to params.
func (w *ServerInterfaceWrapper) AssetCommentList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "assetId" -------------
	var assetId AssetIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "assetId", ctx.Param("assetId"), &assetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetCommentList(ctx, assetId)
	return err
}

// AssetCommentCreate converts echo context to params.
func (w *ServerInterfaceWrapper) AssetCommentCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "assetId" -------------
	var assetId AssetIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "assetId", ctx.Param("assetId"), &assetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetCommentCreate(ctx, assetId)
	return err
}

// AssetCommentDelete converts echo context to params.
func (w *ServerInterfaceWrapper) AssetCommentDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "assetId" -------------
	var assetId AssetIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "assetId", ctx.Param("assetId"), &assetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetId: %s", err))
	}

	// ------------- Path parameter "commentId" -------------
	var commentId CommentIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "commentId", ctx.Param("commentId"), &commentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commentId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetCommentDelete(ctx, assetId, commentId)
	return err
}

// AssetCommentUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) AssetCommentUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "assetId" -------------
	var assetId AssetIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "assetId", ctx.Param("assetId"), &assetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetId: %s", err))
	}

	// ------------- Path parameter "commentId" -------------
	var commentId CommentIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "commentId", ctx.Param("commentId"), &commentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commentId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetCommentUpdate(ctx, assetId, commentId)
	return err
}

// ItemDelete converts echo context to params.
func (w *ServerInterfaceWrapper) ItemDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId ItemIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", ctx.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemDelete(ctx, itemId)
	return err
}

// ItemGet converts echo context to params.
func (w *ServerInterfaceWrapper) ItemGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId ItemIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", ctx.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ItemGetParams
	// ------------- Optional query parameter "ref" -------------

	err = runtime.BindQueryParameter("form", true, false, "ref", ctx.QueryParams(), &params.Ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	// ------------- Optional query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, false, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemGet(ctx, itemId, params)
	return err
}

// ItemUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ItemUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId ItemIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", ctx.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemUpdate(ctx, itemId)
	return err
}

// ItemCommentList converts echo context to params.
func (w *ServerInterfaceWrapper) ItemCommentList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId ItemIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", ctx.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemCommentList(ctx, itemId)
	return err
}

// ItemCommentCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ItemCommentCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId ItemIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", ctx.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemCommentCreate(ctx, itemId)
	return err
}

// ItemCommentDelete converts echo context to params.
func (w *ServerInterfaceWrapper) ItemCommentDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId ItemIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", ctx.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	// ------------- Path parameter "commentId" -------------
	var commentId CommentIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "commentId", ctx.Param("commentId"), &commentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commentId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemCommentDelete(ctx, itemId, commentId)
	return err
}

// ItemCommentUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ItemCommentUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId ItemIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", ctx.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	// ------------- Path parameter "commentId" -------------
	var commentId CommentIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "commentId", ctx.Param("commentId"), &commentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commentId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemCommentUpdate(ctx, itemId, commentId)
	return err
}

// ModelDelete converts echo context to params.
func (w *ServerInterfaceWrapper) ModelDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "modelId" -------------
	var modelId ModelIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelId", ctx.Param("modelId"), &modelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ModelDelete(ctx, modelId)
	return err
}

// ModelGet converts echo context to params.
func (w *ServerInterfaceWrapper) ModelGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "modelId" -------------
	var modelId ModelIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelId", ctx.Param("modelId"), &modelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ModelGet(ctx, modelId)
	return err
}

// ModelUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ModelUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "modelId" -------------
	var modelId ModelIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelId", ctx.Param("modelId"), &modelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ModelUpdate(ctx, modelId)
	return err
}

// CopyModel converts echo context to params.
func (w *ServerInterfaceWrapper) CopyModel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "modelId" -------------
	var modelId ModelIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelId", ctx.Param("modelId"), &modelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CopyModel(ctx, modelId)
	return err
}

// ModelImport converts echo context to params.
func (w *ServerInterfaceWrapper) ModelImport(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "modelId" -------------
	var modelId ModelIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelId", ctx.Param("modelId"), &modelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ModelImport(ctx, modelId)
	return err
}

// ItemFilter converts echo context to params.
func (w *ServerInterfaceWrapper) ItemFilter(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "modelId" -------------
	var modelId ModelIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelId", ctx.Param("modelId"), &modelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ItemFilterParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "dir" -------------

	err = runtime.BindQueryParameter("form", true, false, "dir", ctx.QueryParams(), &params.Dir)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dir: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// ------------- Optional query parameter "ref" -------------

	err = runtime.BindQueryParameter("form", true, false, "ref", ctx.QueryParams(), &params.Ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	// ------------- Optional query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, false, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// ------------- Optional query parameter "keyword" -------------

	err = runtime.BindQueryParameter("form", true, false, "keyword", ctx.QueryParams(), &params.Keyword)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keyword: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemFilter(ctx, modelId, params)
	return err
}

// ItemCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ItemCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "modelId" -------------
	var modelId ModelIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelId", ctx.Param("modelId"), &modelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemCreate(ctx, modelId)
	return err
}

// ItemsAsCSV converts echo context to params.
func (w *ServerInterfaceWrapper) ItemsAsCSV(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "modelId" -------------
	var modelId ModelIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelId", ctx.Param("modelId"), &modelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ItemsAsCSVParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// ------------- Optional query parameter "ref" -------------

	err = runtime.BindQueryParameter("form", true, false, "ref", ctx.QueryParams(), &params.Ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemsAsCSV(ctx, modelId, params)
	return err
}

// ItemsAsGeoJSON converts echo context to params.
func (w *ServerInterfaceWrapper) ItemsAsGeoJSON(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "modelId" -------------
	var modelId ModelIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelId", ctx.Param("modelId"), &modelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ItemsAsGeoJSONParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// ------------- Optional query parameter "ref" -------------

	err = runtime.BindQueryParameter("form", true, false, "ref", ctx.QueryParams(), &params.Ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemsAsGeoJSON(ctx, modelId, params)
	return err
}

// MetadataSchemaByModelAsJSON converts echo context to params.
func (w *ServerInterfaceWrapper) MetadataSchemaByModelAsJSON(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "modelId" -------------
	var modelId ModelIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelId", ctx.Param("modelId"), &modelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MetadataSchemaByModelAsJSON(ctx, modelId)
	return err
}

// SchemaByModelAsJSON converts echo context to params.
func (w *ServerInterfaceWrapper) SchemaByModelAsJSON(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "modelId" -------------
	var modelId ModelIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelId", ctx.Param("modelId"), &modelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SchemaByModelAsJSON(ctx, modelId)
	return err
}

// ModelFilter converts echo context to params.
func (w *ServerInterfaceWrapper) ModelFilter(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ModelFilterParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ModelFilter(ctx, projectIdOrAlias, params)
	return err
}

// ModelCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ModelCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ModelCreateParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ModelCreate(ctx, projectIdOrAlias, params)
	return err
}

// ModelDeleteWithProject converts echo context to params.
func (w *ServerInterfaceWrapper) ModelDeleteWithProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ModelDeleteWithProject(ctx, projectIdOrAlias, modelIdOrKey)
	return err
}

// ModelGetWithProject converts echo context to params.
func (w *ServerInterfaceWrapper) ModelGetWithProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ModelGetWithProject(ctx, projectIdOrAlias, modelIdOrKey)
	return err
}

// ModelUpdateWithProject converts echo context to params.
func (w *ServerInterfaceWrapper) ModelUpdateWithProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ModelUpdateWithProject(ctx, projectIdOrAlias, modelIdOrKey)
	return err
}

// FieldCreateWithProject converts echo context to params.
func (w *ServerInterfaceWrapper) FieldCreateWithProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FieldCreateWithProject(ctx, projectIdOrAlias, modelIdOrKey)
	return err
}

// FieldDeleteWithProject converts echo context to params.
func (w *ServerInterfaceWrapper) FieldDeleteWithProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	// ------------- Path parameter "fieldIdOrKey" -------------
	var fieldIdOrKey FieldIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "fieldIdOrKey", ctx.Param("fieldIdOrKey"), &fieldIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fieldIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FieldDeleteWithProject(ctx, projectIdOrAlias, modelIdOrKey, fieldIdOrKey)
	return err
}

// FieldUpdateWithProject converts echo context to params.
func (w *ServerInterfaceWrapper) FieldUpdateWithProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	// ------------- Path parameter "fieldIdOrKey" -------------
	var fieldIdOrKey FieldIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "fieldIdOrKey", ctx.Param("fieldIdOrKey"), &fieldIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fieldIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FieldUpdateWithProject(ctx, projectIdOrAlias, modelIdOrKey, fieldIdOrKey)
	return err
}

// ItemFilterWithProject converts echo context to params.
func (w *ServerInterfaceWrapper) ItemFilterWithProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ItemFilterWithProjectParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "dir" -------------

	err = runtime.BindQueryParameter("form", true, false, "dir", ctx.QueryParams(), &params.Dir)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dir: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// ------------- Optional query parameter "ref" -------------

	err = runtime.BindQueryParameter("form", true, false, "ref", ctx.QueryParams(), &params.Ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	// ------------- Optional query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, false, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemFilterWithProject(ctx, projectIdOrAlias, modelIdOrKey, params)
	return err
}

// ItemCreateWithProject converts echo context to params.
func (w *ServerInterfaceWrapper) ItemCreateWithProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemCreateWithProject(ctx, projectIdOrAlias, modelIdOrKey)
	return err
}

// ItemsWithProjectAsCSV converts echo context to params.
func (w *ServerInterfaceWrapper) ItemsWithProjectAsCSV(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ItemsWithProjectAsCSVParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// ------------- Optional query parameter "ref" -------------

	err = runtime.BindQueryParameter("form", true, false, "ref", ctx.QueryParams(), &params.Ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemsWithProjectAsCSV(ctx, projectIdOrAlias, modelIdOrKey, params)
	return err
}

// ItemsWithProjectAsGeoJSON converts echo context to params.
func (w *ServerInterfaceWrapper) ItemsWithProjectAsGeoJSON(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ItemsWithProjectAsGeoJSONParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// ------------- Optional query parameter "ref" -------------

	err = runtime.BindQueryParameter("form", true, false, "ref", ctx.QueryParams(), &params.Ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemsWithProjectAsGeoJSON(ctx, projectIdOrAlias, modelIdOrKey, params)
	return err
}

// MetadataSchemaByModelWithProjectAsJSON converts echo context to params.
func (w *ServerInterfaceWrapper) MetadataSchemaByModelWithProjectAsJSON(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MetadataSchemaByModelWithProjectAsJSON(ctx, projectIdOrAlias, modelIdOrKey)
	return err
}

// SchemaByModelWithProjectAsJSON converts echo context to params.
func (w *ServerInterfaceWrapper) SchemaByModelWithProjectAsJSON(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SchemaByModelWithProjectAsJSON(ctx, projectIdOrAlias, modelIdOrKey)
	return err
}

// SchemaFilter converts echo context to params.
func (w *ServerInterfaceWrapper) SchemaFilter(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SchemaFilterParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// ------------- Optional query parameter "keyword" -------------

	err = runtime.BindQueryParameter("form", true, false, "keyword", ctx.QueryParams(), &params.Keyword)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keyword: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SchemaFilter(ctx, projectIdOrAlias, params)
	return err
}

// SchemaByIDWithProjectAsJSON converts echo context to params.
func (w *ServerInterfaceWrapper) SchemaByIDWithProjectAsJSON(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "schemaId" -------------
	var schemaId SchemaIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "schemaId", ctx.Param("schemaId"), &schemaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter schemaId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SchemaByIDWithProjectAsJSON(ctx, projectIdOrAlias, schemaId)
	return err
}

// AssetFilter converts echo context to params.
func (w *ServerInterfaceWrapper) AssetFilter(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId ProjectIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", ctx.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssetFilterParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "dir" -------------

	err = runtime.BindQueryParameter("form", true, false, "dir", ctx.QueryParams(), &params.Dir)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dir: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// ------------- Optional query parameter "keyword" -------------

	err = runtime.BindQueryParameter("form", true, false, "keyword", ctx.QueryParams(), &params.Keyword)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keyword: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetFilter(ctx, projectId, params)
	return err
}

// AssetCreate converts echo context to params.
func (w *ServerInterfaceWrapper) AssetCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId ProjectIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", ctx.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetCreate(ctx, projectId)
	return err
}

// AssetUploadCreate converts echo context to params.
func (w *ServerInterfaceWrapper) AssetUploadCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId ProjectIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", ctx.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetUploadCreate(ctx, projectId)
	return err
}

// FieldCreate converts echo context to params.
func (w *ServerInterfaceWrapper) FieldCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "schemaId" -------------
	var schemaId SchemaIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "schemaId", ctx.Param("schemaId"), &schemaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter schemaId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FieldCreate(ctx, schemaId)
	return err
}

// FieldDelete converts echo context to params.
func (w *ServerInterfaceWrapper) FieldDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "schemaId" -------------
	var schemaId SchemaIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "schemaId", ctx.Param("schemaId"), &schemaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter schemaId: %s", err))
	}

	// ------------- Path parameter "fieldIdOrKey" -------------
	var fieldIdOrKey FieldIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "fieldIdOrKey", ctx.Param("fieldIdOrKey"), &fieldIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fieldIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FieldDelete(ctx, schemaId, fieldIdOrKey)
	return err
}

// FieldUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) FieldUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "schemaId" -------------
	var schemaId SchemaIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "schemaId", ctx.Param("schemaId"), &schemaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter schemaId: %s", err))
	}

	// ------------- Path parameter "fieldIdOrKey" -------------
	var fieldIdOrKey FieldIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "fieldIdOrKey", ctx.Param("fieldIdOrKey"), &fieldIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fieldIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FieldUpdate(ctx, schemaId, fieldIdOrKey)
	return err
}

// SchemaByIDAsJSON converts echo context to params.
func (w *ServerInterfaceWrapper) SchemaByIDAsJSON(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "schemaId" -------------
	var schemaId SchemaIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "schemaId", ctx.Param("schemaId"), &schemaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter schemaId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SchemaByIDAsJSON(ctx, schemaId)
	return err
}

// ProjectFilter converts echo context to params.
func (w *ServerInterfaceWrapper) ProjectFilter(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceId" -------------
	var workspaceId WorkspaceIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceId", ctx.Param("workspaceId"), &workspaceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProjectFilterParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProjectFilter(ctx, workspaceId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/assets/:assetId", wrapper.AssetDelete)
	router.GET(baseURL+"/assets/:assetId", wrapper.AssetGet)
	router.GET(baseURL+"/assets/:assetId/comments", wrapper.AssetCommentList)
	router.POST(baseURL+"/assets/:assetId/comments", wrapper.AssetCommentCreate)
	router.DELETE(baseURL+"/assets/:assetId/comments/:commentId", wrapper.AssetCommentDelete)
	router.PATCH(baseURL+"/assets/:assetId/comments/:commentId", wrapper.AssetCommentUpdate)
	router.DELETE(baseURL+"/items/:itemId", wrapper.ItemDelete)
	router.GET(baseURL+"/items/:itemId", wrapper.ItemGet)
	router.PATCH(baseURL+"/items/:itemId", wrapper.ItemUpdate)
	router.GET(baseURL+"/items/:itemId/comments", wrapper.ItemCommentList)
	router.POST(baseURL+"/items/:itemId/comments", wrapper.ItemCommentCreate)
	router.DELETE(baseURL+"/items/:itemId/comments/:commentId", wrapper.ItemCommentDelete)
	router.PATCH(baseURL+"/items/:itemId/comments/:commentId", wrapper.ItemCommentUpdate)
	router.DELETE(baseURL+"/models/:modelId", wrapper.ModelDelete)
	router.GET(baseURL+"/models/:modelId", wrapper.ModelGet)
	router.PATCH(baseURL+"/models/:modelId", wrapper.ModelUpdate)
	router.POST(baseURL+"/models/:modelId/copy", wrapper.CopyModel)
	router.PUT(baseURL+"/models/:modelId/import", wrapper.ModelImport)
	router.GET(baseURL+"/models/:modelId/items", wrapper.ItemFilter)
	router.POST(baseURL+"/models/:modelId/items", wrapper.ItemCreate)
	router.GET(baseURL+"/models/:modelId/items.csv", wrapper.ItemsAsCSV)
	router.GET(baseURL+"/models/:modelId/items.geojson", wrapper.ItemsAsGeoJSON)
	router.GET(baseURL+"/models/:modelId/metadata_schema.json", wrapper.MetadataSchemaByModelAsJSON)
	router.GET(baseURL+"/models/:modelId/schema.json", wrapper.SchemaByModelAsJSON)
	router.GET(baseURL+"/projects/:projectIdOrAlias/models", wrapper.ModelFilter)
	router.POST(baseURL+"/projects/:projectIdOrAlias/models", wrapper.ModelCreate)
	router.DELETE(baseURL+"/projects/:projectIdOrAlias/models/:modelIdOrKey", wrapper.ModelDeleteWithProject)
	router.GET(baseURL+"/projects/:projectIdOrAlias/models/:modelIdOrKey", wrapper.ModelGetWithProject)
	router.PATCH(baseURL+"/projects/:projectIdOrAlias/models/:modelIdOrKey", wrapper.ModelUpdateWithProject)
	router.POST(baseURL+"/projects/:projectIdOrAlias/models/:modelIdOrKey/fields", wrapper.FieldCreateWithProject)
	router.DELETE(baseURL+"/projects/:projectIdOrAlias/models/:modelIdOrKey/fields/:fieldIdOrKey", wrapper.FieldDeleteWithProject)
	router.PATCH(baseURL+"/projects/:projectIdOrAlias/models/:modelIdOrKey/fields/:fieldIdOrKey", wrapper.FieldUpdateWithProject)
	router.GET(baseURL+"/projects/:projectIdOrAlias/models/:modelIdOrKey/items", wrapper.ItemFilterWithProject)
	router.POST(baseURL+"/projects/:projectIdOrAlias/models/:modelIdOrKey/items", wrapper.ItemCreateWithProject)
	router.GET(baseURL+"/projects/:projectIdOrAlias/models/:modelIdOrKey/items.csv", wrapper.ItemsWithProjectAsCSV)
	router.GET(baseURL+"/projects/:projectIdOrAlias/models/:modelIdOrKey/items.geojson", wrapper.ItemsWithProjectAsGeoJSON)
	router.GET(baseURL+"/projects/:projectIdOrAlias/models/:modelIdOrKey/metadata_schema.json", wrapper.MetadataSchemaByModelWithProjectAsJSON)
	router.GET(baseURL+"/projects/:projectIdOrAlias/models/:modelIdOrKey/schema.json", wrapper.SchemaByModelWithProjectAsJSON)
	router.GET(baseURL+"/projects/:projectIdOrAlias/schemata", wrapper.SchemaFilter)
	router.GET(baseURL+"/projects/:projectIdOrAlias/schemata/:schemaId/schema.json", wrapper.SchemaByIDWithProjectAsJSON)
	router.GET(baseURL+"/projects/:projectId/assets", wrapper.AssetFilter)
	router.POST(baseURL+"/projects/:projectId/assets", wrapper.AssetCreate)
	router.POST(baseURL+"/projects/:projectId/assets/uploads", wrapper.AssetUploadCreate)
	router.POST(baseURL+"/schemata/:schemaId/fields", wrapper.FieldCreate)
	router.DELETE(baseURL+"/schemata/:schemaId/fields/:fieldIdOrKey", wrapper.FieldDelete)
	router.PATCH(baseURL+"/schemata/:schemaId/fields/:fieldIdOrKey", wrapper.FieldUpdate)
	router.GET(baseURL+"/schemata/:schemaId/schema.json", wrapper.SchemaByIDAsJSON)
	router.GET(baseURL+"/:workspaceId/projects", wrapper.ProjectFilter)

}

type NotFoundErrorResponse struct {
}

type UnauthorizedErrorResponse struct {
}

type AssetDeleteRequestObject struct {
	AssetId AssetIdParam `json:"assetId"`
}

type AssetDeleteResponseObject interface {
	VisitAssetDeleteResponse(w http.ResponseWriter) error
}

type AssetDelete200JSONResponse struct {
	Id *id.AssetID `json:"id,omitempty"`
}

func (response AssetDelete200JSONResponse) VisitAssetDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetDelete400Response struct {
}

func (response AssetDelete400Response) VisitAssetDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetDelete401Response = UnauthorizedErrorResponse

func (response AssetDelete401Response) VisitAssetDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetDelete404Response struct {
}

func (response AssetDelete404Response) VisitAssetDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetGetRequestObject struct {
	AssetId AssetIdParam `json:"assetId"`
}

type AssetGetResponseObject interface {
	VisitAssetGetResponse(w http.ResponseWriter) error
}

type AssetGet200JSONResponse Asset

func (response AssetGet200JSONResponse) VisitAssetGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetGet400Response struct {
}

func (response AssetGet400Response) VisitAssetGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetGet401Response = UnauthorizedErrorResponse

func (response AssetGet401Response) VisitAssetGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetGet404Response struct {
}

func (response AssetGet404Response) VisitAssetGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetCommentListRequestObject struct {
	AssetId AssetIdParam `json:"assetId"`
}

type AssetCommentListResponseObject interface {
	VisitAssetCommentListResponse(w http.ResponseWriter) error
}

type AssetCommentList200JSONResponse struct {
	Comments *[]Comment `json:"comments,omitempty"`
}

func (response AssetCommentList200JSONResponse) VisitAssetCommentListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetCommentList400Response struct {
}

func (response AssetCommentList400Response) VisitAssetCommentListResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetCommentList401Response = UnauthorizedErrorResponse

func (response AssetCommentList401Response) VisitAssetCommentListResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetCommentList404Response struct {
}

func (response AssetCommentList404Response) VisitAssetCommentListResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetCommentCreateRequestObject struct {
	AssetId AssetIdParam `json:"assetId"`
	Body    *AssetCommentCreateJSONRequestBody
}

type AssetCommentCreateResponseObject interface {
	VisitAssetCommentCreateResponse(w http.ResponseWriter) error
}

type AssetCommentCreate200JSONResponse Comment

func (response AssetCommentCreate200JSONResponse) VisitAssetCommentCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetCommentCreate400Response struct {
}

func (response AssetCommentCreate400Response) VisitAssetCommentCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetCommentCreate401Response = UnauthorizedErrorResponse

func (response AssetCommentCreate401Response) VisitAssetCommentCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetCommentCreate404Response struct {
}

func (response AssetCommentCreate404Response) VisitAssetCommentCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetCommentDeleteRequestObject struct {
	AssetId   AssetIdParam   `json:"assetId"`
	CommentId CommentIdParam `json:"commentId"`
}

type AssetCommentDeleteResponseObject interface {
	VisitAssetCommentDeleteResponse(w http.ResponseWriter) error
}

type AssetCommentDelete200JSONResponse struct {
	Id *id.CommentID `json:"id,omitempty"`
}

func (response AssetCommentDelete200JSONResponse) VisitAssetCommentDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetCommentDelete400Response struct {
}

func (response AssetCommentDelete400Response) VisitAssetCommentDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetCommentDelete401Response = UnauthorizedErrorResponse

func (response AssetCommentDelete401Response) VisitAssetCommentDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetCommentDelete404Response struct {
}

func (response AssetCommentDelete404Response) VisitAssetCommentDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetCommentUpdateRequestObject struct {
	AssetId   AssetIdParam   `json:"assetId"`
	CommentId CommentIdParam `json:"commentId"`
	Body      *AssetCommentUpdateJSONRequestBody
}

type AssetCommentUpdateResponseObject interface {
	VisitAssetCommentUpdateResponse(w http.ResponseWriter) error
}

type AssetCommentUpdate200JSONResponse Comment

func (response AssetCommentUpdate200JSONResponse) VisitAssetCommentUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetCommentUpdate400Response struct {
}

func (response AssetCommentUpdate400Response) VisitAssetCommentUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetCommentUpdate401Response = UnauthorizedErrorResponse

func (response AssetCommentUpdate401Response) VisitAssetCommentUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetCommentUpdate404Response struct {
}

func (response AssetCommentUpdate404Response) VisitAssetCommentUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemDeleteRequestObject struct {
	ItemId ItemIdParam `json:"itemId"`
}

type ItemDeleteResponseObject interface {
	VisitItemDeleteResponse(w http.ResponseWriter) error
}

type ItemDelete200JSONResponse struct {
	Id *id.ItemID `json:"id,omitempty"`
}

func (response ItemDelete200JSONResponse) VisitItemDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemDelete400Response struct {
}

func (response ItemDelete400Response) VisitItemDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemDelete401Response = UnauthorizedErrorResponse

func (response ItemDelete401Response) VisitItemDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemDelete404Response struct {
}

func (response ItemDelete404Response) VisitItemDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemGetRequestObject struct {
	ItemId ItemIdParam `json:"itemId"`
	Params ItemGetParams
}

type ItemGetResponseObject interface {
	VisitItemGetResponse(w http.ResponseWriter) error
}

type ItemGet200JSONResponse VersionedItem

func (response ItemGet200JSONResponse) VisitItemGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemGet400Response struct {
}

func (response ItemGet400Response) VisitItemGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemGet401Response = UnauthorizedErrorResponse

func (response ItemGet401Response) VisitItemGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemGet404Response struct {
}

func (response ItemGet404Response) VisitItemGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemGet500Response struct {
}

func (response ItemGet500Response) VisitItemGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ItemUpdateRequestObject struct {
	ItemId ItemIdParam `json:"itemId"`
	Body   *ItemUpdateJSONRequestBody
}

type ItemUpdateResponseObject interface {
	VisitItemUpdateResponse(w http.ResponseWriter) error
}

type ItemUpdate200JSONResponse VersionedItem

func (response ItemUpdate200JSONResponse) VisitItemUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemUpdate400Response struct {
}

func (response ItemUpdate400Response) VisitItemUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemUpdate401Response = UnauthorizedErrorResponse

func (response ItemUpdate401Response) VisitItemUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemUpdate404Response struct {
}

func (response ItemUpdate404Response) VisitItemUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemUpdate500Response struct {
}

func (response ItemUpdate500Response) VisitItemUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ItemCommentListRequestObject struct {
	ItemId ItemIdParam `json:"itemId"`
}

type ItemCommentListResponseObject interface {
	VisitItemCommentListResponse(w http.ResponseWriter) error
}

type ItemCommentList200JSONResponse struct {
	Comments *[]Comment `json:"comments,omitempty"`
}

func (response ItemCommentList200JSONResponse) VisitItemCommentListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemCommentList400Response struct {
}

func (response ItemCommentList400Response) VisitItemCommentListResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemCommentList401Response = UnauthorizedErrorResponse

func (response ItemCommentList401Response) VisitItemCommentListResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemCommentList404Response struct {
}

func (response ItemCommentList404Response) VisitItemCommentListResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemCommentCreateRequestObject struct {
	ItemId ItemIdParam `json:"itemId"`
	Body   *ItemCommentCreateJSONRequestBody
}

type ItemCommentCreateResponseObject interface {
	VisitItemCommentCreateResponse(w http.ResponseWriter) error
}

type ItemCommentCreate200JSONResponse Comment

func (response ItemCommentCreate200JSONResponse) VisitItemCommentCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemCommentCreate400Response struct {
}

func (response ItemCommentCreate400Response) VisitItemCommentCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemCommentCreate401Response = UnauthorizedErrorResponse

func (response ItemCommentCreate401Response) VisitItemCommentCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemCommentCreate404Response struct {
}

func (response ItemCommentCreate404Response) VisitItemCommentCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemCommentDeleteRequestObject struct {
	ItemId    ItemIdParam    `json:"itemId"`
	CommentId CommentIdParam `json:"commentId"`
}

type ItemCommentDeleteResponseObject interface {
	VisitItemCommentDeleteResponse(w http.ResponseWriter) error
}

type ItemCommentDelete200JSONResponse struct {
	Id *id.CommentID `json:"id,omitempty"`
}

func (response ItemCommentDelete200JSONResponse) VisitItemCommentDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemCommentDelete400Response struct {
}

func (response ItemCommentDelete400Response) VisitItemCommentDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemCommentDelete401Response = UnauthorizedErrorResponse

func (response ItemCommentDelete401Response) VisitItemCommentDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemCommentDelete404Response struct {
}

func (response ItemCommentDelete404Response) VisitItemCommentDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemCommentUpdateRequestObject struct {
	ItemId    ItemIdParam    `json:"itemId"`
	CommentId CommentIdParam `json:"commentId"`
	Body      *ItemCommentUpdateJSONRequestBody
}

type ItemCommentUpdateResponseObject interface {
	VisitItemCommentUpdateResponse(w http.ResponseWriter) error
}

type ItemCommentUpdate200JSONResponse Comment

func (response ItemCommentUpdate200JSONResponse) VisitItemCommentUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemCommentUpdate400Response struct {
}

func (response ItemCommentUpdate400Response) VisitItemCommentUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemCommentUpdate401Response = UnauthorizedErrorResponse

func (response ItemCommentUpdate401Response) VisitItemCommentUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemCommentUpdate404Response struct {
}

func (response ItemCommentUpdate404Response) VisitItemCommentUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ModelDeleteRequestObject struct {
	ModelId ModelIdParam `json:"modelId"`
}

type ModelDeleteResponseObject interface {
	VisitModelDeleteResponse(w http.ResponseWriter) error
}

type ModelDelete200JSONResponse struct {
	Id *id.ModelID `json:"id,omitempty"`
}

func (response ModelDelete200JSONResponse) VisitModelDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModelDelete400Response struct {
}

func (response ModelDelete400Response) VisitModelDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ModelDelete401Response = UnauthorizedErrorResponse

func (response ModelDelete401Response) VisitModelDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ModelGetRequestObject struct {
	ModelId ModelIdParam `json:"modelId"`
}

type ModelGetResponseObject interface {
	VisitModelGetResponse(w http.ResponseWriter) error
}

type ModelGet200JSONResponse Model

func (response ModelGet200JSONResponse) VisitModelGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModelGet400Response struct {
}

func (response ModelGet400Response) VisitModelGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ModelGet401Response = UnauthorizedErrorResponse

func (response ModelGet401Response) VisitModelGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ModelGet404Response struct {
}

func (response ModelGet404Response) VisitModelGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ModelGet500Response struct {
}

func (response ModelGet500Response) VisitModelGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ModelUpdateRequestObject struct {
	ModelId ModelIdParam `json:"modelId"`
	Body    *ModelUpdateJSONRequestBody
}

type ModelUpdateResponseObject interface {
	VisitModelUpdateResponse(w http.ResponseWriter) error
}

type ModelUpdate200JSONResponse Model

func (response ModelUpdate200JSONResponse) VisitModelUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModelUpdate400Response struct {
}

func (response ModelUpdate400Response) VisitModelUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ModelUpdate401Response = UnauthorizedErrorResponse

func (response ModelUpdate401Response) VisitModelUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CopyModelRequestObject struct {
	ModelId ModelIdParam `json:"modelId"`
	Body    *CopyModelJSONRequestBody
}

type CopyModelResponseObject interface {
	VisitCopyModelResponse(w http.ResponseWriter) error
}

type CopyModel200JSONResponse Model

func (response CopyModel200JSONResponse) VisitCopyModelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CopyModel400Response struct {
}

func (response CopyModel400Response) VisitCopyModelResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CopyModel401Response = UnauthorizedErrorResponse

func (response CopyModel401Response) VisitCopyModelResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CopyModel404Response = NotFoundErrorResponse

func (response CopyModel404Response) VisitCopyModelResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type CopyModel500Response struct {
}

func (response CopyModel500Response) VisitCopyModelResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ModelImportRequestObject struct {
	ModelId       ModelIdParam `json:"modelId"`
	JSONBody      *ModelImportJSONRequestBody
	MultipartBody *multipart.Reader
}

type ModelImportResponseObject interface {
	VisitModelImportResponse(w http.ResponseWriter) error
}

type ModelImport200JSONResponse struct {
	IgnoredCount  *int           `json:"ignoredCount,omitempty"`
	InsertedCount *int           `json:"insertedCount,omitempty"`
	ItemsCount    *int           `json:"itemsCount,omitempty"`
	ModelId       *id.ModelID    `json:"modelId,omitempty"`
	NewFields     *[]SchemaField `json:"newFields,omitempty"`
	UpdatedCount  *int           `json:"updatedCount,omitempty"`
}

func (response ModelImport200JSONResponse) VisitModelImportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModelImport400Response struct {
}

func (response ModelImport400Response) VisitModelImportResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ModelImport401Response = UnauthorizedErrorResponse

func (response ModelImport401Response) VisitModelImportResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ModelImport500Response struct {
}

func (response ModelImport500Response) VisitModelImportResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ItemFilterRequestObject struct {
	ModelId ModelIdParam `json:"modelId"`
	Params  ItemFilterParams
	Body    *ItemFilterJSONRequestBody
}

type ItemFilterResponseObject interface {
	VisitItemFilterResponse(w http.ResponseWriter) error
}

type ItemFilter200JSONResponse struct {
	Items      *[]VersionedItem `json:"items,omitempty"`
	Page       *int             `json:"page,omitempty"`
	PerPage    *int             `json:"perPage,omitempty"`
	TotalCount *int             `json:"totalCount,omitempty"`
}

func (response ItemFilter200JSONResponse) VisitItemFilterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemFilter400Response struct {
}

func (response ItemFilter400Response) VisitItemFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemFilter401Response = UnauthorizedErrorResponse

func (response ItemFilter401Response) VisitItemFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemFilter404Response struct {
}

func (response ItemFilter404Response) VisitItemFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemFilter500Response struct {
}

func (response ItemFilter500Response) VisitItemFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ItemCreateRequestObject struct {
	ModelId ModelIdParam `json:"modelId"`
	Body    *ItemCreateJSONRequestBody
}

type ItemCreateResponseObject interface {
	VisitItemCreateResponse(w http.ResponseWriter) error
}

type ItemCreate200JSONResponse VersionedItem

func (response ItemCreate200JSONResponse) VisitItemCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemCreate400Response struct {
}

func (response ItemCreate400Response) VisitItemCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemCreate401Response = UnauthorizedErrorResponse

func (response ItemCreate401Response) VisitItemCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemsAsCSVRequestObject struct {
	ModelId ModelIdParam `json:"modelId"`
	Params  ItemsAsCSVParams
}

type ItemsAsCSVResponseObject interface {
	VisitItemsAsCSVResponse(w http.ResponseWriter) error
}

type ItemsAsCSV200TextcsvResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response ItemsAsCSV200TextcsvResponse) VisitItemsAsCSVResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/csv")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type ItemsAsCSV400Response struct {
}

func (response ItemsAsCSV400Response) VisitItemsAsCSVResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemsAsCSV401Response = UnauthorizedErrorResponse

func (response ItemsAsCSV401Response) VisitItemsAsCSVResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemsAsCSV404Response struct {
}

func (response ItemsAsCSV404Response) VisitItemsAsCSVResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemsAsCSV500Response struct {
}

func (response ItemsAsCSV500Response) VisitItemsAsCSVResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ItemsAsGeoJSONRequestObject struct {
	ModelId ModelIdParam `json:"modelId"`
	Params  ItemsAsGeoJSONParams
}

type ItemsAsGeoJSONResponseObject interface {
	VisitItemsAsGeoJSONResponse(w http.ResponseWriter) error
}

type ItemsAsGeoJSON200JSONResponse GeoJSON

func (response ItemsAsGeoJSON200JSONResponse) VisitItemsAsGeoJSONResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemsAsGeoJSON400Response struct {
}

func (response ItemsAsGeoJSON400Response) VisitItemsAsGeoJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemsAsGeoJSON401Response = UnauthorizedErrorResponse

func (response ItemsAsGeoJSON401Response) VisitItemsAsGeoJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemsAsGeoJSON404Response struct {
}

func (response ItemsAsGeoJSON404Response) VisitItemsAsGeoJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemsAsGeoJSON500Response struct {
}

func (response ItemsAsGeoJSON500Response) VisitItemsAsGeoJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type MetadataSchemaByModelAsJSONRequestObject struct {
	ModelId ModelIdParam `json:"modelId"`
}

type MetadataSchemaByModelAsJSONResponseObject interface {
	VisitMetadataSchemaByModelAsJSONResponse(w http.ResponseWriter) error
}

type MetadataSchemaByModelAsJSON200JSONResponse SchemaJSON

func (response MetadataSchemaByModelAsJSON200JSONResponse) VisitMetadataSchemaByModelAsJSONResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type MetadataSchemaByModelAsJSON400Response struct {
}

func (response MetadataSchemaByModelAsJSON400Response) VisitMetadataSchemaByModelAsJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type MetadataSchemaByModelAsJSON401Response = UnauthorizedErrorResponse

func (response MetadataSchemaByModelAsJSON401Response) VisitMetadataSchemaByModelAsJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type MetadataSchemaByModelAsJSON404Response struct {
}

func (response MetadataSchemaByModelAsJSON404Response) VisitMetadataSchemaByModelAsJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type MetadataSchemaByModelAsJSON500Response struct {
}

func (response MetadataSchemaByModelAsJSON500Response) VisitMetadataSchemaByModelAsJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type SchemaByModelAsJSONRequestObject struct {
	ModelId ModelIdParam `json:"modelId"`
}

type SchemaByModelAsJSONResponseObject interface {
	VisitSchemaByModelAsJSONResponse(w http.ResponseWriter) error
}

type SchemaByModelAsJSON200JSONResponse SchemaJSON

func (response SchemaByModelAsJSON200JSONResponse) VisitSchemaByModelAsJSONResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SchemaByModelAsJSON400Response struct {
}

func (response SchemaByModelAsJSON400Response) VisitSchemaByModelAsJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type SchemaByModelAsJSON401Response = UnauthorizedErrorResponse

func (response SchemaByModelAsJSON401Response) VisitSchemaByModelAsJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type SchemaByModelAsJSON404Response struct {
}

func (response SchemaByModelAsJSON404Response) VisitSchemaByModelAsJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type SchemaByModelAsJSON500Response struct {
}

func (response SchemaByModelAsJSON500Response) VisitSchemaByModelAsJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ModelFilterRequestObject struct {
	ProjectIdOrAlias ProjectIdOrAliasParam `json:"projectIdOrAlias"`
	Params           ModelFilterParams
}

type ModelFilterResponseObject interface {
	VisitModelFilterResponse(w http.ResponseWriter) error
}

type ModelFilter200JSONResponse struct {
	Models     *[]Model `json:"models,omitempty"`
	Page       *int     `json:"page,omitempty"`
	PerPage    *int     `json:"perPage,omitempty"`
	TotalCount *int     `json:"totalCount,omitempty"`
}

func (response ModelFilter200JSONResponse) VisitModelFilterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModelFilter400Response struct {
}

func (response ModelFilter400Response) VisitModelFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ModelFilter401Response = UnauthorizedErrorResponse

func (response ModelFilter401Response) VisitModelFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ModelFilter404Response struct {
}

func (response ModelFilter404Response) VisitModelFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ModelFilter500Response struct {
}

func (response ModelFilter500Response) VisitModelFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ModelCreateRequestObject struct {
	ProjectIdOrAlias ProjectIdOrAliasParam `json:"projectIdOrAlias"`
	Params           ModelCreateParams
	Body             *ModelCreateJSONRequestBody
}

type ModelCreateResponseObject interface {
	VisitModelCreateResponse(w http.ResponseWriter) error
}

type ModelCreate200JSONResponse Model

func (response ModelCreate200JSONResponse) VisitModelCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModelCreate400Response struct {
}

func (response ModelCreate400Response) VisitModelCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ModelCreate401Response = UnauthorizedErrorResponse

func (response ModelCreate401Response) VisitModelCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ModelDeleteWithProjectRequestObject struct {
	ProjectIdOrAlias ProjectIdOrAliasParam `json:"projectIdOrAlias"`
	ModelIdOrKey     ModelIdOrKeyParam     `json:"modelIdOrKey"`
}

type ModelDeleteWithProjectResponseObject interface {
	VisitModelDeleteWithProjectResponse(w http.ResponseWriter) error
}

type ModelDeleteWithProject200JSONResponse struct {
	Id *id.ModelID `json:"id,omitempty"`
}

func (response ModelDeleteWithProject200JSONResponse) VisitModelDeleteWithProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModelDeleteWithProject400Response struct {
}

func (response ModelDeleteWithProject400Response) VisitModelDeleteWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ModelDeleteWithProject401Response = UnauthorizedErrorResponse

func (response ModelDeleteWithProject401Response) VisitModelDeleteWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ModelDeleteWithProject404Response struct {
}

func (response ModelDeleteWithProject404Response) VisitModelDeleteWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ModelDeleteWithProject500Response struct {
}

func (response ModelDeleteWithProject500Response) VisitModelDeleteWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ModelGetWithProjectRequestObject struct {
	ProjectIdOrAlias ProjectIdOrAliasParam `json:"projectIdOrAlias"`
	ModelIdOrKey     ModelIdOrKeyParam     `json:"modelIdOrKey"`
}

type ModelGetWithProjectResponseObject interface {
	VisitModelGetWithProjectResponse(w http.ResponseWriter) error
}

type ModelGetWithProject200JSONResponse Model

func (response ModelGetWithProject200JSONResponse) VisitModelGetWithProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModelGetWithProject400Response struct {
}

func (response ModelGetWithProject400Response) VisitModelGetWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ModelGetWithProject401Response = UnauthorizedErrorResponse

func (response ModelGetWithProject401Response) VisitModelGetWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ModelGetWithProject404Response struct {
}

func (response ModelGetWithProject404Response) VisitModelGetWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ModelGetWithProject500Response struct {
}

func (response ModelGetWithProject500Response) VisitModelGetWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ModelUpdateWithProjectRequestObject struct {
	ProjectIdOrAlias ProjectIdOrAliasParam `json:"projectIdOrAlias"`
	ModelIdOrKey     ModelIdOrKeyParam     `json:"modelIdOrKey"`
	Body             *ModelUpdateWithProjectJSONRequestBody
}

type ModelUpdateWithProjectResponseObject interface {
	VisitModelUpdateWithProjectResponse(w http.ResponseWriter) error
}

type ModelUpdateWithProject200JSONResponse Model

func (response ModelUpdateWithProject200JSONResponse) VisitModelUpdateWithProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModelUpdateWithProject400Response struct {
}

func (response ModelUpdateWithProject400Response) VisitModelUpdateWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ModelUpdateWithProject401Response = UnauthorizedErrorResponse

func (response ModelUpdateWithProject401Response) VisitModelUpdateWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ModelUpdateWithProject404Response struct {
}

func (response ModelUpdateWithProject404Response) VisitModelUpdateWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ModelUpdateWithProject500Response struct {
}

func (response ModelUpdateWithProject500Response) VisitModelUpdateWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type FieldCreateWithProjectRequestObject struct {
	ProjectIdOrAlias ProjectIdOrAliasParam `json:"projectIdOrAlias"`
	ModelIdOrKey     ModelIdOrKeyParam     `json:"modelIdOrKey"`
	Body             *FieldCreateWithProjectJSONRequestBody
}

type FieldCreateWithProjectResponseObject interface {
	VisitFieldCreateWithProjectResponse(w http.ResponseWriter) error
}

type FieldCreateWithProject200JSONResponse SchemaField

func (response FieldCreateWithProject200JSONResponse) VisitFieldCreateWithProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FieldCreateWithProject400Response struct {
}

func (response FieldCreateWithProject400Response) VisitFieldCreateWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type FieldCreateWithProject401Response = UnauthorizedErrorResponse

func (response FieldCreateWithProject401Response) VisitFieldCreateWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type FieldDeleteWithProjectRequestObject struct {
	ProjectIdOrAlias ProjectIdOrAliasParam `json:"projectIdOrAlias"`
	ModelIdOrKey     ModelIdOrKeyParam     `json:"modelIdOrKey"`
	FieldIdOrKey     FieldIdOrKeyParam     `json:"fieldIdOrKey"`
}

type FieldDeleteWithProjectResponseObject interface {
	VisitFieldDeleteWithProjectResponse(w http.ResponseWriter) error
}

type FieldDeleteWithProject200JSONResponse struct {
	Id *id.FieldID `json:"id,omitempty"`
}

func (response FieldDeleteWithProject200JSONResponse) VisitFieldDeleteWithProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FieldDeleteWithProject400Response struct {
}

func (response FieldDeleteWithProject400Response) VisitFieldDeleteWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type FieldDeleteWithProject401Response = UnauthorizedErrorResponse

func (response FieldDeleteWithProject401Response) VisitFieldDeleteWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type FieldDeleteWithProject404Response struct {
}

func (response FieldDeleteWithProject404Response) VisitFieldDeleteWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type FieldDeleteWithProject500Response struct {
}

func (response FieldDeleteWithProject500Response) VisitFieldDeleteWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type FieldUpdateWithProjectRequestObject struct {
	ProjectIdOrAlias ProjectIdOrAliasParam `json:"projectIdOrAlias"`
	ModelIdOrKey     ModelIdOrKeyParam     `json:"modelIdOrKey"`
	FieldIdOrKey     FieldIdOrKeyParam     `json:"fieldIdOrKey"`
	Body             *FieldUpdateWithProjectJSONRequestBody
}

type FieldUpdateWithProjectResponseObject interface {
	VisitFieldUpdateWithProjectResponse(w http.ResponseWriter) error
}

type FieldUpdateWithProject200JSONResponse SchemaField

func (response FieldUpdateWithProject200JSONResponse) VisitFieldUpdateWithProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FieldUpdateWithProject400Response struct {
}

func (response FieldUpdateWithProject400Response) VisitFieldUpdateWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type FieldUpdateWithProject401Response = UnauthorizedErrorResponse

func (response FieldUpdateWithProject401Response) VisitFieldUpdateWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemFilterWithProjectRequestObject struct {
	ProjectIdOrAlias ProjectIdOrAliasParam `json:"projectIdOrAlias"`
	ModelIdOrKey     ModelIdOrKeyParam     `json:"modelIdOrKey"`
	Params           ItemFilterWithProjectParams
}

type ItemFilterWithProjectResponseObject interface {
	VisitItemFilterWithProjectResponse(w http.ResponseWriter) error
}

type ItemFilterWithProject200JSONResponse struct {
	Items      *[]VersionedItem `json:"items,omitempty"`
	Page       *int             `json:"page,omitempty"`
	PerPage    *int             `json:"perPage,omitempty"`
	TotalCount *int             `json:"totalCount,omitempty"`
}

func (response ItemFilterWithProject200JSONResponse) VisitItemFilterWithProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemFilterWithProject400Response struct {
}

func (response ItemFilterWithProject400Response) VisitItemFilterWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemFilterWithProject401Response = UnauthorizedErrorResponse

func (response ItemFilterWithProject401Response) VisitItemFilterWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemFilterWithProject404Response struct {
}

func (response ItemFilterWithProject404Response) VisitItemFilterWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemFilterWithProject500Response struct {
}

func (response ItemFilterWithProject500Response) VisitItemFilterWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ItemCreateWithProjectRequestObject struct {
	ProjectIdOrAlias ProjectIdOrAliasParam `json:"projectIdOrAlias"`
	ModelIdOrKey     ModelIdOrKeyParam     `json:"modelIdOrKey"`
	Body             *ItemCreateWithProjectJSONRequestBody
}

type ItemCreateWithProjectResponseObject interface {
	VisitItemCreateWithProjectResponse(w http.ResponseWriter) error
}

type ItemCreateWithProject200JSONResponse VersionedItem

func (response ItemCreateWithProject200JSONResponse) VisitItemCreateWithProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemCreateWithProject400Response struct {
}

func (response ItemCreateWithProject400Response) VisitItemCreateWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemCreateWithProject401Response = UnauthorizedErrorResponse

func (response ItemCreateWithProject401Response) VisitItemCreateWithProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemsWithProjectAsCSVRequestObject struct {
	ProjectIdOrAlias ProjectIdOrAliasParam `json:"projectIdOrAlias"`
	ModelIdOrKey     ModelIdOrKeyParam     `json:"modelIdOrKey"`
	Params           ItemsWithProjectAsCSVParams
}

type ItemsWithProjectAsCSVResponseObject interface {
	VisitItemsWithProjectAsCSVResponse(w http.ResponseWriter) error
}

type ItemsWithProjectAsCSV200TextcsvResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response ItemsWithProjectAsCSV200TextcsvResponse) VisitItemsWithProjectAsCSVResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/csv")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type ItemsWithProjectAsCSV400Response struct {
}

func (response ItemsWithProjectAsCSV400Response) VisitItemsWithProjectAsCSVResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemsWithProjectAsCSV401Response = UnauthorizedErrorResponse

func (response ItemsWithProjectAsCSV401Response) VisitItemsWithProjectAsCSVResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemsWithProjectAsCSV404Response struct {
}

func (response ItemsWithProjectAsCSV404Response) VisitItemsWithProjectAsCSVResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemsWithProjectAsCSV500Response struct {
}

func (response ItemsWithProjectAsCSV500Response) VisitItemsWithProjectAsCSVResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ItemsWithProjectAsGeoJSONRequestObject struct {
	ProjectIdOrAlias ProjectIdOrAliasParam `json:"projectIdOrAlias"`
	ModelIdOrKey     ModelIdOrKeyParam     `json:"modelIdOrKey"`
	Params           ItemsWithProjectAsGeoJSONParams
}

type ItemsWithProjectAsGeoJSONResponseObject interface {
	VisitItemsWithProjectAsGeoJSONResponse(w http.ResponseWriter) error
}

type ItemsWithProjectAsGeoJSON200JSONResponse GeoJSON

func (response ItemsWithProjectAsGeoJSON200JSONResponse) VisitItemsWithProjectAsGeoJSONResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemsWithProjectAsGeoJSON400Response struct {
}

func (response ItemsWithProjectAsGeoJSON400Response) VisitItemsWithProjectAsGeoJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemsWithProjectAsGeoJSON401Response = UnauthorizedErrorResponse

func (response ItemsWithProjectAsGeoJSON401Response) VisitItemsWithProjectAsGeoJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemsWithProjectAsGeoJSON404Response struct {
}

func (response ItemsWithProjectAsGeoJSON404Response) VisitItemsWithProjectAsGeoJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemsWithProjectAsGeoJSON500Response struct {
}

func (response ItemsWithProjectAsGeoJSON500Response) VisitItemsWithProjectAsGeoJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type MetadataSchemaByModelWithProjectAsJSONRequestObject struct {
	ProjectIdOrAlias ProjectIdOrAliasParam `json:"projectIdOrAlias"`
	ModelIdOrKey     ModelIdOrKeyParam     `json:"modelIdOrKey"`
}

type MetadataSchemaByModelWithProjectAsJSONResponseObject interface {
	VisitMetadataSchemaByModelWithProjectAsJSONResponse(w http.ResponseWriter) error
}

type MetadataSchemaByModelWithProjectAsJSON200JSONResponse SchemaJSON

func (response MetadataSchemaByModelWithProjectAsJSON200JSONResponse) VisitMetadataSchemaByModelWithProjectAsJSONResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type MetadataSchemaByModelWithProjectAsJSON400Response struct {
}

func (response MetadataSchemaByModelWithProjectAsJSON400Response) VisitMetadataSchemaByModelWithProjectAsJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type MetadataSchemaByModelWithProjectAsJSON401Response = UnauthorizedErrorResponse

func (response MetadataSchemaByModelWithProjectAsJSON401Response) VisitMetadataSchemaByModelWithProjectAsJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type MetadataSchemaByModelWithProjectAsJSON404Response struct {
}

func (response MetadataSchemaByModelWithProjectAsJSON404Response) VisitMetadataSchemaByModelWithProjectAsJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type MetadataSchemaByModelWithProjectAsJSON500Response struct {
}

func (response MetadataSchemaByModelWithProjectAsJSON500Response) VisitMetadataSchemaByModelWithProjectAsJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type SchemaByModelWithProjectAsJSONRequestObject struct {
	ProjectIdOrAlias ProjectIdOrAliasParam `json:"projectIdOrAlias"`
	ModelIdOrKey     ModelIdOrKeyParam     `json:"modelIdOrKey"`
}

type SchemaByModelWithProjectAsJSONResponseObject interface {
	VisitSchemaByModelWithProjectAsJSONResponse(w http.ResponseWriter) error
}

type SchemaByModelWithProjectAsJSON200JSONResponse SchemaJSON

func (response SchemaByModelWithProjectAsJSON200JSONResponse) VisitSchemaByModelWithProjectAsJSONResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SchemaByModelWithProjectAsJSON400Response struct {
}

func (response SchemaByModelWithProjectAsJSON400Response) VisitSchemaByModelWithProjectAsJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type SchemaByModelWithProjectAsJSON401Response = UnauthorizedErrorResponse

func (response SchemaByModelWithProjectAsJSON401Response) VisitSchemaByModelWithProjectAsJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type SchemaByModelWithProjectAsJSON404Response struct {
}

func (response SchemaByModelWithProjectAsJSON404Response) VisitSchemaByModelWithProjectAsJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type SchemaByModelWithProjectAsJSON500Response struct {
}

func (response SchemaByModelWithProjectAsJSON500Response) VisitSchemaByModelWithProjectAsJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type SchemaFilterRequestObject struct {
	ProjectIdOrAlias ProjectIdOrAliasParam `json:"projectIdOrAlias"`
	Params           SchemaFilterParams
}

type SchemaFilterResponseObject interface {
	VisitSchemaFilterResponse(w http.ResponseWriter) error
}

type SchemaFilter200JSONResponse struct {
	Models     *[]Model `json:"models,omitempty"`
	Page       *int     `json:"page,omitempty"`
	PerPage    *int     `json:"perPage,omitempty"`
	TotalCount *int     `json:"totalCount,omitempty"`
}

func (response SchemaFilter200JSONResponse) VisitSchemaFilterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SchemaFilter400Response struct {
}

func (response SchemaFilter400Response) VisitSchemaFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type SchemaFilter401Response = UnauthorizedErrorResponse

func (response SchemaFilter401Response) VisitSchemaFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type SchemaFilter404Response struct {
}

func (response SchemaFilter404Response) VisitSchemaFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type SchemaFilter500Response struct {
}

func (response SchemaFilter500Response) VisitSchemaFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type SchemaByIDWithProjectAsJSONRequestObject struct {
	ProjectIdOrAlias ProjectIdOrAliasParam `json:"projectIdOrAlias"`
	SchemaId         SchemaIdParam         `json:"schemaId"`
}

type SchemaByIDWithProjectAsJSONResponseObject interface {
	VisitSchemaByIDWithProjectAsJSONResponse(w http.ResponseWriter) error
}

type SchemaByIDWithProjectAsJSON200JSONResponse SchemaJSON

func (response SchemaByIDWithProjectAsJSON200JSONResponse) VisitSchemaByIDWithProjectAsJSONResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SchemaByIDWithProjectAsJSON400Response struct {
}

func (response SchemaByIDWithProjectAsJSON400Response) VisitSchemaByIDWithProjectAsJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type SchemaByIDWithProjectAsJSON401Response = UnauthorizedErrorResponse

func (response SchemaByIDWithProjectAsJSON401Response) VisitSchemaByIDWithProjectAsJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type SchemaByIDWithProjectAsJSON404Response struct {
}

func (response SchemaByIDWithProjectAsJSON404Response) VisitSchemaByIDWithProjectAsJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type SchemaByIDWithProjectAsJSON500Response struct {
}

func (response SchemaByIDWithProjectAsJSON500Response) VisitSchemaByIDWithProjectAsJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type AssetFilterRequestObject struct {
	ProjectId ProjectIdParam `json:"projectId"`
	Params    AssetFilterParams
}

type AssetFilterResponseObject interface {
	VisitAssetFilterResponse(w http.ResponseWriter) error
}

type AssetFilter200JSONResponse struct {
	Items      *[]Asset `json:"items,omitempty"`
	Page       *int     `json:"page,omitempty"`
	PerPage    *int     `json:"perPage,omitempty"`
	TotalCount *int     `json:"totalCount,omitempty"`
}

func (response AssetFilter200JSONResponse) VisitAssetFilterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetFilter400Response struct {
}

func (response AssetFilter400Response) VisitAssetFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetFilter401Response = UnauthorizedErrorResponse

func (response AssetFilter401Response) VisitAssetFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetFilter404Response struct {
}

func (response AssetFilter404Response) VisitAssetFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetCreateRequestObject struct {
	ProjectId     ProjectIdParam `json:"projectId"`
	JSONBody      *AssetCreateJSONRequestBody
	MultipartBody *multipart.Reader
}

type AssetCreateResponseObject interface {
	VisitAssetCreateResponse(w http.ResponseWriter) error
}

type AssetCreate200JSONResponse Asset

func (response AssetCreate200JSONResponse) VisitAssetCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetCreate400Response struct {
}

func (response AssetCreate400Response) VisitAssetCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetCreate401Response = UnauthorizedErrorResponse

func (response AssetCreate401Response) VisitAssetCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetCreate404Response struct {
}

func (response AssetCreate404Response) VisitAssetCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetUploadCreateRequestObject struct {
	ProjectId ProjectIdParam `json:"projectId"`
	Body      *AssetUploadCreateJSONRequestBody
}

type AssetUploadCreateResponseObject interface {
	VisitAssetUploadCreateResponse(w http.ResponseWriter) error
}

type AssetUploadCreate200JSONResponse struct {
	ContentLength *int    `json:"contentLength,omitempty"`
	ContentType   *string `json:"contentType,omitempty"`
	Next          *string `json:"next,omitempty"`
	Token         *string `json:"token,omitempty"`
	Url           *string `json:"url,omitempty"`
}

func (response AssetUploadCreate200JSONResponse) VisitAssetUploadCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetUploadCreate400Response struct {
}

func (response AssetUploadCreate400Response) VisitAssetUploadCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetUploadCreate401Response = UnauthorizedErrorResponse

func (response AssetUploadCreate401Response) VisitAssetUploadCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetUploadCreate404Response struct {
}

func (response AssetUploadCreate404Response) VisitAssetUploadCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type FieldCreateRequestObject struct {
	SchemaId SchemaIdParam `json:"schemaId"`
	Body     *FieldCreateJSONRequestBody
}

type FieldCreateResponseObject interface {
	VisitFieldCreateResponse(w http.ResponseWriter) error
}

type FieldCreate200JSONResponse SchemaField

func (response FieldCreate200JSONResponse) VisitFieldCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FieldCreate400Response struct {
}

func (response FieldCreate400Response) VisitFieldCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type FieldCreate401Response = UnauthorizedErrorResponse

func (response FieldCreate401Response) VisitFieldCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type FieldDeleteRequestObject struct {
	SchemaId     SchemaIdParam     `json:"schemaId"`
	FieldIdOrKey FieldIdOrKeyParam `json:"fieldIdOrKey"`
}

type FieldDeleteResponseObject interface {
	VisitFieldDeleteResponse(w http.ResponseWriter) error
}

type FieldDelete200JSONResponse struct {
	Id *id.FieldID `json:"id,omitempty"`
}

func (response FieldDelete200JSONResponse) VisitFieldDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FieldDelete400Response struct {
}

func (response FieldDelete400Response) VisitFieldDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type FieldDelete401Response = UnauthorizedErrorResponse

func (response FieldDelete401Response) VisitFieldDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type FieldUpdateRequestObject struct {
	SchemaId     SchemaIdParam     `json:"schemaId"`
	FieldIdOrKey FieldIdOrKeyParam `json:"fieldIdOrKey"`
	Body         *FieldUpdateJSONRequestBody
}

type FieldUpdateResponseObject interface {
	VisitFieldUpdateResponse(w http.ResponseWriter) error
}

type FieldUpdate200JSONResponse SchemaField

func (response FieldUpdate200JSONResponse) VisitFieldUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FieldUpdate400Response struct {
}

func (response FieldUpdate400Response) VisitFieldUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type FieldUpdate401Response = UnauthorizedErrorResponse

func (response FieldUpdate401Response) VisitFieldUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type SchemaByIDAsJSONRequestObject struct {
	SchemaId SchemaIdParam `json:"schemaId"`
}

type SchemaByIDAsJSONResponseObject interface {
	VisitSchemaByIDAsJSONResponse(w http.ResponseWriter) error
}

type SchemaByIDAsJSON200JSONResponse SchemaJSON

func (response SchemaByIDAsJSON200JSONResponse) VisitSchemaByIDAsJSONResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SchemaByIDAsJSON400Response struct {
}

func (response SchemaByIDAsJSON400Response) VisitSchemaByIDAsJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type SchemaByIDAsJSON401Response = UnauthorizedErrorResponse

func (response SchemaByIDAsJSON401Response) VisitSchemaByIDAsJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type SchemaByIDAsJSON404Response struct {
}

func (response SchemaByIDAsJSON404Response) VisitSchemaByIDAsJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type SchemaByIDAsJSON500Response struct {
}

func (response SchemaByIDAsJSON500Response) VisitSchemaByIDAsJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ProjectFilterRequestObject struct {
	WorkspaceId WorkspaceIdParam `json:"workspaceId"`
	Params      ProjectFilterParams
}

type ProjectFilterResponseObject interface {
	VisitProjectFilterResponse(w http.ResponseWriter) error
}

type ProjectFilter200JSONResponse struct {
	Page       *int       `json:"page,omitempty"`
	PerPage    *int       `json:"perPage,omitempty"`
	Projects   *[]Project `json:"projects,omitempty"`
	TotalCount *int       `json:"totalCount,omitempty"`
}

func (response ProjectFilter200JSONResponse) VisitProjectFilterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProjectFilter400Response struct {
}

func (response ProjectFilter400Response) VisitProjectFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ProjectFilter401Response = UnauthorizedErrorResponse

func (response ProjectFilter401Response) VisitProjectFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ProjectFilter404Response = NotFoundErrorResponse

func (response ProjectFilter404Response) VisitProjectFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ProjectFilter500Response struct {
}

func (response ProjectFilter500Response) VisitProjectFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// delete asset
	// (DELETE /assets/{assetId})
	AssetDelete(ctx context.Context, request AssetDeleteRequestObject) (AssetDeleteResponseObject, error)
	// get asset
	// (GET /assets/{assetId})
	AssetGet(ctx context.Context, request AssetGetRequestObject) (AssetGetResponseObject, error)
	// get asset comments
	// (GET /assets/{assetId}/comments)
	AssetCommentList(ctx context.Context, request AssetCommentListRequestObject) (AssetCommentListResponseObject, error)
	// create asset comments
	// (POST /assets/{assetId}/comments)
	AssetCommentCreate(ctx context.Context, request AssetCommentCreateRequestObject) (AssetCommentCreateResponseObject, error)
	// delete asset comments
	// (DELETE /assets/{assetId}/comments/{commentId})
	AssetCommentDelete(ctx context.Context, request AssetCommentDeleteRequestObject) (AssetCommentDeleteResponseObject, error)
	// Update AssetComment
	// (PATCH /assets/{assetId}/comments/{commentId})
	AssetCommentUpdate(ctx context.Context, request AssetCommentUpdateRequestObject) (AssetCommentUpdateResponseObject, error)
	// delete an item
	// (DELETE /items/{itemId})
	ItemDelete(ctx context.Context, request ItemDeleteRequestObject) (ItemDeleteResponseObject, error)
	// Returns an item.
	// (GET /items/{itemId})
	ItemGet(ctx context.Context, request ItemGetRequestObject) (ItemGetResponseObject, error)
	// Update an item.
	// (PATCH /items/{itemId})
	ItemUpdate(ctx context.Context, request ItemUpdateRequestObject) (ItemUpdateResponseObject, error)
	// get an item comment
	// (GET /items/{itemId}/comments)
	ItemCommentList(ctx context.Context, request ItemCommentListRequestObject) (ItemCommentListResponseObject, error)
	// create an item comment
	// (POST /items/{itemId}/comments)
	ItemCommentCreate(ctx context.Context, request ItemCommentCreateRequestObject) (ItemCommentCreateResponseObject, error)
	// delete item comment
	// (DELETE /items/{itemId}/comments/{commentId})
	ItemCommentDelete(ctx context.Context, request ItemCommentDeleteRequestObject) (ItemCommentDeleteResponseObject, error)
	// Update Item Comment
	// (PATCH /items/{itemId}/comments/{commentId})
	ItemCommentUpdate(ctx context.Context, request ItemCommentUpdateRequestObject) (ItemCommentUpdateResponseObject, error)
	// delete a model
	// (DELETE /models/{modelId})
	ModelDelete(ctx context.Context, request ModelDeleteRequestObject) (ModelDeleteResponseObject, error)
	// Returns a model.
	// (GET /models/{modelId})
	ModelGet(ctx context.Context, request ModelGetRequestObject) (ModelGetResponseObject, error)
	// Update a model.
	// (PATCH /models/{modelId})
	ModelUpdate(ctx context.Context, request ModelUpdateRequestObject) (ModelUpdateResponseObject, error)
	// Copy schema and items of a selected model
	// (POST /models/{modelId}/copy)
	CopyModel(ctx context.Context, request CopyModelRequestObject) (CopyModelResponseObject, error)
	// Import data under the selected model
	// (PUT /models/{modelId}/import)
	ModelImport(ctx context.Context, request ModelImportRequestObject) (ModelImportResponseObject, error)
	// Returns a list of items.
	// (GET /models/{modelId}/items)
	ItemFilter(ctx context.Context, request ItemFilterRequestObject) (ItemFilterResponseObject, error)
	// create an item
	// (POST /models/{modelId}/items)
	ItemCreate(ctx context.Context, request ItemCreateRequestObject) (ItemCreateResponseObject, error)
	// Returns a CSV that has a list of items as features.
	// (GET /models/{modelId}/items.csv)
	ItemsAsCSV(ctx context.Context, request ItemsAsCSVRequestObject) (ItemsAsCSVResponseObject, error)
	// Returns a GeoJSON that has a list of items as features.
	// (GET /models/{modelId}/items.geojson)
	ItemsAsGeoJSON(ctx context.Context, request ItemsAsGeoJSONRequestObject) (ItemsAsGeoJSONResponseObject, error)
	// Returns a metadata schema as json by model ID
	// (GET /models/{modelId}/metadata_schema.json)
	MetadataSchemaByModelAsJSON(ctx context.Context, request MetadataSchemaByModelAsJSONRequestObject) (MetadataSchemaByModelAsJSONResponseObject, error)
	// Returns a schema as json by model ID
	// (GET /models/{modelId}/schema.json)
	SchemaByModelAsJSON(ctx context.Context, request SchemaByModelAsJSONRequestObject) (SchemaByModelAsJSONResponseObject, error)
	// Returns a list of models.
	// (GET /projects/{projectIdOrAlias}/models)
	ModelFilter(ctx context.Context, request ModelFilterRequestObject) (ModelFilterResponseObject, error)
	// create a model
	// (POST /projects/{projectIdOrAlias}/models)
	ModelCreate(ctx context.Context, request ModelCreateRequestObject) (ModelCreateResponseObject, error)
	// Delete a model.
	// (DELETE /projects/{projectIdOrAlias}/models/{modelIdOrKey})
	ModelDeleteWithProject(ctx context.Context, request ModelDeleteWithProjectRequestObject) (ModelDeleteWithProjectResponseObject, error)
	// Returns a model.
	// (GET /projects/{projectIdOrAlias}/models/{modelIdOrKey})
	ModelGetWithProject(ctx context.Context, request ModelGetWithProjectRequestObject) (ModelGetWithProjectResponseObject, error)
	// Update a model.
	// (PATCH /projects/{projectIdOrAlias}/models/{modelIdOrKey})
	ModelUpdateWithProject(ctx context.Context, request ModelUpdateWithProjectRequestObject) (ModelUpdateWithProjectResponseObject, error)
	// create a field
	// (POST /projects/{projectIdOrAlias}/models/{modelIdOrKey}/fields)
	FieldCreateWithProject(ctx context.Context, request FieldCreateWithProjectRequestObject) (FieldCreateWithProjectResponseObject, error)
	// Delete a field.
	// (DELETE /projects/{projectIdOrAlias}/models/{modelIdOrKey}/fields/{fieldIdOrKey})
	FieldDeleteWithProject(ctx context.Context, request FieldDeleteWithProjectRequestObject) (FieldDeleteWithProjectResponseObject, error)
	// update a field
	// (PATCH /projects/{projectIdOrAlias}/models/{modelIdOrKey}/fields/{fieldIdOrKey})
	FieldUpdateWithProject(ctx context.Context, request FieldUpdateWithProjectRequestObject) (FieldUpdateWithProjectResponseObject, error)
	// Returns a list of items.
	// (GET /projects/{projectIdOrAlias}/models/{modelIdOrKey}/items)
	ItemFilterWithProject(ctx context.Context, request ItemFilterWithProjectRequestObject) (ItemFilterWithProjectResponseObject, error)
	// Create an Item.
	// (POST /projects/{projectIdOrAlias}/models/{modelIdOrKey}/items)
	ItemCreateWithProject(ctx context.Context, request ItemCreateWithProjectRequestObject) (ItemCreateWithProjectResponseObject, error)
	// Returns a CSV that has a list of items as features.
	// (GET /projects/{projectIdOrAlias}/models/{modelIdOrKey}/items.csv)
	ItemsWithProjectAsCSV(ctx context.Context, request ItemsWithProjectAsCSVRequestObject) (ItemsWithProjectAsCSVResponseObject, error)
	// Returns a GeoJSON that has a list of items as features.
	// (GET /projects/{projectIdOrAlias}/models/{modelIdOrKey}/items.geojson)
	ItemsWithProjectAsGeoJSON(ctx context.Context, request ItemsWithProjectAsGeoJSONRequestObject) (ItemsWithProjectAsGeoJSONResponseObject, error)
	// Returns a metadata schema as json by project and model ID
	// (GET /projects/{projectIdOrAlias}/models/{modelIdOrKey}/metadata_schema.json)
	MetadataSchemaByModelWithProjectAsJSON(ctx context.Context, request MetadataSchemaByModelWithProjectAsJSONRequestObject) (MetadataSchemaByModelWithProjectAsJSONResponseObject, error)
	// Returns a schema as json by project and model ID
	// (GET /projects/{projectIdOrAlias}/models/{modelIdOrKey}/schema.json)
	SchemaByModelWithProjectAsJSON(ctx context.Context, request SchemaByModelWithProjectAsJSONRequestObject) (SchemaByModelWithProjectAsJSONResponseObject, error)
	// Returns a schema.
	// (GET /projects/{projectIdOrAlias}/schemata)
	SchemaFilter(ctx context.Context, request SchemaFilterRequestObject) (SchemaFilterResponseObject, error)
	// Returns a schema as json by project and schema ID
	// (GET /projects/{projectIdOrAlias}/schemata/{schemaId}/schema.json)
	SchemaByIDWithProjectAsJSON(ctx context.Context, request SchemaByIDWithProjectAsJSONRequestObject) (SchemaByIDWithProjectAsJSONResponseObject, error)
	// Returns a list of assets.
	// (GET /projects/{projectId}/assets)
	AssetFilter(ctx context.Context, request AssetFilterRequestObject) (AssetFilterResponseObject, error)
	// Create an new asset.
	// (POST /projects/{projectId}/assets)
	AssetCreate(ctx context.Context, request AssetCreateRequestObject) (AssetCreateResponseObject, error)
	// Upload an asset.
	// (POST /projects/{projectId}/assets/uploads)
	AssetUploadCreate(ctx context.Context, request AssetUploadCreateRequestObject) (AssetUploadCreateResponseObject, error)
	// create a field
	// (POST /schemata/{schemaId}/fields)
	FieldCreate(ctx context.Context, request FieldCreateRequestObject) (FieldCreateResponseObject, error)
	// delete a field
	// (DELETE /schemata/{schemaId}/fields/{fieldIdOrKey})
	FieldDelete(ctx context.Context, request FieldDeleteRequestObject) (FieldDeleteResponseObject, error)
	// update a field
	// (PATCH /schemata/{schemaId}/fields/{fieldIdOrKey})
	FieldUpdate(ctx context.Context, request FieldUpdateRequestObject) (FieldUpdateResponseObject, error)
	// Returns a schema as json by schema ID
	// (GET /schemata/{schemaId}/schema.json)
	SchemaByIDAsJSON(ctx context.Context, request SchemaByIDAsJSONRequestObject) (SchemaByIDAsJSONResponseObject, error)
	// Returns a list of projects.
	// (GET /{workspaceId}/projects)
	ProjectFilter(ctx context.Context, request ProjectFilterRequestObject) (ProjectFilterResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// AssetDelete operation middleware
func (sh *strictHandler) AssetDelete(ctx echo.Context, assetId AssetIdParam) error {
	var request AssetDeleteRequestObject

	request.AssetId = assetId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetDelete(ctx.Request().Context(), request.(AssetDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetDeleteResponseObject); ok {
		return validResponse.VisitAssetDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AssetGet operation middleware
func (sh *strictHandler) AssetGet(ctx echo.Context, assetId AssetIdParam) error {
	var request AssetGetRequestObject

	request.AssetId = assetId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetGet(ctx.Request().Context(), request.(AssetGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetGetResponseObject); ok {
		return validResponse.VisitAssetGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AssetCommentList operation middleware
func (sh *strictHandler) AssetCommentList(ctx echo.Context, assetId AssetIdParam) error {
	var request AssetCommentListRequestObject

	request.AssetId = assetId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetCommentList(ctx.Request().Context(), request.(AssetCommentListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetCommentList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetCommentListResponseObject); ok {
		return validResponse.VisitAssetCommentListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AssetCommentCreate operation middleware
func (sh *strictHandler) AssetCommentCreate(ctx echo.Context, assetId AssetIdParam) error {
	var request AssetCommentCreateRequestObject

	request.AssetId = assetId

	var body AssetCommentCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetCommentCreate(ctx.Request().Context(), request.(AssetCommentCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetCommentCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetCommentCreateResponseObject); ok {
		return validResponse.VisitAssetCommentCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AssetCommentDelete operation middleware
func (sh *strictHandler) AssetCommentDelete(ctx echo.Context, assetId AssetIdParam, commentId CommentIdParam) error {
	var request AssetCommentDeleteRequestObject

	request.AssetId = assetId
	request.CommentId = commentId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetCommentDelete(ctx.Request().Context(), request.(AssetCommentDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetCommentDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetCommentDeleteResponseObject); ok {
		return validResponse.VisitAssetCommentDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AssetCommentUpdate operation middleware
func (sh *strictHandler) AssetCommentUpdate(ctx echo.Context, assetId AssetIdParam, commentId CommentIdParam) error {
	var request AssetCommentUpdateRequestObject

	request.AssetId = assetId
	request.CommentId = commentId

	var body AssetCommentUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetCommentUpdate(ctx.Request().Context(), request.(AssetCommentUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetCommentUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetCommentUpdateResponseObject); ok {
		return validResponse.VisitAssetCommentUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemDelete operation middleware
func (sh *strictHandler) ItemDelete(ctx echo.Context, itemId ItemIdParam) error {
	var request ItemDeleteRequestObject

	request.ItemId = itemId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemDelete(ctx.Request().Context(), request.(ItemDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemDeleteResponseObject); ok {
		return validResponse.VisitItemDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemGet operation middleware
func (sh *strictHandler) ItemGet(ctx echo.Context, itemId ItemIdParam, params ItemGetParams) error {
	var request ItemGetRequestObject

	request.ItemId = itemId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemGet(ctx.Request().Context(), request.(ItemGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemGetResponseObject); ok {
		return validResponse.VisitItemGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemUpdate operation middleware
func (sh *strictHandler) ItemUpdate(ctx echo.Context, itemId ItemIdParam) error {
	var request ItemUpdateRequestObject

	request.ItemId = itemId

	var body ItemUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemUpdate(ctx.Request().Context(), request.(ItemUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemUpdateResponseObject); ok {
		return validResponse.VisitItemUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemCommentList operation middleware
func (sh *strictHandler) ItemCommentList(ctx echo.Context, itemId ItemIdParam) error {
	var request ItemCommentListRequestObject

	request.ItemId = itemId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemCommentList(ctx.Request().Context(), request.(ItemCommentListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemCommentList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemCommentListResponseObject); ok {
		return validResponse.VisitItemCommentListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemCommentCreate operation middleware
func (sh *strictHandler) ItemCommentCreate(ctx echo.Context, itemId ItemIdParam) error {
	var request ItemCommentCreateRequestObject

	request.ItemId = itemId

	var body ItemCommentCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemCommentCreate(ctx.Request().Context(), request.(ItemCommentCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemCommentCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemCommentCreateResponseObject); ok {
		return validResponse.VisitItemCommentCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemCommentDelete operation middleware
func (sh *strictHandler) ItemCommentDelete(ctx echo.Context, itemId ItemIdParam, commentId CommentIdParam) error {
	var request ItemCommentDeleteRequestObject

	request.ItemId = itemId
	request.CommentId = commentId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemCommentDelete(ctx.Request().Context(), request.(ItemCommentDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemCommentDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemCommentDeleteResponseObject); ok {
		return validResponse.VisitItemCommentDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemCommentUpdate operation middleware
func (sh *strictHandler) ItemCommentUpdate(ctx echo.Context, itemId ItemIdParam, commentId CommentIdParam) error {
	var request ItemCommentUpdateRequestObject

	request.ItemId = itemId
	request.CommentId = commentId

	var body ItemCommentUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemCommentUpdate(ctx.Request().Context(), request.(ItemCommentUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemCommentUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemCommentUpdateResponseObject); ok {
		return validResponse.VisitItemCommentUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ModelDelete operation middleware
func (sh *strictHandler) ModelDelete(ctx echo.Context, modelId ModelIdParam) error {
	var request ModelDeleteRequestObject

	request.ModelId = modelId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModelDelete(ctx.Request().Context(), request.(ModelDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModelDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ModelDeleteResponseObject); ok {
		return validResponse.VisitModelDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ModelGet operation middleware
func (sh *strictHandler) ModelGet(ctx echo.Context, modelId ModelIdParam) error {
	var request ModelGetRequestObject

	request.ModelId = modelId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModelGet(ctx.Request().Context(), request.(ModelGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModelGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ModelGetResponseObject); ok {
		return validResponse.VisitModelGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ModelUpdate operation middleware
func (sh *strictHandler) ModelUpdate(ctx echo.Context, modelId ModelIdParam) error {
	var request ModelUpdateRequestObject

	request.ModelId = modelId

	var body ModelUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModelUpdate(ctx.Request().Context(), request.(ModelUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModelUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ModelUpdateResponseObject); ok {
		return validResponse.VisitModelUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CopyModel operation middleware
func (sh *strictHandler) CopyModel(ctx echo.Context, modelId ModelIdParam) error {
	var request CopyModelRequestObject

	request.ModelId = modelId

	var body CopyModelJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CopyModel(ctx.Request().Context(), request.(CopyModelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CopyModel")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CopyModelResponseObject); ok {
		return validResponse.VisitCopyModelResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ModelImport operation middleware
func (sh *strictHandler) ModelImport(ctx echo.Context, modelId ModelIdParam) error {
	var request ModelImportRequestObject

	request.ModelId = modelId
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body ModelImportJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "multipart/form-data") {
		if reader, err := ctx.Request().MultipartReader(); err != nil {
			return err
		} else {
			request.MultipartBody = reader
		}
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModelImport(ctx.Request().Context(), request.(ModelImportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModelImport")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ModelImportResponseObject); ok {
		return validResponse.VisitModelImportResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemFilter operation middleware
func (sh *strictHandler) ItemFilter(ctx echo.Context, modelId ModelIdParam, params ItemFilterParams) error {
	var request ItemFilterRequestObject

	request.ModelId = modelId
	request.Params = params

	var body ItemFilterJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemFilter(ctx.Request().Context(), request.(ItemFilterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemFilter")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemFilterResponseObject); ok {
		return validResponse.VisitItemFilterResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemCreate operation middleware
func (sh *strictHandler) ItemCreate(ctx echo.Context, modelId ModelIdParam) error {
	var request ItemCreateRequestObject

	request.ModelId = modelId

	var body ItemCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemCreate(ctx.Request().Context(), request.(ItemCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemCreateResponseObject); ok {
		return validResponse.VisitItemCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemsAsCSV operation middleware
func (sh *strictHandler) ItemsAsCSV(ctx echo.Context, modelId ModelIdParam, params ItemsAsCSVParams) error {
	var request ItemsAsCSVRequestObject

	request.ModelId = modelId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemsAsCSV(ctx.Request().Context(), request.(ItemsAsCSVRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemsAsCSV")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemsAsCSVResponseObject); ok {
		return validResponse.VisitItemsAsCSVResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemsAsGeoJSON operation middleware
func (sh *strictHandler) ItemsAsGeoJSON(ctx echo.Context, modelId ModelIdParam, params ItemsAsGeoJSONParams) error {
	var request ItemsAsGeoJSONRequestObject

	request.ModelId = modelId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemsAsGeoJSON(ctx.Request().Context(), request.(ItemsAsGeoJSONRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemsAsGeoJSON")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemsAsGeoJSONResponseObject); ok {
		return validResponse.VisitItemsAsGeoJSONResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// MetadataSchemaByModelAsJSON operation middleware
func (sh *strictHandler) MetadataSchemaByModelAsJSON(ctx echo.Context, modelId ModelIdParam) error {
	var request MetadataSchemaByModelAsJSONRequestObject

	request.ModelId = modelId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.MetadataSchemaByModelAsJSON(ctx.Request().Context(), request.(MetadataSchemaByModelAsJSONRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MetadataSchemaByModelAsJSON")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(MetadataSchemaByModelAsJSONResponseObject); ok {
		return validResponse.VisitMetadataSchemaByModelAsJSONResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SchemaByModelAsJSON operation middleware
func (sh *strictHandler) SchemaByModelAsJSON(ctx echo.Context, modelId ModelIdParam) error {
	var request SchemaByModelAsJSONRequestObject

	request.ModelId = modelId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SchemaByModelAsJSON(ctx.Request().Context(), request.(SchemaByModelAsJSONRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SchemaByModelAsJSON")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SchemaByModelAsJSONResponseObject); ok {
		return validResponse.VisitSchemaByModelAsJSONResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ModelFilter operation middleware
func (sh *strictHandler) ModelFilter(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, params ModelFilterParams) error {
	var request ModelFilterRequestObject

	request.ProjectIdOrAlias = projectIdOrAlias
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModelFilter(ctx.Request().Context(), request.(ModelFilterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModelFilter")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ModelFilterResponseObject); ok {
		return validResponse.VisitModelFilterResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ModelCreate operation middleware
func (sh *strictHandler) ModelCreate(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, params ModelCreateParams) error {
	var request ModelCreateRequestObject

	request.ProjectIdOrAlias = projectIdOrAlias
	request.Params = params

	var body ModelCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModelCreate(ctx.Request().Context(), request.(ModelCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModelCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ModelCreateResponseObject); ok {
		return validResponse.VisitModelCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ModelDeleteWithProject operation middleware
func (sh *strictHandler) ModelDeleteWithProject(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error {
	var request ModelDeleteWithProjectRequestObject

	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModelDeleteWithProject(ctx.Request().Context(), request.(ModelDeleteWithProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModelDeleteWithProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ModelDeleteWithProjectResponseObject); ok {
		return validResponse.VisitModelDeleteWithProjectResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ModelGetWithProject operation middleware
func (sh *strictHandler) ModelGetWithProject(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error {
	var request ModelGetWithProjectRequestObject

	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModelGetWithProject(ctx.Request().Context(), request.(ModelGetWithProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModelGetWithProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ModelGetWithProjectResponseObject); ok {
		return validResponse.VisitModelGetWithProjectResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ModelUpdateWithProject operation middleware
func (sh *strictHandler) ModelUpdateWithProject(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error {
	var request ModelUpdateWithProjectRequestObject

	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey

	var body ModelUpdateWithProjectJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModelUpdateWithProject(ctx.Request().Context(), request.(ModelUpdateWithProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModelUpdateWithProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ModelUpdateWithProjectResponseObject); ok {
		return validResponse.VisitModelUpdateWithProjectResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// FieldCreateWithProject operation middleware
func (sh *strictHandler) FieldCreateWithProject(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error {
	var request FieldCreateWithProjectRequestObject

	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey

	var body FieldCreateWithProjectJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FieldCreateWithProject(ctx.Request().Context(), request.(FieldCreateWithProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FieldCreateWithProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FieldCreateWithProjectResponseObject); ok {
		return validResponse.VisitFieldCreateWithProjectResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// FieldDeleteWithProject operation middleware
func (sh *strictHandler) FieldDeleteWithProject(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, fieldIdOrKey FieldIdOrKeyParam) error {
	var request FieldDeleteWithProjectRequestObject

	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey
	request.FieldIdOrKey = fieldIdOrKey

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FieldDeleteWithProject(ctx.Request().Context(), request.(FieldDeleteWithProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FieldDeleteWithProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FieldDeleteWithProjectResponseObject); ok {
		return validResponse.VisitFieldDeleteWithProjectResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// FieldUpdateWithProject operation middleware
func (sh *strictHandler) FieldUpdateWithProject(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, fieldIdOrKey FieldIdOrKeyParam) error {
	var request FieldUpdateWithProjectRequestObject

	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey
	request.FieldIdOrKey = fieldIdOrKey

	var body FieldUpdateWithProjectJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FieldUpdateWithProject(ctx.Request().Context(), request.(FieldUpdateWithProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FieldUpdateWithProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FieldUpdateWithProjectResponseObject); ok {
		return validResponse.VisitFieldUpdateWithProjectResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemFilterWithProject operation middleware
func (sh *strictHandler) ItemFilterWithProject(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, params ItemFilterWithProjectParams) error {
	var request ItemFilterWithProjectRequestObject

	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemFilterWithProject(ctx.Request().Context(), request.(ItemFilterWithProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemFilterWithProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemFilterWithProjectResponseObject); ok {
		return validResponse.VisitItemFilterWithProjectResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemCreateWithProject operation middleware
func (sh *strictHandler) ItemCreateWithProject(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error {
	var request ItemCreateWithProjectRequestObject

	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey

	var body ItemCreateWithProjectJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemCreateWithProject(ctx.Request().Context(), request.(ItemCreateWithProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemCreateWithProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemCreateWithProjectResponseObject); ok {
		return validResponse.VisitItemCreateWithProjectResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemsWithProjectAsCSV operation middleware
func (sh *strictHandler) ItemsWithProjectAsCSV(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, params ItemsWithProjectAsCSVParams) error {
	var request ItemsWithProjectAsCSVRequestObject

	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemsWithProjectAsCSV(ctx.Request().Context(), request.(ItemsWithProjectAsCSVRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemsWithProjectAsCSV")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemsWithProjectAsCSVResponseObject); ok {
		return validResponse.VisitItemsWithProjectAsCSVResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemsWithProjectAsGeoJSON operation middleware
func (sh *strictHandler) ItemsWithProjectAsGeoJSON(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, params ItemsWithProjectAsGeoJSONParams) error {
	var request ItemsWithProjectAsGeoJSONRequestObject

	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemsWithProjectAsGeoJSON(ctx.Request().Context(), request.(ItemsWithProjectAsGeoJSONRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemsWithProjectAsGeoJSON")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemsWithProjectAsGeoJSONResponseObject); ok {
		return validResponse.VisitItemsWithProjectAsGeoJSONResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// MetadataSchemaByModelWithProjectAsJSON operation middleware
func (sh *strictHandler) MetadataSchemaByModelWithProjectAsJSON(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error {
	var request MetadataSchemaByModelWithProjectAsJSONRequestObject

	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.MetadataSchemaByModelWithProjectAsJSON(ctx.Request().Context(), request.(MetadataSchemaByModelWithProjectAsJSONRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MetadataSchemaByModelWithProjectAsJSON")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(MetadataSchemaByModelWithProjectAsJSONResponseObject); ok {
		return validResponse.VisitMetadataSchemaByModelWithProjectAsJSONResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SchemaByModelWithProjectAsJSON operation middleware
func (sh *strictHandler) SchemaByModelWithProjectAsJSON(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error {
	var request SchemaByModelWithProjectAsJSONRequestObject

	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SchemaByModelWithProjectAsJSON(ctx.Request().Context(), request.(SchemaByModelWithProjectAsJSONRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SchemaByModelWithProjectAsJSON")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SchemaByModelWithProjectAsJSONResponseObject); ok {
		return validResponse.VisitSchemaByModelWithProjectAsJSONResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SchemaFilter operation middleware
func (sh *strictHandler) SchemaFilter(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, params SchemaFilterParams) error {
	var request SchemaFilterRequestObject

	request.ProjectIdOrAlias = projectIdOrAlias
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SchemaFilter(ctx.Request().Context(), request.(SchemaFilterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SchemaFilter")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SchemaFilterResponseObject); ok {
		return validResponse.VisitSchemaFilterResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SchemaByIDWithProjectAsJSON operation middleware
func (sh *strictHandler) SchemaByIDWithProjectAsJSON(ctx echo.Context, projectIdOrAlias ProjectIdOrAliasParam, schemaId SchemaIdParam) error {
	var request SchemaByIDWithProjectAsJSONRequestObject

	request.ProjectIdOrAlias = projectIdOrAlias
	request.SchemaId = schemaId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SchemaByIDWithProjectAsJSON(ctx.Request().Context(), request.(SchemaByIDWithProjectAsJSONRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SchemaByIDWithProjectAsJSON")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SchemaByIDWithProjectAsJSONResponseObject); ok {
		return validResponse.VisitSchemaByIDWithProjectAsJSONResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AssetFilter operation middleware
func (sh *strictHandler) AssetFilter(ctx echo.Context, projectId ProjectIdParam, params AssetFilterParams) error {
	var request AssetFilterRequestObject

	request.ProjectId = projectId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetFilter(ctx.Request().Context(), request.(AssetFilterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetFilter")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetFilterResponseObject); ok {
		return validResponse.VisitAssetFilterResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AssetCreate operation middleware
func (sh *strictHandler) AssetCreate(ctx echo.Context, projectId ProjectIdParam) error {
	var request AssetCreateRequestObject

	request.ProjectId = projectId
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body AssetCreateJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "multipart/form-data") {
		if reader, err := ctx.Request().MultipartReader(); err != nil {
			return err
		} else {
			request.MultipartBody = reader
		}
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetCreate(ctx.Request().Context(), request.(AssetCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetCreateResponseObject); ok {
		return validResponse.VisitAssetCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AssetUploadCreate operation middleware
func (sh *strictHandler) AssetUploadCreate(ctx echo.Context, projectId ProjectIdParam) error {
	var request AssetUploadCreateRequestObject

	request.ProjectId = projectId

	var body AssetUploadCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetUploadCreate(ctx.Request().Context(), request.(AssetUploadCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetUploadCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetUploadCreateResponseObject); ok {
		return validResponse.VisitAssetUploadCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// FieldCreate operation middleware
func (sh *strictHandler) FieldCreate(ctx echo.Context, schemaId SchemaIdParam) error {
	var request FieldCreateRequestObject

	request.SchemaId = schemaId

	var body FieldCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FieldCreate(ctx.Request().Context(), request.(FieldCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FieldCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FieldCreateResponseObject); ok {
		return validResponse.VisitFieldCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// FieldDelete operation middleware
func (sh *strictHandler) FieldDelete(ctx echo.Context, schemaId SchemaIdParam, fieldIdOrKey FieldIdOrKeyParam) error {
	var request FieldDeleteRequestObject

	request.SchemaId = schemaId
	request.FieldIdOrKey = fieldIdOrKey

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FieldDelete(ctx.Request().Context(), request.(FieldDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FieldDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FieldDeleteResponseObject); ok {
		return validResponse.VisitFieldDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// FieldUpdate operation middleware
func (sh *strictHandler) FieldUpdate(ctx echo.Context, schemaId SchemaIdParam, fieldIdOrKey FieldIdOrKeyParam) error {
	var request FieldUpdateRequestObject

	request.SchemaId = schemaId
	request.FieldIdOrKey = fieldIdOrKey

	var body FieldUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FieldUpdate(ctx.Request().Context(), request.(FieldUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FieldUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FieldUpdateResponseObject); ok {
		return validResponse.VisitFieldUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SchemaByIDAsJSON operation middleware
func (sh *strictHandler) SchemaByIDAsJSON(ctx echo.Context, schemaId SchemaIdParam) error {
	var request SchemaByIDAsJSONRequestObject

	request.SchemaId = schemaId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SchemaByIDAsJSON(ctx.Request().Context(), request.(SchemaByIDAsJSONRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SchemaByIDAsJSON")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SchemaByIDAsJSONResponseObject); ok {
		return validResponse.VisitSchemaByIDAsJSONResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ProjectFilter operation middleware
func (sh *strictHandler) ProjectFilter(ctx echo.Context, workspaceId WorkspaceIdParam, params ProjectFilterParams) error {
	var request ProjectFilterRequestObject

	request.WorkspaceId = workspaceId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProjectFilter(ctx.Request().Context(), request.(ProjectFilterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProjectFilter")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ProjectFilterResponseObject); ok {
		return validResponse.VisitProjectFilterResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xd23LbONJ+FRZ3LhnLs5m98Z3XTqY8O5m41s5O/TWVSsFkS8KaAhgAtKN16d3/wokH",
	"ESRBibIlWzeJRQJgo/vrAxpN8CmM6SKjBIjg4dlTmCGGFiCAqV+IcxBXybW8KH8nwGOGM4EpCc/Cq8uA",
	"TgMxh4BDCrGAJFAdwijE8n6GxDyMQoIWEJ7ZscIoZPA9xwyS8EywHKKQx3NYIDm+WGayKRcMk1kYhT/e",
	"zeg7cxEnJ+dqiMtwtYr0cC2E3WQQ4ykGHjzOQcyBabqCBAkUIAYBLO4gSSAJMFH0M+B5Krgl/HsObLlG",
	"eVil8ycG0/As/NukZN5E3+UT1fqDeoCchKQ1posFkEGMNF3crCzG24aZF2YQzc4phjS5Sj6zf8Gyg0oW",
	"3MPSEqv6WBYuaAIpD8zjnWRXn7Ex5brVyUc11qUeS04AC1gMYbBs7yZTj7QNa6/kCJqv97B8pKyNLnM3",
	"KAZywc80CtsJkA9S/B8oQNXHCjBj9L8QtyCuOvrGnFGDnFSFZobtldpgQreR3ic1hBZfhmbQQt0XDkkg",
	"qEGUpgzNoEWI5lZJRAJTlKciPPs5CheY4EW+UH9bOoiAGTBNBLDr0ejQY7lJ+cdpFC7QD0PL6Wk/ZVoU",
	"EhjnKUa8E3hItrAS7RTi+rAbS9MMpDCnR6pR7W8t/MjtpHMNZdemk8YZg6mfeFHAYCq5+QCsRcTSNznF",
	"G6ZIAJeTACJl+ld5IcvvUhyHXyOHZdEj+XBLNaw5BDfD7IjbaOmNHkOzj1MmLjHrYWECU0xAEUdZAixI",
	"MINYNrIzYMAzSjgEKeYiCh5xmgZ3EOAZoUz6jGmlM+YBoSLIGHAgApIWaSSYtUhDElmRBVK/1EW3GCgT",
	"QyfomlYLnXL4FkJjBkhAcl5FTvVaniXmbyfhj5Td8wzFMEThik5uBFXG9FY6FMc0JyKhC4TJyZ/FCBJC",
	"SgU1k1Tg+wcVH2lOkg+MUdYk+FYx9XsOXNLKgNOcxRA8Io2JqewarqLwC0G5mFOG/wdtQ53HMXAeCHoP",
	"RGJqgTnHZCZVHJMHlOKkooSKto+ARM5AReuMZsAE1kTPgC5AsGVfhPqrbSfDpmRAPBOtPdC0oHfKNq6s",
	"8J8KlFhSnbho9DatL2iaarVsTnGqm6i/ZZzG++ZqKSifhxhDyw5iK4/3I/tXoL/dfP7jYIgtMFKnNqaU",
	"JZhIjyB/UgKfp+HZX90UX1NM5LjdrT7lqcB+TX/HBG4M/T6jDmh/TdPljBJfak3jr6vIKhYeIMqqjvXJ",
	"UnMmCitsisLKxMyd2hVLX9HL/rQPHoyMyvC+k7QilWHile7w9+Z014n3Hb0mWveomoDB5LaMpVnoP5qF",
	"U2O8JllTyhZIOX2a36XSqZk+JF/cyWBaBd6Gh+97GOqidDsGlI/7pXlTpz8a9gKxeI4f4MMPwZDC2Y1A",
	"IudVYGdAEruu/ZYxOmPAZTCfUCJZMEU4hcQBzyiMKRFAxK3RlOb9IvyoMRcJeCfwosLfsssUp9DHINXG",
	"1ysW2SgblTjozBg8YHi8XdN4vDArNPn/N/4gR58B1f9+e598u8UpcPNz8SDtgQqnv72X4U7MH2TURe4J",
	"fSRO9pUrkv5pVBYiUSioQOkN/l91NiVEy0DPm+s5S935ijJm+0uyO6qtomSvqDfGLG3XWs6twmmUypFk",
	"WKgAl3JowZtOtzVRruK3fkYionVFNV8Xd87NYk3AjAnktskF6McCvBeI61nABmNjShLsDsUQSbwNTzmM",
	"w/jcIY5jR/Sks4X9KgtpcqOWDVSBVI6BhA61rQDge45SqU+Eig/6b5cAHlCaS8E5WXFHabpXVNo7kjBA",
	"pKFVlrTKw2xnlw4tpBPMUtjtHDGJ0zwBfk6WeqJXtQvFbaW21dtp2s0Mi8MGwLbjCsnTFN3tmiuwyITh",
	"xwf1p1/IZizzTkmbKcPDbudIRpcpcG7+rNz4zBRcb2mlRXnNB8PWx2wnLE359haJF4Hq7vgqjT3CxKj7",
	"RfmLC8QE/xOrdAeQxP5JqLip3pJYsXd9WNzieweyWDmbnTLmDqaUSYeGpkK5TX3hM/tM7EXzN53ezjH/",
	"E+C++PGJEsUc/ev/ALFu3vh40m0Y5tJaNYAje8NonnkmY36VbXXE5uXlzW5ZqDeknAGGXZR2yU/NUgU3",
	"fc6yLukuvPhTvr5sVlGjioswJZdIQOXnFx1xLWiCpziutqheMq24XrhYyUThAgRSD/a0w3ZpsZZQmeM0",
	"YeC/orSrj3Vz1LcYal99IDF33uDuCN81N53Gb05ueDxay3s+bRivFptz7UhOEReflJQh8adOyjxBAt14",
	"bfKbDHOjnxemy62LzpXjhks4s5XjiA99KxjKyfHNJjV4negCnt1yay481EbeSIukUUBZ43+rRDdYPVe3",
	"OfoWoB27Gw7ulkjYWq+V1fRPQun/tXl1GDs8FGyb5zqwSOGjdca+fqidmR/dfn0sB11dnzU1u4xQXHcH",
	"Ovf2Obo3On5yzXEVhT+1Fqz0K96azic6Wkfpdf3JvUCTFFf6rJwxrUihMyjqjgjV3RrFXzsZWJ9CfaJ9",
	"bLEq6TJV/tqnxKhzzr8DmdWihKK+o1IL4pfAtrUiXq1HYbqLzyWOK7GigB9CUgE/xDkDFEYhw/H8Vl9d",
	"IHaf0Ee5pIjnEN/f0R9hVFT9JTpuVOmfKNQb1DaZp8JHMydVxAEMiNqz1hlMHdNHoUAmw6u2Zj7fmVoS",
	"e+FDgmWY7FypAOOYEkhk2P8S5nq6laEud44x/2QiJbeJsnHUx5HIs4Vg7riY2XrX5g5NnquFRQssywcU",
	"0k6uBm3C1CXqHrg+Wi8pG0QWhgqPma9ci1oOcc6wWCpHrKF4B4gBO8+1MVGzVSJWl8th50JkuuACkylt",
	"1kP8Gz4gJubvLj7dBFcqYa6WasH59VVYWI2eVsXkwp9PTk9OTaaBoAyHZ+H7k9OT96FeHCnCdcUunzyZ",
	"CuWVJioFoUyIXuVjSiSYQrXpc6lvrtWM/P30VO+jF1l8lGWpWWpO/ss1t9sCr2FbTg6hrPtUbcC4rvlZ",
	"ReEvmry1yhtdYmKLWYKi/DvQy3vV7+c2SBfTnzQLXVTPX5pP/KOsj5E4yhcLxJaqGkrytCggF2jGpeFW",
	"M+ah3oUXLfL4VXXZShi9Fd2Hz+EZiC72Viv/W6o+yiaT2psBqkiioUYTs6lmapPahGd2oH7XpWkjalT1",
	"8Z45Yb0J6NpC8NM2W7a/75gw1lsJumq3//q6+uqETDGxBnbKO1uDKAozyntgcqECHlPzB1z8kybLrTDS",
	"tuXqlnm90nC1Q6NTgLEJtcPHlQ5bh0Cr08BMnoo3YvqdtwHSi/nwzh33prCtXyR1bh0+BqoO/znMS9Tb",
	"fu01LWWQkIjn3UD6kiVv3iJpHgTnrw6kdmIVefeaKRVrTJ70a2Sd9kiuAF/MDlVeUhtghLBZtL4O20Ps",
	"a4BWonopX1ltrC9ORc4Itx1Pik3gqkT1amSYqSre//EwU5U3X+Wsdqbva4mKJirO9xkOUfgPN00CGEFp",
	"wIE9AAtAjzcEPA4QNOEzTPzVl1drbsdpZjvRN7I7Kop/h7zyPF6Scdys4Et70KNGdXrZDoVq+tX+7ILs",
	"+0qSC/IJrzK3oCVeOe2gJvhtgv+GSXWmFioYOWYWXlNmwR9YHabFN69QQdHhpRVqfHotkf2zWJUxMwoV",
	"CB0TCtWEwuuCp5mXlHZw4Web9ME6kyezod1piFR15IuZoOrBKd4GyJwT8QKS3SRhUJxqYUWm5uyTMdA9",
	"m2s2NcCONzANix3rjeC3m89/BCoSDeg0yDmwgKCFLpR6k4v6Uk4OEQ9zFrXTjTyW9Z0QGdkr9NWZtVUh",
	"tlS3vrQr6UO4pkpC/CDMTRMRDTC6XMMkptly/RS/TXDqXCtd0Gz5yZi/cUA4Asj2A1RFvunFTGZ3z/px",
	"Njs0oxIj9hwoRPQpe+rML1Qe7dPqQp2QxouMMjEGqHPREjBd6UeMmjK9GniCQFnXW7x4CfQ3ro70UA90",
	"FYfa+lGVHf1Xa924QAJu1iuxq2+FCIYEzJb193Q5sPLFe/WHuvK17/248pxPM6fKA5wvyOnCdsTERHZ4",
	"Z0tE29hrX7YqyhbvMEHqJKuOYuk3xtTRfe/aakCfh3ZB89q6slI5rmfa3USaho77rQW8Xe+EEXj8OOrr",
	"KKa0tpVOn6VOw11omxaY9w5fxG3sygFoW6pP2s1JAqx+rNtA228F2LO0SjHXfFXe5hGLeTDFqQAJF+WG",
	"1Gl4mMzcW2YfVdvBe7blgXwemaDaCYUe7cuDR30aVw8I9Wi/6W5zf+vacbd6d3oMl6qlOeCd/l2Eims2",
	"cNyif3Vk69lT54GrxUmw/Q3VOT6F0SrankbbGLBjmqDN5oxRA+C5ClOJ4nG3qo6b9Ztt1u+VVmy+Sday",
	"3e72xicxf/DwyBc3/wnEHIlgjpoOGvHAHo3pdsj8nF/c/GewQ34mn9lfcyXgh5gYRpVg612wuCCm7wWY",
	"KJaaId6s0R0Cq/qmSnmAt0TW1ta5Q0FmQK2h6VESc3DsdopiT589WGXZ3ELbqTsVxzK3fDH4barMUJDV",
	"XUF5uvFuVMaGDN/MZz08Ncd2K1KNPJA9g7ul+VTE1WVzF6V2UMs/dSr7nBvl2RlIqy/c96QG3vCem5c8",
	"i6RB/aieKNwhQIfhcgAcjzDcPxh6oW8HqDPBCZ88rX/5ZGUQOSAJpju07CIXqa4RMyElhV7LvWID9pgC",
	"eSUpkBJxW5dMuD8otNt8aWuqRc1i5FzLse7iEBIj3fsU/ea6CCDUp87WSvbqM7+sVZa1mG3d6E8s5tfF",
	"Onavq/tuy4+2JW/NQDYlOnqx4IhIONYN7l3d4MZOsPkNyHGqDtfhdnSEh+gI9+ENv56CxsGedVLuXb2s",
	"jjkDSLURpgPIXajQXp4U+rxqV6ve2edCzY2iUHseudUVs7G6na5MnqrfYe6MTa1zq3zsOWk6CkXVPkSo",
	"HWf0uqBhZ/Rm41PFgBMXvl4yYunv1PxWeceLdWpOuwtjjjb4ddrg3AYsI9vgZy1prAP+WN2427N0jvWB",
	"x3SAb31gUY/y8tkBs3Kps+KiqBC7aj1paHcLm2NB4hsrSGzCrU1btvC6z1O6WNGHYxXjsYpxv6oYR/Ud",
	"26jisxZJ1lTyWC95rJfcWb1kRUE3r5vcAyUdvyzTPFktXYeVaNa091gmt9/Vmi1iHrtycw9UZNvCUC+F",
	"OCrCgdWL9uD/oHCvZ6cPY/CC90kLfo9FpyPl1QzedAf+1vXupKFYAh1IyengF+l9dXXyZD/ZO66HMnc7",
	"XNTV5dE/HZZ/qsr0xR2UhW0P4FfmI0ADdtDMR9oGbaGpg5ne3LEgjsM7Xmg7zHxx78Dc9UF8DnDznSw9",
	"vZPm929G2Mvy3Y8KCDyabwxJDWaKSFWfZL6Eq2+2aPRujnj/QGKqvnvhqgPh9zi7BDl7Btx+cTWBKcpT",
	"EZ5NUcohCkmepuguBb2HFLlKQug9uOtkc5b6lcMOPmjNZ3qmza37k83RkMPaujkVKlb9LWwy57lPhez5",
	"Gujha365GVcoW6fS97jqSZ6lFJkaXadyX3Geq+d9+ffvSq1RoPAeCBrozsXn71oU+4tqVaj31kbo+eyD",
	"adP1FfY4Z5yylz4o1Tm1TrJ7TAOBH+7v2I9g61q+zqrB9BpOkW8oRad2ulaHmxbOrwfqHrXvx2LLY7Hl",
	"CAXv7SjuLGlvLVbf/wr1Q5RlUqsuH6O4fM3i7K4+/GinjnZqhKLwXeRiffKvx6TrniZdd5FodeVLnx4p",
	"u+cZikFCzi7JBqRKiy7rIDNp/V1s5I2c0avO2ivVaCNlR7Jxt5t5BaXHz0Z0QLG6trm2HBuuLhXNeJYj",
	"ZVar1f8HAAD//z8HlnZatQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
