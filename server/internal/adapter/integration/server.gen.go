// Package integration provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package integration

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	"github.com/reearth/reearth-cms/server/pkg/id"
	. "github.com/reearth/reearth-cms/server/pkg/integrationapi"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of projects.
	// (GET /{workspaceIdOrAlias}/projects)
	ProjectFilter(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, params ProjectFilterParams) error
	// Create a project
	// (POST /{workspaceIdOrAlias}/projects)
	ProjectCreate(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, params ProjectCreateParams) error
	// Delete a project
	// (DELETE /{workspaceIdOrAlias}/projects/{projectIdOrAlias})
	ProjectDelete(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam) error
	// Returns a project.
	// (GET /{workspaceIdOrAlias}/projects/{projectIdOrAlias})
	ProjectGet(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam) error
	// Update a project.
	// (PATCH /{workspaceIdOrAlias}/projects/{projectIdOrAlias})
	ProjectUpdate(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam) error
	// delete assets in batch
	// (DELETE /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/assets)
	AssetBatchDelete(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam) error
	// Returns a list of assets.
	// (GET /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/assets)
	AssetFilter(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, params AssetFilterParams) error
	// Create an new asset.
	// (POST /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/assets)
	AssetCreate(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam) error
	// Upload an asset.
	// (POST /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/assets/uploads)
	AssetUploadCreate(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam) error
	// delete asset
	// (DELETE /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/assets/{assetId})
	AssetDelete(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, assetId AssetIdParam) error
	// get asset
	// (GET /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/assets/{assetId})
	AssetGet(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, assetId AssetIdParam) error
	// get asset comments
	// (GET /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/assets/{assetId}/comments)
	AssetCommentList(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, assetId AssetIdParam) error
	// create asset comments
	// (POST /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/assets/{assetId}/comments)
	AssetCommentCreate(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, assetId AssetIdParam) error
	// delete asset comments
	// (DELETE /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/assets/{assetId}/comments/{commentId})
	AssetCommentDelete(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, assetId AssetIdParam, commentId CommentIdParam) error
	// Update AssetComment
	// (PATCH /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/assets/{assetId}/comments/{commentId})
	AssetCommentUpdate(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, assetId AssetIdParam, commentId CommentIdParam) error
	// publish asset
	// (POST /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/assets/{assetId}/publish)
	AssetPublish(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, assetId AssetIdParam) error
	// publish asset
	// (POST /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/assets/{assetId}/unpublish)
	AssetUnpublish(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, assetId AssetIdParam) error
	// get asset content
	// (GET /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/assets/{uuid1}/{uuid2}/{filename})
	AssetContentGet(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, uuid1 string, uuid2 string, filename string) error
	// Returns a list of groups in a project.
	// (GET /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/groups)
	GroupFilter(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, params GroupFilterParams) error
	// Create a new group in a project.
	// (POST /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/groups)
	GroupCreate(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, params GroupCreateParams) error
	// Delete a group within a project.
	// (DELETE /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/groups/{groupIdOrKey})
	GroupDelete(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, groupIdOrKey GroupIdOrKeyParam) error
	// Retrieve a group within a project.
	// (GET /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/groups/{groupIdOrKey})
	GroupGet(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, groupIdOrKey GroupIdOrKeyParam) error
	// Update a group's details within a project.
	// (PATCH /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/groups/{groupIdOrKey})
	GroupUpdate(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, groupIdOrKey GroupIdOrKeyParam) error
	// Returns a list of models.
	// (GET /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models)
	ModelFilter(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, params ModelFilterParams) error
	// create a model
	// (POST /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models)
	ModelCreate(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, params ModelCreateParams) error
	// Delete a model.
	// (DELETE /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey})
	ModelDelete(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error
	// Returns a model.
	// (GET /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey})
	ModelGet(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error
	// Update a model.
	// (PATCH /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey})
	ModelUpdate(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error
	// Copy schema and items of a selected model
	// (POST /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey}/copy)
	ModelCopy(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error
	// Import data under the selected model
	// (PUT /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey}/import)
	ModelImport(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error
	// Returns a list of items.
	// (GET /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey}/items)
	ItemFilter(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, params ItemFilterParams) error
	// create an item
	// (POST /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey}/items)
	ItemCreate(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error
	// Returns a CSV that has a list of items as features.
	// (GET /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey}/items.csv)
	ItemsAsCSV(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, params ItemsAsCSVParams) error
	// Returns a GeoJSON that has a list of items as features.
	// (GET /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey}/items.geojson)
	ItemsAsGeoJSON(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, params ItemsAsGeoJSONParams) error
	// delete an item
	// (DELETE /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey}/items/{itemId})
	ItemDelete(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, itemId ItemIdParam) error
	// Returns an item.
	// (GET /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey}/items/{itemId})
	ItemGet(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, itemId ItemIdParam, params ItemGetParams) error
	// Update an item.
	// (PATCH /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey}/items/{itemId})
	ItemUpdate(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, itemId ItemIdParam) error
	// get an item comment
	// (GET /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey}/items/{itemId}/comments)
	ItemCommentList(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, itemId ItemIdParam) error
	// create an item comment
	// (POST /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey}/items/{itemId}/comments)
	ItemCommentCreate(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, itemId ItemIdParam) error
	// delete item comment
	// (DELETE /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey}/items/{itemId}/comments/{commentId})
	ItemCommentDelete(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, itemId ItemIdParam, commentId CommentIdParam) error
	// Update Item Comment
	// (PATCH /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey}/items/{itemId}/comments/{commentId})
	ItemCommentUpdate(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, itemId ItemIdParam, commentId CommentIdParam) error
	// publish item
	// (POST /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey}/items/{itemId}/publish)
	ItemPublish(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, itemId ItemIdParam, params ItemPublishParams) error
	// Returns a metadata schema as json by project and model ID
	// (GET /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey}/metadata_schema.json)
	MetadataSchemaByModelAsJSON(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error
	// Returns a schema as json by project and model ID
	// (GET /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey}/schema.json)
	SchemaByModelAsJSON(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error
	// create a field
	// (POST /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/schemata/{schemaId}/fields)
	FieldCreate(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, schemaId SchemaIdParam) error
	// delete a field
	// (DELETE /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/schemata/{schemaId}/fields/{fieldIdOrKey})
	FieldDelete(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, schemaId SchemaIdParam, fieldIdOrKey FieldIdOrKeyParam) error
	// update a field
	// (PATCH /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/schemata/{schemaId}/fields/{fieldIdOrKey})
	FieldUpdate(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, schemaId SchemaIdParam, fieldIdOrKey FieldIdOrKeyParam) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ProjectFilter converts echo context to params.
func (w *ServerInterfaceWrapper) ProjectFilter(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProjectFilterParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "dir" -------------

	err = runtime.BindQueryParameter("form", true, false, "dir", ctx.QueryParams(), &params.Dir)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dir: %s", err))
	}

	// ------------- Optional query parameter "keyword" -------------

	err = runtime.BindQueryParameter("form", true, false, "keyword", ctx.QueryParams(), &params.Keyword)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keyword: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProjectFilter(ctx, workspaceIdOrAlias, params)
	return err
}

// ProjectCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ProjectCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProjectCreateParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "dir" -------------

	err = runtime.BindQueryParameter("form", true, false, "dir", ctx.QueryParams(), &params.Dir)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dir: %s", err))
	}

	// ------------- Optional query parameter "keyword" -------------

	err = runtime.BindQueryParameter("form", true, false, "keyword", ctx.QueryParams(), &params.Keyword)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keyword: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProjectCreate(ctx, workspaceIdOrAlias, params)
	return err
}

// ProjectDelete converts echo context to params.
func (w *ServerInterfaceWrapper) ProjectDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProjectDelete(ctx, workspaceIdOrAlias, projectIdOrAlias)
	return err
}

// ProjectGet converts echo context to params.
func (w *ServerInterfaceWrapper) ProjectGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProjectGet(ctx, workspaceIdOrAlias, projectIdOrAlias)
	return err
}

// ProjectUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ProjectUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProjectUpdate(ctx, workspaceIdOrAlias, projectIdOrAlias)
	return err
}

// AssetBatchDelete converts echo context to params.
func (w *ServerInterfaceWrapper) AssetBatchDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetBatchDelete(ctx, workspaceIdOrAlias, projectIdOrAlias)
	return err
}

// AssetFilter converts echo context to params.
func (w *ServerInterfaceWrapper) AssetFilter(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AssetFilterParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "dir" -------------

	err = runtime.BindQueryParameter("form", true, false, "dir", ctx.QueryParams(), &params.Dir)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dir: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// ------------- Optional query parameter "keyword" -------------

	err = runtime.BindQueryParameter("form", true, false, "keyword", ctx.QueryParams(), &params.Keyword)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keyword: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetFilter(ctx, workspaceIdOrAlias, projectIdOrAlias, params)
	return err
}

// AssetCreate converts echo context to params.
func (w *ServerInterfaceWrapper) AssetCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetCreate(ctx, workspaceIdOrAlias, projectIdOrAlias)
	return err
}

// AssetUploadCreate converts echo context to params.
func (w *ServerInterfaceWrapper) AssetUploadCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetUploadCreate(ctx, workspaceIdOrAlias, projectIdOrAlias)
	return err
}

// AssetDelete converts echo context to params.
func (w *ServerInterfaceWrapper) AssetDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "assetId" -------------
	var assetId AssetIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "assetId", ctx.Param("assetId"), &assetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetDelete(ctx, workspaceIdOrAlias, projectIdOrAlias, assetId)
	return err
}

// AssetGet converts echo context to params.
func (w *ServerInterfaceWrapper) AssetGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "assetId" -------------
	var assetId AssetIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "assetId", ctx.Param("assetId"), &assetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetGet(ctx, workspaceIdOrAlias, projectIdOrAlias, assetId)
	return err
}

// AssetCommentList converts echo context to params.
func (w *ServerInterfaceWrapper) AssetCommentList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "assetId" -------------
	var assetId AssetIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "assetId", ctx.Param("assetId"), &assetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetCommentList(ctx, workspaceIdOrAlias, projectIdOrAlias, assetId)
	return err
}

// AssetCommentCreate converts echo context to params.
func (w *ServerInterfaceWrapper) AssetCommentCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "assetId" -------------
	var assetId AssetIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "assetId", ctx.Param("assetId"), &assetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetCommentCreate(ctx, workspaceIdOrAlias, projectIdOrAlias, assetId)
	return err
}

// AssetCommentDelete converts echo context to params.
func (w *ServerInterfaceWrapper) AssetCommentDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "assetId" -------------
	var assetId AssetIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "assetId", ctx.Param("assetId"), &assetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetId: %s", err))
	}

	// ------------- Path parameter "commentId" -------------
	var commentId CommentIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "commentId", ctx.Param("commentId"), &commentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commentId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetCommentDelete(ctx, workspaceIdOrAlias, projectIdOrAlias, assetId, commentId)
	return err
}

// AssetCommentUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) AssetCommentUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "assetId" -------------
	var assetId AssetIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "assetId", ctx.Param("assetId"), &assetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetId: %s", err))
	}

	// ------------- Path parameter "commentId" -------------
	var commentId CommentIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "commentId", ctx.Param("commentId"), &commentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commentId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetCommentUpdate(ctx, workspaceIdOrAlias, projectIdOrAlias, assetId, commentId)
	return err
}

// AssetPublish converts echo context to params.
func (w *ServerInterfaceWrapper) AssetPublish(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "assetId" -------------
	var assetId AssetIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "assetId", ctx.Param("assetId"), &assetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetPublish(ctx, workspaceIdOrAlias, projectIdOrAlias, assetId)
	return err
}

// AssetUnpublish converts echo context to params.
func (w *ServerInterfaceWrapper) AssetUnpublish(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "assetId" -------------
	var assetId AssetIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "assetId", ctx.Param("assetId"), &assetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetUnpublish(ctx, workspaceIdOrAlias, projectIdOrAlias, assetId)
	return err
}

// AssetContentGet converts echo context to params.
func (w *ServerInterfaceWrapper) AssetContentGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "uuid1" -------------
	var uuid1 string

	err = runtime.BindStyledParameterWithOptions("simple", "uuid1", ctx.Param("uuid1"), &uuid1, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid1: %s", err))
	}

	// ------------- Path parameter "uuid2" -------------
	var uuid2 string

	err = runtime.BindStyledParameterWithOptions("simple", "uuid2", ctx.Param("uuid2"), &uuid2, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid2: %s", err))
	}

	// ------------- Path parameter "filename" -------------
	var filename string

	err = runtime.BindStyledParameterWithOptions("simple", "filename", ctx.Param("filename"), &filename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filename: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssetContentGet(ctx, workspaceIdOrAlias, projectIdOrAlias, uuid1, uuid2, filename)
	return err
}

// GroupFilter converts echo context to params.
func (w *ServerInterfaceWrapper) GroupFilter(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GroupFilterParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "dir" -------------

	err = runtime.BindQueryParameter("form", true, false, "dir", ctx.QueryParams(), &params.Dir)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dir: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GroupFilter(ctx, workspaceIdOrAlias, projectIdOrAlias, params)
	return err
}

// GroupCreate converts echo context to params.
func (w *ServerInterfaceWrapper) GroupCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GroupCreateParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "dir" -------------

	err = runtime.BindQueryParameter("form", true, false, "dir", ctx.QueryParams(), &params.Dir)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dir: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GroupCreate(ctx, workspaceIdOrAlias, projectIdOrAlias, params)
	return err
}

// GroupDelete converts echo context to params.
func (w *ServerInterfaceWrapper) GroupDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "groupIdOrKey" -------------
	var groupIdOrKey GroupIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "groupIdOrKey", ctx.Param("groupIdOrKey"), &groupIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GroupDelete(ctx, workspaceIdOrAlias, projectIdOrAlias, groupIdOrKey)
	return err
}

// GroupGet converts echo context to params.
func (w *ServerInterfaceWrapper) GroupGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "groupIdOrKey" -------------
	var groupIdOrKey GroupIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "groupIdOrKey", ctx.Param("groupIdOrKey"), &groupIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GroupGet(ctx, workspaceIdOrAlias, projectIdOrAlias, groupIdOrKey)
	return err
}

// GroupUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) GroupUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "groupIdOrKey" -------------
	var groupIdOrKey GroupIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "groupIdOrKey", ctx.Param("groupIdOrKey"), &groupIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GroupUpdate(ctx, workspaceIdOrAlias, projectIdOrAlias, groupIdOrKey)
	return err
}

// ModelFilter converts echo context to params.
func (w *ServerInterfaceWrapper) ModelFilter(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ModelFilterParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "dir" -------------

	err = runtime.BindQueryParameter("form", true, false, "dir", ctx.QueryParams(), &params.Dir)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dir: %s", err))
	}

	// ------------- Optional query parameter "keyword" -------------

	err = runtime.BindQueryParameter("form", true, false, "keyword", ctx.QueryParams(), &params.Keyword)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keyword: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ModelFilter(ctx, workspaceIdOrAlias, projectIdOrAlias, params)
	return err
}

// ModelCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ModelCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ModelCreateParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "dir" -------------

	err = runtime.BindQueryParameter("form", true, false, "dir", ctx.QueryParams(), &params.Dir)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dir: %s", err))
	}

	// ------------- Optional query parameter "keyword" -------------

	err = runtime.BindQueryParameter("form", true, false, "keyword", ctx.QueryParams(), &params.Keyword)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keyword: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ModelCreate(ctx, workspaceIdOrAlias, projectIdOrAlias, params)
	return err
}

// ModelDelete converts echo context to params.
func (w *ServerInterfaceWrapper) ModelDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ModelDelete(ctx, workspaceIdOrAlias, projectIdOrAlias, modelIdOrKey)
	return err
}

// ModelGet converts echo context to params.
func (w *ServerInterfaceWrapper) ModelGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ModelGet(ctx, workspaceIdOrAlias, projectIdOrAlias, modelIdOrKey)
	return err
}

// ModelUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ModelUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ModelUpdate(ctx, workspaceIdOrAlias, projectIdOrAlias, modelIdOrKey)
	return err
}

// ModelCopy converts echo context to params.
func (w *ServerInterfaceWrapper) ModelCopy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ModelCopy(ctx, workspaceIdOrAlias, projectIdOrAlias, modelIdOrKey)
	return err
}

// ModelImport converts echo context to params.
func (w *ServerInterfaceWrapper) ModelImport(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ModelImport(ctx, workspaceIdOrAlias, projectIdOrAlias, modelIdOrKey)
	return err
}

// ItemFilter converts echo context to params.
func (w *ServerInterfaceWrapper) ItemFilter(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ItemFilterParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "dir" -------------

	err = runtime.BindQueryParameter("form", true, false, "dir", ctx.QueryParams(), &params.Dir)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dir: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// ------------- Optional query parameter "ref" -------------

	err = runtime.BindQueryParameter("form", true, false, "ref", ctx.QueryParams(), &params.Ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	// ------------- Optional query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, false, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// ------------- Optional query parameter "keyword" -------------

	err = runtime.BindQueryParameter("form", true, false, "keyword", ctx.QueryParams(), &params.Keyword)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keyword: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemFilter(ctx, workspaceIdOrAlias, projectIdOrAlias, modelIdOrKey, params)
	return err
}

// ItemCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ItemCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemCreate(ctx, workspaceIdOrAlias, projectIdOrAlias, modelIdOrKey)
	return err
}

// ItemsAsCSV converts echo context to params.
func (w *ServerInterfaceWrapper) ItemsAsCSV(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ItemsAsCSVParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// ------------- Optional query parameter "ref" -------------

	err = runtime.BindQueryParameter("form", true, false, "ref", ctx.QueryParams(), &params.Ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemsAsCSV(ctx, workspaceIdOrAlias, projectIdOrAlias, modelIdOrKey, params)
	return err
}

// ItemsAsGeoJSON converts echo context to params.
func (w *ServerInterfaceWrapper) ItemsAsGeoJSON(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ItemsAsGeoJSONParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// ------------- Optional query parameter "ref" -------------

	err = runtime.BindQueryParameter("form", true, false, "ref", ctx.QueryParams(), &params.Ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemsAsGeoJSON(ctx, workspaceIdOrAlias, projectIdOrAlias, modelIdOrKey, params)
	return err
}

// ItemDelete converts echo context to params.
func (w *ServerInterfaceWrapper) ItemDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	// ------------- Path parameter "itemId" -------------
	var itemId ItemIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", ctx.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemDelete(ctx, workspaceIdOrAlias, projectIdOrAlias, modelIdOrKey, itemId)
	return err
}

// ItemGet converts echo context to params.
func (w *ServerInterfaceWrapper) ItemGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	// ------------- Path parameter "itemId" -------------
	var itemId ItemIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", ctx.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ItemGetParams
	// ------------- Optional query parameter "ref" -------------

	err = runtime.BindQueryParameter("form", true, false, "ref", ctx.QueryParams(), &params.Ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	// ------------- Optional query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, false, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemGet(ctx, workspaceIdOrAlias, projectIdOrAlias, modelIdOrKey, itemId, params)
	return err
}

// ItemUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ItemUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	// ------------- Path parameter "itemId" -------------
	var itemId ItemIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", ctx.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemUpdate(ctx, workspaceIdOrAlias, projectIdOrAlias, modelIdOrKey, itemId)
	return err
}

// ItemCommentList converts echo context to params.
func (w *ServerInterfaceWrapper) ItemCommentList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	// ------------- Path parameter "itemId" -------------
	var itemId ItemIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", ctx.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemCommentList(ctx, workspaceIdOrAlias, projectIdOrAlias, modelIdOrKey, itemId)
	return err
}

// ItemCommentCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ItemCommentCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	// ------------- Path parameter "itemId" -------------
	var itemId ItemIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", ctx.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemCommentCreate(ctx, workspaceIdOrAlias, projectIdOrAlias, modelIdOrKey, itemId)
	return err
}

// ItemCommentDelete converts echo context to params.
func (w *ServerInterfaceWrapper) ItemCommentDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	// ------------- Path parameter "itemId" -------------
	var itemId ItemIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", ctx.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	// ------------- Path parameter "commentId" -------------
	var commentId CommentIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "commentId", ctx.Param("commentId"), &commentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commentId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemCommentDelete(ctx, workspaceIdOrAlias, projectIdOrAlias, modelIdOrKey, itemId, commentId)
	return err
}

// ItemCommentUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ItemCommentUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	// ------------- Path parameter "itemId" -------------
	var itemId ItemIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", ctx.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	// ------------- Path parameter "commentId" -------------
	var commentId CommentIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "commentId", ctx.Param("commentId"), &commentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commentId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemCommentUpdate(ctx, workspaceIdOrAlias, projectIdOrAlias, modelIdOrKey, itemId, commentId)
	return err
}

// ItemPublish converts echo context to params.
func (w *ServerInterfaceWrapper) ItemPublish(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	// ------------- Path parameter "itemId" -------------
	var itemId ItemIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", ctx.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ItemPublishParams
	// ------------- Optional query parameter "asset" -------------

	err = runtime.BindQueryParameter("form", true, false, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ItemPublish(ctx, workspaceIdOrAlias, projectIdOrAlias, modelIdOrKey, itemId, params)
	return err
}

// MetadataSchemaByModelAsJSON converts echo context to params.
func (w *ServerInterfaceWrapper) MetadataSchemaByModelAsJSON(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MetadataSchemaByModelAsJSON(ctx, workspaceIdOrAlias, projectIdOrAlias, modelIdOrKey)
	return err
}

// SchemaByModelAsJSON converts echo context to params.
func (w *ServerInterfaceWrapper) SchemaByModelAsJSON(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "modelIdOrKey" -------------
	var modelIdOrKey ModelIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "modelIdOrKey", ctx.Param("modelIdOrKey"), &modelIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modelIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SchemaByModelAsJSON(ctx, workspaceIdOrAlias, projectIdOrAlias, modelIdOrKey)
	return err
}

// FieldCreate converts echo context to params.
func (w *ServerInterfaceWrapper) FieldCreate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "schemaId" -------------
	var schemaId SchemaIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "schemaId", ctx.Param("schemaId"), &schemaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter schemaId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FieldCreate(ctx, workspaceIdOrAlias, projectIdOrAlias, schemaId)
	return err
}

// FieldDelete converts echo context to params.
func (w *ServerInterfaceWrapper) FieldDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "schemaId" -------------
	var schemaId SchemaIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "schemaId", ctx.Param("schemaId"), &schemaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter schemaId: %s", err))
	}

	// ------------- Path parameter "fieldIdOrKey" -------------
	var fieldIdOrKey FieldIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "fieldIdOrKey", ctx.Param("fieldIdOrKey"), &fieldIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fieldIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FieldDelete(ctx, workspaceIdOrAlias, projectIdOrAlias, schemaId, fieldIdOrKey)
	return err
}

// FieldUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) FieldUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceIdOrAlias" -------------
	var workspaceIdOrAlias WorkspaceIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "workspaceIdOrAlias", ctx.Param("workspaceIdOrAlias"), &workspaceIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdOrAlias: %s", err))
	}

	// ------------- Path parameter "projectIdOrAlias" -------------
	var projectIdOrAlias ProjectIdOrAliasParam

	err = runtime.BindStyledParameterWithOptions("simple", "projectIdOrAlias", ctx.Param("projectIdOrAlias"), &projectIdOrAlias, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectIdOrAlias: %s", err))
	}

	// ------------- Path parameter "schemaId" -------------
	var schemaId SchemaIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "schemaId", ctx.Param("schemaId"), &schemaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter schemaId: %s", err))
	}

	// ------------- Path parameter "fieldIdOrKey" -------------
	var fieldIdOrKey FieldIdOrKeyParam

	err = runtime.BindStyledParameterWithOptions("simple", "fieldIdOrKey", ctx.Param("fieldIdOrKey"), &fieldIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fieldIdOrKey: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FieldUpdate(ctx, workspaceIdOrAlias, projectIdOrAlias, schemaId, fieldIdOrKey)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/:workspaceIdOrAlias/projects", wrapper.ProjectFilter)
	router.POST(baseURL+"/:workspaceIdOrAlias/projects", wrapper.ProjectCreate)
	router.DELETE(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias", wrapper.ProjectDelete)
	router.GET(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias", wrapper.ProjectGet)
	router.PATCH(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias", wrapper.ProjectUpdate)
	router.DELETE(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/assets", wrapper.AssetBatchDelete)
	router.GET(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/assets", wrapper.AssetFilter)
	router.POST(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/assets", wrapper.AssetCreate)
	router.POST(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/assets/uploads", wrapper.AssetUploadCreate)
	router.DELETE(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/assets/:assetId", wrapper.AssetDelete)
	router.GET(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/assets/:assetId", wrapper.AssetGet)
	router.GET(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/assets/:assetId/comments", wrapper.AssetCommentList)
	router.POST(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/assets/:assetId/comments", wrapper.AssetCommentCreate)
	router.DELETE(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/assets/:assetId/comments/:commentId", wrapper.AssetCommentDelete)
	router.PATCH(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/assets/:assetId/comments/:commentId", wrapper.AssetCommentUpdate)
	router.POST(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/assets/:assetId/publish", wrapper.AssetPublish)
	router.POST(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/assets/:assetId/unpublish", wrapper.AssetUnpublish)
	router.GET(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/assets/:uuid1/:uuid2/:filename", wrapper.AssetContentGet)
	router.GET(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/groups", wrapper.GroupFilter)
	router.POST(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/groups", wrapper.GroupCreate)
	router.DELETE(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/groups/:groupIdOrKey", wrapper.GroupDelete)
	router.GET(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/groups/:groupIdOrKey", wrapper.GroupGet)
	router.PATCH(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/groups/:groupIdOrKey", wrapper.GroupUpdate)
	router.GET(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/models", wrapper.ModelFilter)
	router.POST(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/models", wrapper.ModelCreate)
	router.DELETE(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/models/:modelIdOrKey", wrapper.ModelDelete)
	router.GET(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/models/:modelIdOrKey", wrapper.ModelGet)
	router.PATCH(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/models/:modelIdOrKey", wrapper.ModelUpdate)
	router.POST(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/models/:modelIdOrKey/copy", wrapper.ModelCopy)
	router.PUT(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/models/:modelIdOrKey/import", wrapper.ModelImport)
	router.GET(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/models/:modelIdOrKey/items", wrapper.ItemFilter)
	router.POST(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/models/:modelIdOrKey/items", wrapper.ItemCreate)
	router.GET(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/models/:modelIdOrKey/items.csv", wrapper.ItemsAsCSV)
	router.GET(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/models/:modelIdOrKey/items.geojson", wrapper.ItemsAsGeoJSON)
	router.DELETE(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/models/:modelIdOrKey/items/:itemId", wrapper.ItemDelete)
	router.GET(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/models/:modelIdOrKey/items/:itemId", wrapper.ItemGet)
	router.PATCH(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/models/:modelIdOrKey/items/:itemId", wrapper.ItemUpdate)
	router.GET(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/models/:modelIdOrKey/items/:itemId/comments", wrapper.ItemCommentList)
	router.POST(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/models/:modelIdOrKey/items/:itemId/comments", wrapper.ItemCommentCreate)
	router.DELETE(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/models/:modelIdOrKey/items/:itemId/comments/:commentId", wrapper.ItemCommentDelete)
	router.PATCH(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/models/:modelIdOrKey/items/:itemId/comments/:commentId", wrapper.ItemCommentUpdate)
	router.POST(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/models/:modelIdOrKey/items/:itemId/publish", wrapper.ItemPublish)
	router.GET(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/models/:modelIdOrKey/metadata_schema.json", wrapper.MetadataSchemaByModelAsJSON)
	router.GET(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/models/:modelIdOrKey/schema.json", wrapper.SchemaByModelAsJSON)
	router.POST(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/schemata/:schemaId/fields", wrapper.FieldCreate)
	router.DELETE(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/schemata/:schemaId/fields/:fieldIdOrKey", wrapper.FieldDelete)
	router.PATCH(baseURL+"/:workspaceIdOrAlias/projects/:projectIdOrAlias/schemata/:schemaId/fields/:fieldIdOrKey", wrapper.FieldUpdate)

}

type NotFoundErrorResponse struct {
}

type UnauthorizedErrorResponse struct {
}

type ProjectFilterRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	Params             ProjectFilterParams
}

type ProjectFilterResponseObject interface {
	VisitProjectFilterResponse(w http.ResponseWriter) error
}

type ProjectFilter200JSONResponse struct {
	Page       *int       `json:"page,omitempty"`
	PerPage    *int       `json:"perPage,omitempty"`
	Projects   *[]Project `json:"projects,omitempty"`
	TotalCount *int       `json:"totalCount,omitempty"`
}

func (response ProjectFilter200JSONResponse) VisitProjectFilterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProjectFilter400Response struct {
}

func (response ProjectFilter400Response) VisitProjectFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ProjectFilter401Response = UnauthorizedErrorResponse

func (response ProjectFilter401Response) VisitProjectFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ProjectFilter404Response = NotFoundErrorResponse

func (response ProjectFilter404Response) VisitProjectFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ProjectFilter500Response struct {
}

func (response ProjectFilter500Response) VisitProjectFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ProjectCreateRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	Params             ProjectCreateParams
	Body               *ProjectCreateJSONRequestBody
}

type ProjectCreateResponseObject interface {
	VisitProjectCreateResponse(w http.ResponseWriter) error
}

type ProjectCreate201JSONResponse Project

func (response ProjectCreate201JSONResponse) VisitProjectCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ProjectCreate400Response struct {
}

func (response ProjectCreate400Response) VisitProjectCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ProjectCreate401Response = UnauthorizedErrorResponse

func (response ProjectCreate401Response) VisitProjectCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ProjectCreate404Response struct {
}

func (response ProjectCreate404Response) VisitProjectCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ProjectCreate500Response struct {
}

func (response ProjectCreate500Response) VisitProjectCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ProjectDeleteRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
}

type ProjectDeleteResponseObject interface {
	VisitProjectDeleteResponse(w http.ResponseWriter) error
}

type ProjectDelete200JSONResponse struct {
	Id id.ProjectID `json:"id"`
}

func (response ProjectDelete200JSONResponse) VisitProjectDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProjectDelete400Response struct {
}

func (response ProjectDelete400Response) VisitProjectDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ProjectDelete401Response = UnauthorizedErrorResponse

func (response ProjectDelete401Response) VisitProjectDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ProjectDelete404Response struct {
}

func (response ProjectDelete404Response) VisitProjectDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ProjectDelete500Response struct {
}

func (response ProjectDelete500Response) VisitProjectDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ProjectGetRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
}

type ProjectGetResponseObject interface {
	VisitProjectGetResponse(w http.ResponseWriter) error
}

type ProjectGet200JSONResponse Project

func (response ProjectGet200JSONResponse) VisitProjectGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProjectGet400Response struct {
}

func (response ProjectGet400Response) VisitProjectGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ProjectGet401Response = UnauthorizedErrorResponse

func (response ProjectGet401Response) VisitProjectGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ProjectGet404Response struct {
}

func (response ProjectGet404Response) VisitProjectGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ProjectGet500Response struct {
}

func (response ProjectGet500Response) VisitProjectGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ProjectUpdateRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	Body               *ProjectUpdateJSONRequestBody
}

type ProjectUpdateResponseObject interface {
	VisitProjectUpdateResponse(w http.ResponseWriter) error
}

type ProjectUpdate200JSONResponse Project

func (response ProjectUpdate200JSONResponse) VisitProjectUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProjectUpdate400Response struct {
}

func (response ProjectUpdate400Response) VisitProjectUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ProjectUpdate401Response = UnauthorizedErrorResponse

func (response ProjectUpdate401Response) VisitProjectUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ProjectUpdate404Response struct {
}

func (response ProjectUpdate404Response) VisitProjectUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ProjectUpdate500Response struct {
}

func (response ProjectUpdate500Response) VisitProjectUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type AssetBatchDeleteRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	Body               *AssetBatchDeleteJSONRequestBody
}

type AssetBatchDeleteResponseObject interface {
	VisitAssetBatchDeleteResponse(w http.ResponseWriter) error
}

type AssetBatchDelete200JSONResponse struct {
	Ids *[]id.AssetID `json:"ids,omitempty"`
}

func (response AssetBatchDelete200JSONResponse) VisitAssetBatchDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetBatchDelete400Response struct {
}

func (response AssetBatchDelete400Response) VisitAssetBatchDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetBatchDelete401Response = UnauthorizedErrorResponse

func (response AssetBatchDelete401Response) VisitAssetBatchDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetBatchDelete404Response struct {
}

func (response AssetBatchDelete404Response) VisitAssetBatchDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetFilterRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	Params             AssetFilterParams
}

type AssetFilterResponseObject interface {
	VisitAssetFilterResponse(w http.ResponseWriter) error
}

type AssetFilter200JSONResponse struct {
	Items      *[]Asset `json:"items,omitempty"`
	Page       *int     `json:"page,omitempty"`
	PerPage    *int     `json:"perPage,omitempty"`
	TotalCount *int     `json:"totalCount,omitempty"`
}

func (response AssetFilter200JSONResponse) VisitAssetFilterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetFilter400Response struct {
}

func (response AssetFilter400Response) VisitAssetFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetFilter401Response = UnauthorizedErrorResponse

func (response AssetFilter401Response) VisitAssetFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetFilter404Response struct {
}

func (response AssetFilter404Response) VisitAssetFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetCreateRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	JSONBody           *AssetCreateJSONRequestBody
	MultipartBody      *multipart.Reader
}

type AssetCreateResponseObject interface {
	VisitAssetCreateResponse(w http.ResponseWriter) error
}

type AssetCreate200JSONResponse Asset

func (response AssetCreate200JSONResponse) VisitAssetCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetCreate400Response struct {
}

func (response AssetCreate400Response) VisitAssetCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetCreate401Response = UnauthorizedErrorResponse

func (response AssetCreate401Response) VisitAssetCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetCreate404Response struct {
}

func (response AssetCreate404Response) VisitAssetCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetUploadCreateRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	Body               *AssetUploadCreateJSONRequestBody
}

type AssetUploadCreateResponseObject interface {
	VisitAssetUploadCreateResponse(w http.ResponseWriter) error
}

type AssetUploadCreate200JSONResponse struct {
	ContentEncoding *string `json:"contentEncoding,omitempty"`
	ContentLength   *int    `json:"contentLength,omitempty"`
	ContentType     *string `json:"contentType,omitempty"`
	Next            *string `json:"next,omitempty"`
	Token           *string `json:"token,omitempty"`
	Url             *string `json:"url,omitempty"`
}

func (response AssetUploadCreate200JSONResponse) VisitAssetUploadCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetUploadCreate400Response struct {
}

func (response AssetUploadCreate400Response) VisitAssetUploadCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetUploadCreate401Response = UnauthorizedErrorResponse

func (response AssetUploadCreate401Response) VisitAssetUploadCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetUploadCreate404Response struct {
}

func (response AssetUploadCreate404Response) VisitAssetUploadCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetDeleteRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	AssetId            AssetIdParam            `json:"assetId"`
}

type AssetDeleteResponseObject interface {
	VisitAssetDeleteResponse(w http.ResponseWriter) error
}

type AssetDelete200JSONResponse struct {
	Id *id.AssetID `json:"id,omitempty"`
}

func (response AssetDelete200JSONResponse) VisitAssetDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetDelete400Response struct {
}

func (response AssetDelete400Response) VisitAssetDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetDelete401Response = UnauthorizedErrorResponse

func (response AssetDelete401Response) VisitAssetDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetDelete404Response struct {
}

func (response AssetDelete404Response) VisitAssetDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetGetRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	AssetId            AssetIdParam            `json:"assetId"`
}

type AssetGetResponseObject interface {
	VisitAssetGetResponse(w http.ResponseWriter) error
}

type AssetGet200JSONResponse Asset

func (response AssetGet200JSONResponse) VisitAssetGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetGet400Response struct {
}

func (response AssetGet400Response) VisitAssetGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetGet401Response = UnauthorizedErrorResponse

func (response AssetGet401Response) VisitAssetGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetGet404Response struct {
}

func (response AssetGet404Response) VisitAssetGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetCommentListRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	AssetId            AssetIdParam            `json:"assetId"`
}

type AssetCommentListResponseObject interface {
	VisitAssetCommentListResponse(w http.ResponseWriter) error
}

type AssetCommentList200JSONResponse struct {
	Comments *[]Comment `json:"comments,omitempty"`
}

func (response AssetCommentList200JSONResponse) VisitAssetCommentListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetCommentList400Response struct {
}

func (response AssetCommentList400Response) VisitAssetCommentListResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetCommentList401Response = UnauthorizedErrorResponse

func (response AssetCommentList401Response) VisitAssetCommentListResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetCommentList404Response struct {
}

func (response AssetCommentList404Response) VisitAssetCommentListResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetCommentCreateRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	AssetId            AssetIdParam            `json:"assetId"`
	Body               *AssetCommentCreateJSONRequestBody
}

type AssetCommentCreateResponseObject interface {
	VisitAssetCommentCreateResponse(w http.ResponseWriter) error
}

type AssetCommentCreate200JSONResponse Comment

func (response AssetCommentCreate200JSONResponse) VisitAssetCommentCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetCommentCreate400Response struct {
}

func (response AssetCommentCreate400Response) VisitAssetCommentCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetCommentCreate401Response = UnauthorizedErrorResponse

func (response AssetCommentCreate401Response) VisitAssetCommentCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetCommentCreate404Response struct {
}

func (response AssetCommentCreate404Response) VisitAssetCommentCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetCommentDeleteRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	AssetId            AssetIdParam            `json:"assetId"`
	CommentId          CommentIdParam          `json:"commentId"`
}

type AssetCommentDeleteResponseObject interface {
	VisitAssetCommentDeleteResponse(w http.ResponseWriter) error
}

type AssetCommentDelete200JSONResponse struct {
	Id *id.CommentID `json:"id,omitempty"`
}

func (response AssetCommentDelete200JSONResponse) VisitAssetCommentDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetCommentDelete400Response struct {
}

func (response AssetCommentDelete400Response) VisitAssetCommentDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetCommentDelete401Response = UnauthorizedErrorResponse

func (response AssetCommentDelete401Response) VisitAssetCommentDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetCommentDelete404Response struct {
}

func (response AssetCommentDelete404Response) VisitAssetCommentDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetCommentUpdateRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	AssetId            AssetIdParam            `json:"assetId"`
	CommentId          CommentIdParam          `json:"commentId"`
	Body               *AssetCommentUpdateJSONRequestBody
}

type AssetCommentUpdateResponseObject interface {
	VisitAssetCommentUpdateResponse(w http.ResponseWriter) error
}

type AssetCommentUpdate200JSONResponse Comment

func (response AssetCommentUpdate200JSONResponse) VisitAssetCommentUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetCommentUpdate400Response struct {
}

func (response AssetCommentUpdate400Response) VisitAssetCommentUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetCommentUpdate401Response = UnauthorizedErrorResponse

func (response AssetCommentUpdate401Response) VisitAssetCommentUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetCommentUpdate404Response struct {
}

func (response AssetCommentUpdate404Response) VisitAssetCommentUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetPublishRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	AssetId            AssetIdParam            `json:"assetId"`
}

type AssetPublishResponseObject interface {
	VisitAssetPublishResponse(w http.ResponseWriter) error
}

type AssetPublish200JSONResponse Asset

func (response AssetPublish200JSONResponse) VisitAssetPublishResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetPublish400Response struct {
}

func (response AssetPublish400Response) VisitAssetPublishResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetPublish401Response = UnauthorizedErrorResponse

func (response AssetPublish401Response) VisitAssetPublishResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetPublish404Response struct {
}

func (response AssetPublish404Response) VisitAssetPublishResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetUnpublishRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	AssetId            AssetIdParam            `json:"assetId"`
}

type AssetUnpublishResponseObject interface {
	VisitAssetUnpublishResponse(w http.ResponseWriter) error
}

type AssetUnpublish200JSONResponse Asset

func (response AssetUnpublish200JSONResponse) VisitAssetUnpublishResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AssetUnpublish400Response struct {
}

func (response AssetUnpublish400Response) VisitAssetUnpublishResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetUnpublish401Response = UnauthorizedErrorResponse

func (response AssetUnpublish401Response) VisitAssetUnpublishResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetUnpublish404Response struct {
}

func (response AssetUnpublish404Response) VisitAssetUnpublishResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AssetContentGetRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	Uuid1              string                  `json:"uuid1"`
	Uuid2              string                  `json:"uuid2"`
	Filename           string                  `json:"filename"`
}

type AssetContentGetResponseObject interface {
	VisitAssetContentGetResponse(w http.ResponseWriter) error
}

type AssetContentGet200ApplicationoctetStreamResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response AssetContentGet200ApplicationoctetStreamResponse) VisitAssetContentGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/octet-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type AssetContentGet400Response struct {
}

func (response AssetContentGet400Response) VisitAssetContentGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AssetContentGet401Response = UnauthorizedErrorResponse

func (response AssetContentGet401Response) VisitAssetContentGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AssetContentGet404Response struct {
}

func (response AssetContentGet404Response) VisitAssetContentGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GroupFilterRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	Params             GroupFilterParams
}

type GroupFilterResponseObject interface {
	VisitGroupFilterResponse(w http.ResponseWriter) error
}

type GroupFilter200JSONResponse struct {
	Groups     *[]Group `json:"groups,omitempty"`
	Page       *int     `json:"page,omitempty"`
	PerPage    *int     `json:"perPage,omitempty"`
	TotalCount *int     `json:"totalCount,omitempty"`
}

func (response GroupFilter200JSONResponse) VisitGroupFilterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GroupFilter400Response struct {
}

func (response GroupFilter400Response) VisitGroupFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GroupFilter401Response = UnauthorizedErrorResponse

func (response GroupFilter401Response) VisitGroupFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GroupFilter404Response struct {
}

func (response GroupFilter404Response) VisitGroupFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GroupFilter500Response struct {
}

func (response GroupFilter500Response) VisitGroupFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GroupCreateRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	Params             GroupCreateParams
	Body               *GroupCreateJSONRequestBody
}

type GroupCreateResponseObject interface {
	VisitGroupCreateResponse(w http.ResponseWriter) error
}

type GroupCreate201JSONResponse Group

func (response GroupCreate201JSONResponse) VisitGroupCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type GroupCreate400Response struct {
}

func (response GroupCreate400Response) VisitGroupCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GroupCreate401Response = UnauthorizedErrorResponse

func (response GroupCreate401Response) VisitGroupCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GroupCreate500Response struct {
}

func (response GroupCreate500Response) VisitGroupCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GroupDeleteRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	GroupIdOrKey       GroupIdOrKeyParam       `json:"groupIdOrKey"`
}

type GroupDeleteResponseObject interface {
	VisitGroupDeleteResponse(w http.ResponseWriter) error
}

type GroupDelete200JSONResponse struct {
	Id *id.GroupID `json:"id,omitempty"`
}

func (response GroupDelete200JSONResponse) VisitGroupDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GroupDelete400Response struct {
}

func (response GroupDelete400Response) VisitGroupDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GroupDelete401Response = UnauthorizedErrorResponse

func (response GroupDelete401Response) VisitGroupDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GroupDelete404Response struct {
}

func (response GroupDelete404Response) VisitGroupDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GroupDelete500Response struct {
}

func (response GroupDelete500Response) VisitGroupDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GroupGetRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	GroupIdOrKey       GroupIdOrKeyParam       `json:"groupIdOrKey"`
}

type GroupGetResponseObject interface {
	VisitGroupGetResponse(w http.ResponseWriter) error
}

type GroupGet200JSONResponse Group

func (response GroupGet200JSONResponse) VisitGroupGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GroupGet400Response struct {
}

func (response GroupGet400Response) VisitGroupGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GroupGet401Response = UnauthorizedErrorResponse

func (response GroupGet401Response) VisitGroupGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GroupGet404Response struct {
}

func (response GroupGet404Response) VisitGroupGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GroupGet500Response struct {
}

func (response GroupGet500Response) VisitGroupGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GroupUpdateRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	GroupIdOrKey       GroupIdOrKeyParam       `json:"groupIdOrKey"`
	Body               *GroupUpdateJSONRequestBody
}

type GroupUpdateResponseObject interface {
	VisitGroupUpdateResponse(w http.ResponseWriter) error
}

type GroupUpdate200JSONResponse Group

func (response GroupUpdate200JSONResponse) VisitGroupUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GroupUpdate400Response struct {
}

func (response GroupUpdate400Response) VisitGroupUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GroupUpdate401Response = UnauthorizedErrorResponse

func (response GroupUpdate401Response) VisitGroupUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GroupUpdate404Response struct {
}

func (response GroupUpdate404Response) VisitGroupUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GroupUpdate500Response struct {
}

func (response GroupUpdate500Response) VisitGroupUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ModelFilterRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	Params             ModelFilterParams
}

type ModelFilterResponseObject interface {
	VisitModelFilterResponse(w http.ResponseWriter) error
}

type ModelFilter200JSONResponse struct {
	Models     *[]Model `json:"models,omitempty"`
	Page       *int     `json:"page,omitempty"`
	PerPage    *int     `json:"perPage,omitempty"`
	TotalCount *int     `json:"totalCount,omitempty"`
}

func (response ModelFilter200JSONResponse) VisitModelFilterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModelFilter400Response struct {
}

func (response ModelFilter400Response) VisitModelFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ModelFilter401Response = UnauthorizedErrorResponse

func (response ModelFilter401Response) VisitModelFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ModelFilter404Response struct {
}

func (response ModelFilter404Response) VisitModelFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ModelFilter500Response struct {
}

func (response ModelFilter500Response) VisitModelFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ModelCreateRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	Params             ModelCreateParams
	Body               *ModelCreateJSONRequestBody
}

type ModelCreateResponseObject interface {
	VisitModelCreateResponse(w http.ResponseWriter) error
}

type ModelCreate200JSONResponse Model

func (response ModelCreate200JSONResponse) VisitModelCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModelCreate400Response struct {
}

func (response ModelCreate400Response) VisitModelCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ModelCreate401Response = UnauthorizedErrorResponse

func (response ModelCreate401Response) VisitModelCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ModelDeleteRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	ModelIdOrKey       ModelIdOrKeyParam       `json:"modelIdOrKey"`
}

type ModelDeleteResponseObject interface {
	VisitModelDeleteResponse(w http.ResponseWriter) error
}

type ModelDelete200JSONResponse struct {
	Id id.ModelID `json:"id"`
}

func (response ModelDelete200JSONResponse) VisitModelDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModelDelete400Response struct {
}

func (response ModelDelete400Response) VisitModelDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ModelDelete401Response = UnauthorizedErrorResponse

func (response ModelDelete401Response) VisitModelDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ModelDelete404Response struct {
}

func (response ModelDelete404Response) VisitModelDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ModelDelete500Response struct {
}

func (response ModelDelete500Response) VisitModelDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ModelGetRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	ModelIdOrKey       ModelIdOrKeyParam       `json:"modelIdOrKey"`
}

type ModelGetResponseObject interface {
	VisitModelGetResponse(w http.ResponseWriter) error
}

type ModelGet200JSONResponse Model

func (response ModelGet200JSONResponse) VisitModelGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModelGet400Response struct {
}

func (response ModelGet400Response) VisitModelGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ModelGet401Response = UnauthorizedErrorResponse

func (response ModelGet401Response) VisitModelGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ModelGet404Response struct {
}

func (response ModelGet404Response) VisitModelGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ModelGet500Response struct {
}

func (response ModelGet500Response) VisitModelGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ModelUpdateRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	ModelIdOrKey       ModelIdOrKeyParam       `json:"modelIdOrKey"`
	Body               *ModelUpdateJSONRequestBody
}

type ModelUpdateResponseObject interface {
	VisitModelUpdateResponse(w http.ResponseWriter) error
}

type ModelUpdate200JSONResponse Model

func (response ModelUpdate200JSONResponse) VisitModelUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModelUpdate400Response struct {
}

func (response ModelUpdate400Response) VisitModelUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ModelUpdate401Response = UnauthorizedErrorResponse

func (response ModelUpdate401Response) VisitModelUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ModelUpdate404Response struct {
}

func (response ModelUpdate404Response) VisitModelUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ModelUpdate500Response struct {
}

func (response ModelUpdate500Response) VisitModelUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ModelCopyRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	ModelIdOrKey       ModelIdOrKeyParam       `json:"modelIdOrKey"`
	Body               *ModelCopyJSONRequestBody
}

type ModelCopyResponseObject interface {
	VisitModelCopyResponse(w http.ResponseWriter) error
}

type ModelCopy200JSONResponse Model

func (response ModelCopy200JSONResponse) VisitModelCopyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModelCopy400Response struct {
}

func (response ModelCopy400Response) VisitModelCopyResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ModelCopy401Response = UnauthorizedErrorResponse

func (response ModelCopy401Response) VisitModelCopyResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ModelCopy404Response = NotFoundErrorResponse

func (response ModelCopy404Response) VisitModelCopyResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ModelCopy500Response struct {
}

func (response ModelCopy500Response) VisitModelCopyResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ModelImportRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	ModelIdOrKey       ModelIdOrKeyParam       `json:"modelIdOrKey"`
	JSONBody           *ModelImportJSONRequestBody
	MultipartBody      *multipart.Reader
}

type ModelImportResponseObject interface {
	VisitModelImportResponse(w http.ResponseWriter) error
}

type ModelImport200JSONResponse struct {
	IgnoredCount  *int           `json:"ignoredCount,omitempty"`
	InsertedCount *int           `json:"insertedCount,omitempty"`
	ItemsCount    *int           `json:"itemsCount,omitempty"`
	ModelId       *id.ModelID    `json:"modelId,omitempty"`
	NewFields     *[]SchemaField `json:"newFields,omitempty"`
	UpdatedCount  *int           `json:"updatedCount,omitempty"`
}

func (response ModelImport200JSONResponse) VisitModelImportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModelImport400Response struct {
}

func (response ModelImport400Response) VisitModelImportResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ModelImport401Response = UnauthorizedErrorResponse

func (response ModelImport401Response) VisitModelImportResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ModelImport404Response struct {
}

func (response ModelImport404Response) VisitModelImportResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ModelImport500Response struct {
}

func (response ModelImport500Response) VisitModelImportResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ItemFilterRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	ModelIdOrKey       ModelIdOrKeyParam       `json:"modelIdOrKey"`
	Params             ItemFilterParams
	Body               *ItemFilterJSONRequestBody
}

type ItemFilterResponseObject interface {
	VisitItemFilterResponse(w http.ResponseWriter) error
}

type ItemFilter200JSONResponse struct {
	Items      *[]VersionedItem `json:"items,omitempty"`
	Page       *int             `json:"page,omitempty"`
	PerPage    *int             `json:"perPage,omitempty"`
	TotalCount *int             `json:"totalCount,omitempty"`
}

func (response ItemFilter200JSONResponse) VisitItemFilterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemFilter400Response struct {
}

func (response ItemFilter400Response) VisitItemFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemFilter401Response = UnauthorizedErrorResponse

func (response ItemFilter401Response) VisitItemFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemFilter404Response struct {
}

func (response ItemFilter404Response) VisitItemFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemFilter500Response struct {
}

func (response ItemFilter500Response) VisitItemFilterResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ItemCreateRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	ModelIdOrKey       ModelIdOrKeyParam       `json:"modelIdOrKey"`
	Body               *ItemCreateJSONRequestBody
}

type ItemCreateResponseObject interface {
	VisitItemCreateResponse(w http.ResponseWriter) error
}

type ItemCreate200JSONResponse VersionedItem

func (response ItemCreate200JSONResponse) VisitItemCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemCreate400Response struct {
}

func (response ItemCreate400Response) VisitItemCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemCreate401Response = UnauthorizedErrorResponse

func (response ItemCreate401Response) VisitItemCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemCreate404Response struct {
}

func (response ItemCreate404Response) VisitItemCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemsAsCSVRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	ModelIdOrKey       ModelIdOrKeyParam       `json:"modelIdOrKey"`
	Params             ItemsAsCSVParams
}

type ItemsAsCSVResponseObject interface {
	VisitItemsAsCSVResponse(w http.ResponseWriter) error
}

type ItemsAsCSV200TextcsvResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response ItemsAsCSV200TextcsvResponse) VisitItemsAsCSVResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/csv")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type ItemsAsCSV400Response struct {
}

func (response ItemsAsCSV400Response) VisitItemsAsCSVResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemsAsCSV401Response = UnauthorizedErrorResponse

func (response ItemsAsCSV401Response) VisitItemsAsCSVResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemsAsCSV404Response struct {
}

func (response ItemsAsCSV404Response) VisitItemsAsCSVResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemsAsCSV500Response struct {
}

func (response ItemsAsCSV500Response) VisitItemsAsCSVResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ItemsAsGeoJSONRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	ModelIdOrKey       ModelIdOrKeyParam       `json:"modelIdOrKey"`
	Params             ItemsAsGeoJSONParams
}

type ItemsAsGeoJSONResponseObject interface {
	VisitItemsAsGeoJSONResponse(w http.ResponseWriter) error
}

type ItemsAsGeoJSON200ApplicationoctetStreamResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response ItemsAsGeoJSON200ApplicationoctetStreamResponse) VisitItemsAsGeoJSONResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/octet-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type ItemsAsGeoJSON400Response struct {
}

func (response ItemsAsGeoJSON400Response) VisitItemsAsGeoJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemsAsGeoJSON401Response = UnauthorizedErrorResponse

func (response ItemsAsGeoJSON401Response) VisitItemsAsGeoJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemsAsGeoJSON404Response struct {
}

func (response ItemsAsGeoJSON404Response) VisitItemsAsGeoJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemsAsGeoJSON500Response struct {
}

func (response ItemsAsGeoJSON500Response) VisitItemsAsGeoJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ItemDeleteRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	ModelIdOrKey       ModelIdOrKeyParam       `json:"modelIdOrKey"`
	ItemId             ItemIdParam             `json:"itemId"`
}

type ItemDeleteResponseObject interface {
	VisitItemDeleteResponse(w http.ResponseWriter) error
}

type ItemDelete200JSONResponse struct {
	Id *id.ItemID `json:"id,omitempty"`
}

func (response ItemDelete200JSONResponse) VisitItemDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemDelete400Response struct {
}

func (response ItemDelete400Response) VisitItemDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemDelete401Response = UnauthorizedErrorResponse

func (response ItemDelete401Response) VisitItemDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemDelete404Response struct {
}

func (response ItemDelete404Response) VisitItemDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemGetRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	ModelIdOrKey       ModelIdOrKeyParam       `json:"modelIdOrKey"`
	ItemId             ItemIdParam             `json:"itemId"`
	Params             ItemGetParams
}

type ItemGetResponseObject interface {
	VisitItemGetResponse(w http.ResponseWriter) error
}

type ItemGet200JSONResponse VersionedItem

func (response ItemGet200JSONResponse) VisitItemGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemGet400Response struct {
}

func (response ItemGet400Response) VisitItemGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemGet401Response = UnauthorizedErrorResponse

func (response ItemGet401Response) VisitItemGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemGet404Response struct {
}

func (response ItemGet404Response) VisitItemGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemGet500Response struct {
}

func (response ItemGet500Response) VisitItemGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ItemUpdateRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	ModelIdOrKey       ModelIdOrKeyParam       `json:"modelIdOrKey"`
	ItemId             ItemIdParam             `json:"itemId"`
	Body               *ItemUpdateJSONRequestBody
}

type ItemUpdateResponseObject interface {
	VisitItemUpdateResponse(w http.ResponseWriter) error
}

type ItemUpdate200JSONResponse VersionedItem

func (response ItemUpdate200JSONResponse) VisitItemUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemUpdate400Response struct {
}

func (response ItemUpdate400Response) VisitItemUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemUpdate401Response = UnauthorizedErrorResponse

func (response ItemUpdate401Response) VisitItemUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemUpdate404Response struct {
}

func (response ItemUpdate404Response) VisitItemUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemUpdate500Response struct {
}

func (response ItemUpdate500Response) VisitItemUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ItemCommentListRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	ModelIdOrKey       ModelIdOrKeyParam       `json:"modelIdOrKey"`
	ItemId             ItemIdParam             `json:"itemId"`
}

type ItemCommentListResponseObject interface {
	VisitItemCommentListResponse(w http.ResponseWriter) error
}

type ItemCommentList200JSONResponse struct {
	Comments *[]Comment `json:"comments,omitempty"`
}

func (response ItemCommentList200JSONResponse) VisitItemCommentListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemCommentList400Response struct {
}

func (response ItemCommentList400Response) VisitItemCommentListResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemCommentList401Response = UnauthorizedErrorResponse

func (response ItemCommentList401Response) VisitItemCommentListResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemCommentList404Response struct {
}

func (response ItemCommentList404Response) VisitItemCommentListResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemCommentCreateRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	ModelIdOrKey       ModelIdOrKeyParam       `json:"modelIdOrKey"`
	ItemId             ItemIdParam             `json:"itemId"`
	Body               *ItemCommentCreateJSONRequestBody
}

type ItemCommentCreateResponseObject interface {
	VisitItemCommentCreateResponse(w http.ResponseWriter) error
}

type ItemCommentCreate200JSONResponse Comment

func (response ItemCommentCreate200JSONResponse) VisitItemCommentCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemCommentCreate400Response struct {
}

func (response ItemCommentCreate400Response) VisitItemCommentCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemCommentCreate401Response = UnauthorizedErrorResponse

func (response ItemCommentCreate401Response) VisitItemCommentCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemCommentCreate404Response struct {
}

func (response ItemCommentCreate404Response) VisitItemCommentCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemCommentDeleteRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	ModelIdOrKey       ModelIdOrKeyParam       `json:"modelIdOrKey"`
	ItemId             ItemIdParam             `json:"itemId"`
	CommentId          CommentIdParam          `json:"commentId"`
}

type ItemCommentDeleteResponseObject interface {
	VisitItemCommentDeleteResponse(w http.ResponseWriter) error
}

type ItemCommentDelete200JSONResponse struct {
	Id *id.CommentID `json:"id,omitempty"`
}

func (response ItemCommentDelete200JSONResponse) VisitItemCommentDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemCommentDelete400Response struct {
}

func (response ItemCommentDelete400Response) VisitItemCommentDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemCommentDelete401Response = UnauthorizedErrorResponse

func (response ItemCommentDelete401Response) VisitItemCommentDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemCommentDelete404Response struct {
}

func (response ItemCommentDelete404Response) VisitItemCommentDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemCommentUpdateRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	ModelIdOrKey       ModelIdOrKeyParam       `json:"modelIdOrKey"`
	ItemId             ItemIdParam             `json:"itemId"`
	CommentId          CommentIdParam          `json:"commentId"`
	Body               *ItemCommentUpdateJSONRequestBody
}

type ItemCommentUpdateResponseObject interface {
	VisitItemCommentUpdateResponse(w http.ResponseWriter) error
}

type ItemCommentUpdate200JSONResponse Comment

func (response ItemCommentUpdate200JSONResponse) VisitItemCommentUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemCommentUpdate400Response struct {
}

func (response ItemCommentUpdate400Response) VisitItemCommentUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemCommentUpdate401Response = UnauthorizedErrorResponse

func (response ItemCommentUpdate401Response) VisitItemCommentUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemCommentUpdate404Response struct {
}

func (response ItemCommentUpdate404Response) VisitItemCommentUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ItemPublishRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	ModelIdOrKey       ModelIdOrKeyParam       `json:"modelIdOrKey"`
	ItemId             ItemIdParam             `json:"itemId"`
	Params             ItemPublishParams
}

type ItemPublishResponseObject interface {
	VisitItemPublishResponse(w http.ResponseWriter) error
}

type ItemPublish200JSONResponse VersionedItem

func (response ItemPublish200JSONResponse) VisitItemPublishResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ItemPublish400Response struct {
}

func (response ItemPublish400Response) VisitItemPublishResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ItemPublish401Response = UnauthorizedErrorResponse

func (response ItemPublish401Response) VisitItemPublishResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ItemPublish404Response struct {
}

func (response ItemPublish404Response) VisitItemPublishResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type MetadataSchemaByModelAsJSONRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	ModelIdOrKey       ModelIdOrKeyParam       `json:"modelIdOrKey"`
}

type MetadataSchemaByModelAsJSONResponseObject interface {
	VisitMetadataSchemaByModelAsJSONResponse(w http.ResponseWriter) error
}

type MetadataSchemaByModelAsJSON200JSONResponse JSONSchema

func (response MetadataSchemaByModelAsJSON200JSONResponse) VisitMetadataSchemaByModelAsJSONResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type MetadataSchemaByModelAsJSON400Response struct {
}

func (response MetadataSchemaByModelAsJSON400Response) VisitMetadataSchemaByModelAsJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type MetadataSchemaByModelAsJSON401Response = UnauthorizedErrorResponse

func (response MetadataSchemaByModelAsJSON401Response) VisitMetadataSchemaByModelAsJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type MetadataSchemaByModelAsJSON404Response struct {
}

func (response MetadataSchemaByModelAsJSON404Response) VisitMetadataSchemaByModelAsJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type MetadataSchemaByModelAsJSON500Response struct {
}

func (response MetadataSchemaByModelAsJSON500Response) VisitMetadataSchemaByModelAsJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type SchemaByModelAsJSONRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	ModelIdOrKey       ModelIdOrKeyParam       `json:"modelIdOrKey"`
}

type SchemaByModelAsJSONResponseObject interface {
	VisitSchemaByModelAsJSONResponse(w http.ResponseWriter) error
}

type SchemaByModelAsJSON200JSONResponse JSONSchema

func (response SchemaByModelAsJSON200JSONResponse) VisitSchemaByModelAsJSONResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SchemaByModelAsJSON400Response struct {
}

func (response SchemaByModelAsJSON400Response) VisitSchemaByModelAsJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type SchemaByModelAsJSON401Response = UnauthorizedErrorResponse

func (response SchemaByModelAsJSON401Response) VisitSchemaByModelAsJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type SchemaByModelAsJSON404Response struct {
}

func (response SchemaByModelAsJSON404Response) VisitSchemaByModelAsJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type SchemaByModelAsJSON500Response struct {
}

func (response SchemaByModelAsJSON500Response) VisitSchemaByModelAsJSONResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type FieldCreateRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	SchemaId           SchemaIdParam           `json:"schemaId"`
	Body               *FieldCreateJSONRequestBody
}

type FieldCreateResponseObject interface {
	VisitFieldCreateResponse(w http.ResponseWriter) error
}

type FieldCreate200JSONResponse SchemaField

func (response FieldCreate200JSONResponse) VisitFieldCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FieldCreate400Response struct {
}

func (response FieldCreate400Response) VisitFieldCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type FieldCreate401Response = UnauthorizedErrorResponse

func (response FieldCreate401Response) VisitFieldCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type FieldCreate404Response struct {
}

func (response FieldCreate404Response) VisitFieldCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type FieldDeleteRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	SchemaId           SchemaIdParam           `json:"schemaId"`
	FieldIdOrKey       FieldIdOrKeyParam       `json:"fieldIdOrKey"`
}

type FieldDeleteResponseObject interface {
	VisitFieldDeleteResponse(w http.ResponseWriter) error
}

type FieldDelete200JSONResponse struct {
	Id *id.FieldID `json:"id,omitempty"`
}

func (response FieldDelete200JSONResponse) VisitFieldDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FieldDelete400Response struct {
}

func (response FieldDelete400Response) VisitFieldDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type FieldDelete401Response = UnauthorizedErrorResponse

func (response FieldDelete401Response) VisitFieldDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type FieldDelete404Response struct {
}

func (response FieldDelete404Response) VisitFieldDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type FieldUpdateRequestObject struct {
	WorkspaceIdOrAlias WorkspaceIdOrAliasParam `json:"workspaceIdOrAlias"`
	ProjectIdOrAlias   ProjectIdOrAliasParam   `json:"projectIdOrAlias"`
	SchemaId           SchemaIdParam           `json:"schemaId"`
	FieldIdOrKey       FieldIdOrKeyParam       `json:"fieldIdOrKey"`
	Body               *FieldUpdateJSONRequestBody
}

type FieldUpdateResponseObject interface {
	VisitFieldUpdateResponse(w http.ResponseWriter) error
}

type FieldUpdate200JSONResponse SchemaField

func (response FieldUpdate200JSONResponse) VisitFieldUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FieldUpdate400Response struct {
}

func (response FieldUpdate400Response) VisitFieldUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type FieldUpdate401Response = UnauthorizedErrorResponse

func (response FieldUpdate401Response) VisitFieldUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type FieldUpdate404Response struct {
}

func (response FieldUpdate404Response) VisitFieldUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Returns a list of projects.
	// (GET /{workspaceIdOrAlias}/projects)
	ProjectFilter(ctx context.Context, request ProjectFilterRequestObject) (ProjectFilterResponseObject, error)
	// Create a project
	// (POST /{workspaceIdOrAlias}/projects)
	ProjectCreate(ctx context.Context, request ProjectCreateRequestObject) (ProjectCreateResponseObject, error)
	// Delete a project
	// (DELETE /{workspaceIdOrAlias}/projects/{projectIdOrAlias})
	ProjectDelete(ctx context.Context, request ProjectDeleteRequestObject) (ProjectDeleteResponseObject, error)
	// Returns a project.
	// (GET /{workspaceIdOrAlias}/projects/{projectIdOrAlias})
	ProjectGet(ctx context.Context, request ProjectGetRequestObject) (ProjectGetResponseObject, error)
	// Update a project.
	// (PATCH /{workspaceIdOrAlias}/projects/{projectIdOrAlias})
	ProjectUpdate(ctx context.Context, request ProjectUpdateRequestObject) (ProjectUpdateResponseObject, error)
	// delete assets in batch
	// (DELETE /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/assets)
	AssetBatchDelete(ctx context.Context, request AssetBatchDeleteRequestObject) (AssetBatchDeleteResponseObject, error)
	// Returns a list of assets.
	// (GET /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/assets)
	AssetFilter(ctx context.Context, request AssetFilterRequestObject) (AssetFilterResponseObject, error)
	// Create an new asset.
	// (POST /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/assets)
	AssetCreate(ctx context.Context, request AssetCreateRequestObject) (AssetCreateResponseObject, error)
	// Upload an asset.
	// (POST /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/assets/uploads)
	AssetUploadCreate(ctx context.Context, request AssetUploadCreateRequestObject) (AssetUploadCreateResponseObject, error)
	// delete asset
	// (DELETE /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/assets/{assetId})
	AssetDelete(ctx context.Context, request AssetDeleteRequestObject) (AssetDeleteResponseObject, error)
	// get asset
	// (GET /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/assets/{assetId})
	AssetGet(ctx context.Context, request AssetGetRequestObject) (AssetGetResponseObject, error)
	// get asset comments
	// (GET /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/assets/{assetId}/comments)
	AssetCommentList(ctx context.Context, request AssetCommentListRequestObject) (AssetCommentListResponseObject, error)
	// create asset comments
	// (POST /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/assets/{assetId}/comments)
	AssetCommentCreate(ctx context.Context, request AssetCommentCreateRequestObject) (AssetCommentCreateResponseObject, error)
	// delete asset comments
	// (DELETE /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/assets/{assetId}/comments/{commentId})
	AssetCommentDelete(ctx context.Context, request AssetCommentDeleteRequestObject) (AssetCommentDeleteResponseObject, error)
	// Update AssetComment
	// (PATCH /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/assets/{assetId}/comments/{commentId})
	AssetCommentUpdate(ctx context.Context, request AssetCommentUpdateRequestObject) (AssetCommentUpdateResponseObject, error)
	// publish asset
	// (POST /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/assets/{assetId}/publish)
	AssetPublish(ctx context.Context, request AssetPublishRequestObject) (AssetPublishResponseObject, error)
	// publish asset
	// (POST /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/assets/{assetId}/unpublish)
	AssetUnpublish(ctx context.Context, request AssetUnpublishRequestObject) (AssetUnpublishResponseObject, error)
	// get asset content
	// (GET /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/assets/{uuid1}/{uuid2}/{filename})
	AssetContentGet(ctx context.Context, request AssetContentGetRequestObject) (AssetContentGetResponseObject, error)
	// Returns a list of groups in a project.
	// (GET /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/groups)
	GroupFilter(ctx context.Context, request GroupFilterRequestObject) (GroupFilterResponseObject, error)
	// Create a new group in a project.
	// (POST /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/groups)
	GroupCreate(ctx context.Context, request GroupCreateRequestObject) (GroupCreateResponseObject, error)
	// Delete a group within a project.
	// (DELETE /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/groups/{groupIdOrKey})
	GroupDelete(ctx context.Context, request GroupDeleteRequestObject) (GroupDeleteResponseObject, error)
	// Retrieve a group within a project.
	// (GET /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/groups/{groupIdOrKey})
	GroupGet(ctx context.Context, request GroupGetRequestObject) (GroupGetResponseObject, error)
	// Update a group's details within a project.
	// (PATCH /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/groups/{groupIdOrKey})
	GroupUpdate(ctx context.Context, request GroupUpdateRequestObject) (GroupUpdateResponseObject, error)
	// Returns a list of models.
	// (GET /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models)
	ModelFilter(ctx context.Context, request ModelFilterRequestObject) (ModelFilterResponseObject, error)
	// create a model
	// (POST /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models)
	ModelCreate(ctx context.Context, request ModelCreateRequestObject) (ModelCreateResponseObject, error)
	// Delete a model.
	// (DELETE /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey})
	ModelDelete(ctx context.Context, request ModelDeleteRequestObject) (ModelDeleteResponseObject, error)
	// Returns a model.
	// (GET /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey})
	ModelGet(ctx context.Context, request ModelGetRequestObject) (ModelGetResponseObject, error)
	// Update a model.
	// (PATCH /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey})
	ModelUpdate(ctx context.Context, request ModelUpdateRequestObject) (ModelUpdateResponseObject, error)
	// Copy schema and items of a selected model
	// (POST /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey}/copy)
	ModelCopy(ctx context.Context, request ModelCopyRequestObject) (ModelCopyResponseObject, error)
	// Import data under the selected model
	// (PUT /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey}/import)
	ModelImport(ctx context.Context, request ModelImportRequestObject) (ModelImportResponseObject, error)
	// Returns a list of items.
	// (GET /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey}/items)
	ItemFilter(ctx context.Context, request ItemFilterRequestObject) (ItemFilterResponseObject, error)
	// create an item
	// (POST /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey}/items)
	ItemCreate(ctx context.Context, request ItemCreateRequestObject) (ItemCreateResponseObject, error)
	// Returns a CSV that has a list of items as features.
	// (GET /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey}/items.csv)
	ItemsAsCSV(ctx context.Context, request ItemsAsCSVRequestObject) (ItemsAsCSVResponseObject, error)
	// Returns a GeoJSON that has a list of items as features.
	// (GET /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey}/items.geojson)
	ItemsAsGeoJSON(ctx context.Context, request ItemsAsGeoJSONRequestObject) (ItemsAsGeoJSONResponseObject, error)
	// delete an item
	// (DELETE /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey}/items/{itemId})
	ItemDelete(ctx context.Context, request ItemDeleteRequestObject) (ItemDeleteResponseObject, error)
	// Returns an item.
	// (GET /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey}/items/{itemId})
	ItemGet(ctx context.Context, request ItemGetRequestObject) (ItemGetResponseObject, error)
	// Update an item.
	// (PATCH /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey}/items/{itemId})
	ItemUpdate(ctx context.Context, request ItemUpdateRequestObject) (ItemUpdateResponseObject, error)
	// get an item comment
	// (GET /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey}/items/{itemId}/comments)
	ItemCommentList(ctx context.Context, request ItemCommentListRequestObject) (ItemCommentListResponseObject, error)
	// create an item comment
	// (POST /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey}/items/{itemId}/comments)
	ItemCommentCreate(ctx context.Context, request ItemCommentCreateRequestObject) (ItemCommentCreateResponseObject, error)
	// delete item comment
	// (DELETE /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey}/items/{itemId}/comments/{commentId})
	ItemCommentDelete(ctx context.Context, request ItemCommentDeleteRequestObject) (ItemCommentDeleteResponseObject, error)
	// Update Item Comment
	// (PATCH /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey}/items/{itemId}/comments/{commentId})
	ItemCommentUpdate(ctx context.Context, request ItemCommentUpdateRequestObject) (ItemCommentUpdateResponseObject, error)
	// publish item
	// (POST /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey}/items/{itemId}/publish)
	ItemPublish(ctx context.Context, request ItemPublishRequestObject) (ItemPublishResponseObject, error)
	// Returns a metadata schema as json by project and model ID
	// (GET /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey}/metadata_schema.json)
	MetadataSchemaByModelAsJSON(ctx context.Context, request MetadataSchemaByModelAsJSONRequestObject) (MetadataSchemaByModelAsJSONResponseObject, error)
	// Returns a schema as json by project and model ID
	// (GET /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/models/{modelIdOrKey}/schema.json)
	SchemaByModelAsJSON(ctx context.Context, request SchemaByModelAsJSONRequestObject) (SchemaByModelAsJSONResponseObject, error)
	// create a field
	// (POST /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/schemata/{schemaId}/fields)
	FieldCreate(ctx context.Context, request FieldCreateRequestObject) (FieldCreateResponseObject, error)
	// delete a field
	// (DELETE /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/schemata/{schemaId}/fields/{fieldIdOrKey})
	FieldDelete(ctx context.Context, request FieldDeleteRequestObject) (FieldDeleteResponseObject, error)
	// update a field
	// (PATCH /{workspaceIdOrAlias}/projects/{projectIdOrAlias}/schemata/{schemaId}/fields/{fieldIdOrKey})
	FieldUpdate(ctx context.Context, request FieldUpdateRequestObject) (FieldUpdateResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ProjectFilter operation middleware
func (sh *strictHandler) ProjectFilter(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, params ProjectFilterParams) error {
	var request ProjectFilterRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProjectFilter(ctx.Request().Context(), request.(ProjectFilterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProjectFilter")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ProjectFilterResponseObject); ok {
		return validResponse.VisitProjectFilterResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ProjectCreate operation middleware
func (sh *strictHandler) ProjectCreate(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, params ProjectCreateParams) error {
	var request ProjectCreateRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.Params = params

	var body ProjectCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProjectCreate(ctx.Request().Context(), request.(ProjectCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProjectCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ProjectCreateResponseObject); ok {
		return validResponse.VisitProjectCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ProjectDelete operation middleware
func (sh *strictHandler) ProjectDelete(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam) error {
	var request ProjectDeleteRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProjectDelete(ctx.Request().Context(), request.(ProjectDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProjectDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ProjectDeleteResponseObject); ok {
		return validResponse.VisitProjectDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ProjectGet operation middleware
func (sh *strictHandler) ProjectGet(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam) error {
	var request ProjectGetRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProjectGet(ctx.Request().Context(), request.(ProjectGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProjectGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ProjectGetResponseObject); ok {
		return validResponse.VisitProjectGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ProjectUpdate operation middleware
func (sh *strictHandler) ProjectUpdate(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam) error {
	var request ProjectUpdateRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias

	var body ProjectUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProjectUpdate(ctx.Request().Context(), request.(ProjectUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProjectUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ProjectUpdateResponseObject); ok {
		return validResponse.VisitProjectUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AssetBatchDelete operation middleware
func (sh *strictHandler) AssetBatchDelete(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam) error {
	var request AssetBatchDeleteRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias

	var body AssetBatchDeleteJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetBatchDelete(ctx.Request().Context(), request.(AssetBatchDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetBatchDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetBatchDeleteResponseObject); ok {
		return validResponse.VisitAssetBatchDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AssetFilter operation middleware
func (sh *strictHandler) AssetFilter(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, params AssetFilterParams) error {
	var request AssetFilterRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetFilter(ctx.Request().Context(), request.(AssetFilterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetFilter")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetFilterResponseObject); ok {
		return validResponse.VisitAssetFilterResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AssetCreate operation middleware
func (sh *strictHandler) AssetCreate(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam) error {
	var request AssetCreateRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body AssetCreateJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "multipart/form-data") {
		if reader, err := ctx.Request().MultipartReader(); err != nil {
			return err
		} else {
			request.MultipartBody = reader
		}
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetCreate(ctx.Request().Context(), request.(AssetCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetCreateResponseObject); ok {
		return validResponse.VisitAssetCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AssetUploadCreate operation middleware
func (sh *strictHandler) AssetUploadCreate(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam) error {
	var request AssetUploadCreateRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias

	var body AssetUploadCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetUploadCreate(ctx.Request().Context(), request.(AssetUploadCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetUploadCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetUploadCreateResponseObject); ok {
		return validResponse.VisitAssetUploadCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AssetDelete operation middleware
func (sh *strictHandler) AssetDelete(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, assetId AssetIdParam) error {
	var request AssetDeleteRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.AssetId = assetId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetDelete(ctx.Request().Context(), request.(AssetDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetDeleteResponseObject); ok {
		return validResponse.VisitAssetDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AssetGet operation middleware
func (sh *strictHandler) AssetGet(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, assetId AssetIdParam) error {
	var request AssetGetRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.AssetId = assetId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetGet(ctx.Request().Context(), request.(AssetGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetGetResponseObject); ok {
		return validResponse.VisitAssetGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AssetCommentList operation middleware
func (sh *strictHandler) AssetCommentList(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, assetId AssetIdParam) error {
	var request AssetCommentListRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.AssetId = assetId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetCommentList(ctx.Request().Context(), request.(AssetCommentListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetCommentList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetCommentListResponseObject); ok {
		return validResponse.VisitAssetCommentListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AssetCommentCreate operation middleware
func (sh *strictHandler) AssetCommentCreate(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, assetId AssetIdParam) error {
	var request AssetCommentCreateRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.AssetId = assetId

	var body AssetCommentCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetCommentCreate(ctx.Request().Context(), request.(AssetCommentCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetCommentCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetCommentCreateResponseObject); ok {
		return validResponse.VisitAssetCommentCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AssetCommentDelete operation middleware
func (sh *strictHandler) AssetCommentDelete(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, assetId AssetIdParam, commentId CommentIdParam) error {
	var request AssetCommentDeleteRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.AssetId = assetId
	request.CommentId = commentId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetCommentDelete(ctx.Request().Context(), request.(AssetCommentDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetCommentDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetCommentDeleteResponseObject); ok {
		return validResponse.VisitAssetCommentDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AssetCommentUpdate operation middleware
func (sh *strictHandler) AssetCommentUpdate(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, assetId AssetIdParam, commentId CommentIdParam) error {
	var request AssetCommentUpdateRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.AssetId = assetId
	request.CommentId = commentId

	var body AssetCommentUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetCommentUpdate(ctx.Request().Context(), request.(AssetCommentUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetCommentUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetCommentUpdateResponseObject); ok {
		return validResponse.VisitAssetCommentUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AssetPublish operation middleware
func (sh *strictHandler) AssetPublish(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, assetId AssetIdParam) error {
	var request AssetPublishRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.AssetId = assetId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetPublish(ctx.Request().Context(), request.(AssetPublishRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetPublish")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetPublishResponseObject); ok {
		return validResponse.VisitAssetPublishResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AssetUnpublish operation middleware
func (sh *strictHandler) AssetUnpublish(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, assetId AssetIdParam) error {
	var request AssetUnpublishRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.AssetId = assetId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetUnpublish(ctx.Request().Context(), request.(AssetUnpublishRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetUnpublish")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetUnpublishResponseObject); ok {
		return validResponse.VisitAssetUnpublishResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AssetContentGet operation middleware
func (sh *strictHandler) AssetContentGet(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, uuid1 string, uuid2 string, filename string) error {
	var request AssetContentGetRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.Uuid1 = uuid1
	request.Uuid2 = uuid2
	request.Filename = filename

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AssetContentGet(ctx.Request().Context(), request.(AssetContentGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AssetContentGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AssetContentGetResponseObject); ok {
		return validResponse.VisitAssetContentGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GroupFilter operation middleware
func (sh *strictHandler) GroupFilter(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, params GroupFilterParams) error {
	var request GroupFilterRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GroupFilter(ctx.Request().Context(), request.(GroupFilterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GroupFilter")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GroupFilterResponseObject); ok {
		return validResponse.VisitGroupFilterResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GroupCreate operation middleware
func (sh *strictHandler) GroupCreate(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, params GroupCreateParams) error {
	var request GroupCreateRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.Params = params

	var body GroupCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GroupCreate(ctx.Request().Context(), request.(GroupCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GroupCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GroupCreateResponseObject); ok {
		return validResponse.VisitGroupCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GroupDelete operation middleware
func (sh *strictHandler) GroupDelete(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, groupIdOrKey GroupIdOrKeyParam) error {
	var request GroupDeleteRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.GroupIdOrKey = groupIdOrKey

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GroupDelete(ctx.Request().Context(), request.(GroupDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GroupDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GroupDeleteResponseObject); ok {
		return validResponse.VisitGroupDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GroupGet operation middleware
func (sh *strictHandler) GroupGet(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, groupIdOrKey GroupIdOrKeyParam) error {
	var request GroupGetRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.GroupIdOrKey = groupIdOrKey

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GroupGet(ctx.Request().Context(), request.(GroupGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GroupGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GroupGetResponseObject); ok {
		return validResponse.VisitGroupGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GroupUpdate operation middleware
func (sh *strictHandler) GroupUpdate(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, groupIdOrKey GroupIdOrKeyParam) error {
	var request GroupUpdateRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.GroupIdOrKey = groupIdOrKey

	var body GroupUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GroupUpdate(ctx.Request().Context(), request.(GroupUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GroupUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GroupUpdateResponseObject); ok {
		return validResponse.VisitGroupUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ModelFilter operation middleware
func (sh *strictHandler) ModelFilter(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, params ModelFilterParams) error {
	var request ModelFilterRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModelFilter(ctx.Request().Context(), request.(ModelFilterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModelFilter")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ModelFilterResponseObject); ok {
		return validResponse.VisitModelFilterResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ModelCreate operation middleware
func (sh *strictHandler) ModelCreate(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, params ModelCreateParams) error {
	var request ModelCreateRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.Params = params

	var body ModelCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModelCreate(ctx.Request().Context(), request.(ModelCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModelCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ModelCreateResponseObject); ok {
		return validResponse.VisitModelCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ModelDelete operation middleware
func (sh *strictHandler) ModelDelete(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error {
	var request ModelDeleteRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModelDelete(ctx.Request().Context(), request.(ModelDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModelDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ModelDeleteResponseObject); ok {
		return validResponse.VisitModelDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ModelGet operation middleware
func (sh *strictHandler) ModelGet(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error {
	var request ModelGetRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModelGet(ctx.Request().Context(), request.(ModelGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModelGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ModelGetResponseObject); ok {
		return validResponse.VisitModelGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ModelUpdate operation middleware
func (sh *strictHandler) ModelUpdate(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error {
	var request ModelUpdateRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey

	var body ModelUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModelUpdate(ctx.Request().Context(), request.(ModelUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModelUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ModelUpdateResponseObject); ok {
		return validResponse.VisitModelUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ModelCopy operation middleware
func (sh *strictHandler) ModelCopy(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error {
	var request ModelCopyRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey

	var body ModelCopyJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModelCopy(ctx.Request().Context(), request.(ModelCopyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModelCopy")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ModelCopyResponseObject); ok {
		return validResponse.VisitModelCopyResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ModelImport operation middleware
func (sh *strictHandler) ModelImport(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error {
	var request ModelImportRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "application/json") {
		var body ModelImportJSONRequestBody
		if err := ctx.Bind(&body); err != nil {
			return err
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "multipart/form-data") {
		if reader, err := ctx.Request().MultipartReader(); err != nil {
			return err
		} else {
			request.MultipartBody = reader
		}
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModelImport(ctx.Request().Context(), request.(ModelImportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModelImport")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ModelImportResponseObject); ok {
		return validResponse.VisitModelImportResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemFilter operation middleware
func (sh *strictHandler) ItemFilter(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, params ItemFilterParams) error {
	var request ItemFilterRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey
	request.Params = params

	var body ItemFilterJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemFilter(ctx.Request().Context(), request.(ItemFilterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemFilter")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemFilterResponseObject); ok {
		return validResponse.VisitItemFilterResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemCreate operation middleware
func (sh *strictHandler) ItemCreate(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error {
	var request ItemCreateRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey

	var body ItemCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemCreate(ctx.Request().Context(), request.(ItemCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemCreateResponseObject); ok {
		return validResponse.VisitItemCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemsAsCSV operation middleware
func (sh *strictHandler) ItemsAsCSV(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, params ItemsAsCSVParams) error {
	var request ItemsAsCSVRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemsAsCSV(ctx.Request().Context(), request.(ItemsAsCSVRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemsAsCSV")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemsAsCSVResponseObject); ok {
		return validResponse.VisitItemsAsCSVResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemsAsGeoJSON operation middleware
func (sh *strictHandler) ItemsAsGeoJSON(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, params ItemsAsGeoJSONParams) error {
	var request ItemsAsGeoJSONRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemsAsGeoJSON(ctx.Request().Context(), request.(ItemsAsGeoJSONRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemsAsGeoJSON")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemsAsGeoJSONResponseObject); ok {
		return validResponse.VisitItemsAsGeoJSONResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemDelete operation middleware
func (sh *strictHandler) ItemDelete(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, itemId ItemIdParam) error {
	var request ItemDeleteRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey
	request.ItemId = itemId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemDelete(ctx.Request().Context(), request.(ItemDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemDeleteResponseObject); ok {
		return validResponse.VisitItemDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemGet operation middleware
func (sh *strictHandler) ItemGet(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, itemId ItemIdParam, params ItemGetParams) error {
	var request ItemGetRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey
	request.ItemId = itemId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemGet(ctx.Request().Context(), request.(ItemGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemGetResponseObject); ok {
		return validResponse.VisitItemGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemUpdate operation middleware
func (sh *strictHandler) ItemUpdate(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, itemId ItemIdParam) error {
	var request ItemUpdateRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey
	request.ItemId = itemId

	var body ItemUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemUpdate(ctx.Request().Context(), request.(ItemUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemUpdateResponseObject); ok {
		return validResponse.VisitItemUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemCommentList operation middleware
func (sh *strictHandler) ItemCommentList(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, itemId ItemIdParam) error {
	var request ItemCommentListRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey
	request.ItemId = itemId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemCommentList(ctx.Request().Context(), request.(ItemCommentListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemCommentList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemCommentListResponseObject); ok {
		return validResponse.VisitItemCommentListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemCommentCreate operation middleware
func (sh *strictHandler) ItemCommentCreate(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, itemId ItemIdParam) error {
	var request ItemCommentCreateRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey
	request.ItemId = itemId

	var body ItemCommentCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemCommentCreate(ctx.Request().Context(), request.(ItemCommentCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemCommentCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemCommentCreateResponseObject); ok {
		return validResponse.VisitItemCommentCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemCommentDelete operation middleware
func (sh *strictHandler) ItemCommentDelete(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, itemId ItemIdParam, commentId CommentIdParam) error {
	var request ItemCommentDeleteRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey
	request.ItemId = itemId
	request.CommentId = commentId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemCommentDelete(ctx.Request().Context(), request.(ItemCommentDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemCommentDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemCommentDeleteResponseObject); ok {
		return validResponse.VisitItemCommentDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemCommentUpdate operation middleware
func (sh *strictHandler) ItemCommentUpdate(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, itemId ItemIdParam, commentId CommentIdParam) error {
	var request ItemCommentUpdateRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey
	request.ItemId = itemId
	request.CommentId = commentId

	var body ItemCommentUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemCommentUpdate(ctx.Request().Context(), request.(ItemCommentUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemCommentUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemCommentUpdateResponseObject); ok {
		return validResponse.VisitItemCommentUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ItemPublish operation middleware
func (sh *strictHandler) ItemPublish(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam, itemId ItemIdParam, params ItemPublishParams) error {
	var request ItemPublishRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey
	request.ItemId = itemId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ItemPublish(ctx.Request().Context(), request.(ItemPublishRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ItemPublish")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ItemPublishResponseObject); ok {
		return validResponse.VisitItemPublishResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// MetadataSchemaByModelAsJSON operation middleware
func (sh *strictHandler) MetadataSchemaByModelAsJSON(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error {
	var request MetadataSchemaByModelAsJSONRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.MetadataSchemaByModelAsJSON(ctx.Request().Context(), request.(MetadataSchemaByModelAsJSONRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MetadataSchemaByModelAsJSON")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(MetadataSchemaByModelAsJSONResponseObject); ok {
		return validResponse.VisitMetadataSchemaByModelAsJSONResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SchemaByModelAsJSON operation middleware
func (sh *strictHandler) SchemaByModelAsJSON(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, modelIdOrKey ModelIdOrKeyParam) error {
	var request SchemaByModelAsJSONRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.ModelIdOrKey = modelIdOrKey

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SchemaByModelAsJSON(ctx.Request().Context(), request.(SchemaByModelAsJSONRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SchemaByModelAsJSON")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SchemaByModelAsJSONResponseObject); ok {
		return validResponse.VisitSchemaByModelAsJSONResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// FieldCreate operation middleware
func (sh *strictHandler) FieldCreate(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, schemaId SchemaIdParam) error {
	var request FieldCreateRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.SchemaId = schemaId

	var body FieldCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FieldCreate(ctx.Request().Context(), request.(FieldCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FieldCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FieldCreateResponseObject); ok {
		return validResponse.VisitFieldCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// FieldDelete operation middleware
func (sh *strictHandler) FieldDelete(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, schemaId SchemaIdParam, fieldIdOrKey FieldIdOrKeyParam) error {
	var request FieldDeleteRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.SchemaId = schemaId
	request.FieldIdOrKey = fieldIdOrKey

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FieldDelete(ctx.Request().Context(), request.(FieldDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FieldDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FieldDeleteResponseObject); ok {
		return validResponse.VisitFieldDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// FieldUpdate operation middleware
func (sh *strictHandler) FieldUpdate(ctx echo.Context, workspaceIdOrAlias WorkspaceIdOrAliasParam, projectIdOrAlias ProjectIdOrAliasParam, schemaId SchemaIdParam, fieldIdOrKey FieldIdOrKeyParam) error {
	var request FieldUpdateRequestObject

	request.WorkspaceIdOrAlias = workspaceIdOrAlias
	request.ProjectIdOrAlias = projectIdOrAlias
	request.SchemaId = schemaId
	request.FieldIdOrKey = fieldIdOrKey

	var body FieldUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FieldUpdate(ctx.Request().Context(), request.(FieldUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FieldUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FieldUpdateResponseObject); ok {
		return validResponse.VisitFieldUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w9W2/bOLN/RdA5wHlR43b3+17y5jZp4d3tBblscbAICkYa2/wiUV6SSuoN/N8/8CZR",
	"FnWz5dhO8pLYFkkNh3PncPjoh2mySAkQzvzTR3+BKEqAA5XfEGPAJ9E38aP4HgELKV5wnBL/1J+ceenU",
	"43PwGMQQcog82cEPfCyeLxCf+4FPUAL+qRnLD3wKf2eYQuSfcppB4LNwDgkS4/PlQjRlnGIy8wP/55tZ",
	"+kb/iKOTsRzizF+tAjVcDWCXCwjxFAPzHubA50AVXF6EOPIQBQ+SW4giiDxMJPwUWBZzZgD/OwO6XIPc",
	"t+H8XwpT/9T/n1GBvJF6ykay9bl8gZiEgDVMkwRIL0TqLm5U5uNtg8wPehCFzimGOJpEX+nvsGyAknp3",
	"sDTAyj4GhUkaQcw8/Xon2PY7NoZctTr5KMc6U2OJCcxomi16TkD2MRNY0PQ/ENZg3B59Y9DlICc20JhD",
	"0ocqRHs3gGqkbehhIkZQxHAHy4eU1sGln3r5QC6e0Y38egDEiyTR9Fw02afTotmjb4wZOUhp0RZoBjXA",
	"XjOIPJ7qBVMQohnU4Eg/KuCIYIqymPun7wI/wQQnWSI/m0UiHGZAFRBAvw0GhxrLDcq/3wZ+gn5qWN6+",
	"bYdMLYnA+zjGiDWuKxItzMo2Lub6sBsvqB5ILqkaSUBNYdoNl8ijMBWg3wOtwadQDk5c+jHiwMQEgQgE",
	"/lX8sMhuYxz6N4GDS9RIXeSEbFiSyG5kmhG3kReXagwlMVhK+RmmLSiMYIoJSOBSGgH1IkwhFI3MDCiw",
	"RUoYeDFmPPAecBx7t+DhGUmpkH9TqzNmHkm5t6DAgHCIalYjwrRmNQSQ1log+U3+6F6GlPK+E3RNqwZO",
	"MXwNoCEFxCEa25Rj/5YtIv3ZCfhDSu/YAoWwAU/mfd2EVB16Y5JCYZhmhEdpgjA5+Z4PbLGp5FOFSWme",
	"fkn5xzQj0TmlKa1O50pi/u8MmNCdFFia0RC8B6QIZyq6+qvAvyYo4/OU4n+gbqhxGAJjHk/vgAjCSzBj",
	"mMwEujC5RzGOLE6VsH2C9LfLr1+sWae3WrrZsxb/2IlpvAp88f9yHWENXa32wiqWcOJbHGO+lPY8TRdA",
	"OVYIQwv8OyzlR2EwsFZbVrYXA5tFohTJ70peIYWe5kGsppfAOSYzJka4xzachqy/Xb//Y/LBD/xvF5M/",
	"x1fnboouKOwve5wgn2DRS6NuZZ5VkVJa6YqVEvg46uKafJv8DkshDaX55BxI8YzjwbbIXMMIjgyDKljK",
	"L3CiRno4VXKh4Rzfw/lPTpEU05cc8YzZ67UAEhkr8MeCpjMKTMiAKCXi9VOEY4gciyicIsKB8Cv5uwMp",
	"hYA7ffSnKU2QlNmIwxuO5dwqXaY4hjYEyjadV9U4nE2LR+Eew4OZh0EMTrTBJf7/YPdi9Bmk6u+PX6Mf",
	"VzgGpr8m94K5pcL+8atYvZDdC7lO7kj6QJzoy+2hDtP4ptueFcRm9bpN0xgQkVyechRf4n/smZIsuRWm",
	"na1mOq9IRmO35V+h12I+qldQo+EcptIaHRe+t7UcKBZDCn0kqTJmUEOUyu2usoLUEO3YRkSKR9V8nSYy",
	"pm1GDjPKUZkbK5wxFFd0ovRyNKCC2DAlETbyaQ0zJOqsT4phHCrlFjFFl+XxddSgna8hji6ljZ5KahVj",
	"IK6UuVkA+DtDsWA6kvJz9dm1APcozsTCOVEh2OWgoKzw8Rp7GdCsl5nOLh5KspjjhRKku5sjJmGcRcDG",
	"ZKkmOin9kD+WbGs/juNmZBg6rBDYdlghWRyj211jBZIF1/g4lx+d1o8DOCmidwraTAoeejVHxA/8GBjT",
	"H60HX6kk16vUalH81oWGjbLZbrEU5NtLJA3nTvEqhD3CRLP7h+Ib44hy9h1LdwtIZD6SlF/ajwStmKdd",
	"UFyjhHuiWCqbnSLmFqYpFQoNTblUm+qHr/QrMT/qz+n0ao7Zd4C7/MvnlEjkqG//D4g246aLJt0GYS6u",
	"lQNUcSijxB3jtZ9kWPqss5bXUfMmJ4Vrm6Vp/eQspXHTpizLK91EL90h5+uWdmSMRZySM8TB+nqtLK4k",
	"jfBUO0C6hf2TbsWUd2NWJvAT4Ei+uKMcNv5HeZLhHMcRBdJZJhkXZV0ctXlM9S4K4nPnA+Y29V1zy8my",
	"n/MsUdk94KD+K5w7MNCJyC2m6O+Jb+pVddsbZHmgJo/A9gy0VvwmK5Rru1Da/beXxwQD8i06vTYu8S43",
	"mqqUvIlL3mv9p1utvNnCCnzMPgNHEeLI7egm+unHgcAz403UNlwfUPUulZMcU4pnmKB4g2EpTIECCSGa",
	"mJl1mqJceccMezv/LiGitiSGoKtBgnafJeobJUWMGP8sVQVE3aEz5HDZUyqU+/WUDkcr1gYiLrN9WI1Q",
	"rAfFG0PepcarwJfbIUPFYgYh29IKxTgEwnoaBBRQVPtIbphcpDF0Fxoa9RdF30FESGnrauP9o8b4eFlB",
	"GmTmGCpDYIhhfZ8laN2Nq1CpjSrLlr04H5+dX/iB//1iciU/fB5PvlyNJ1/kl6/fxX9nONixL1BhBNVI",
	"BrWZWy+qFlIulle/uyRtjLqUxg/KALmwVcifp7ZEhrBEbRG3sQjmmMfw0fiKXd2kVS0yP7rdzqH8Rzt8",
	"WKWvBolkiMS5L9HPKXXxuxzCmMD5UwteDZyLCouhLVbl8FNwu/g3piDsaYrD+ZX6NUH0LkofhEwJ5xDe",
	"3aY//SBPJIyUCyojyYGvEkvMvoD0RLUjZllx+a6I8sMCnyO9o5QAp8uvZoPY/HAeYeFxO4MeQJkzkr9A",
	"1KSB5iyS81aWFWisxgsKxqAwbZIcjh4WPC1vcxG17q3MXKnt4/jr1D/9q5OZ20JSGjLRroyqTa3rMrQu",
	"abk2wRuZVgBhRjFfSnmiALgFRIGOM+XYy+Elz8ifC8zNOV+oxAlMpmk1r+ECzhHl8zcfPl96E7ktJVWI",
	"N/428bXoaW2Vr5//7uTtyVsdzyNogf1T/9eTtye/+ioEIQEfPVZzRlbGgFABMLUVvQ4ozyhhHpIpNF46",
	"9fIuJgCHUyKkq6+l50ccc81DVsrIL2/fSv1RbLGhxcJoztF/mKLDOrUjk+hOHxtT4PLcvA4NrVn3sbNc",
	"XCS3bj8IC6j03rfOHL316OS6ZeqPvd8uv37x5OglZK8C/18KhWupQyoLxuTbeHkeuafig7Lfu7r55Us0",
	"qubiyJ7/au9ZTgZaBf6/3XByoATFHgN6D9QD1dpiMik6bPb662Z1E/gsSxJEl42keKLkMpOJLAZjNzIA",
	"V2TV1wimosmoLl+rTlxZXYvc1C6N7RzSDu2LBLiOjfOMwA7tSznHAuGLlElSdjL3B2n/+bm78j6Nllvw",
	"db2P1+awHY375eb6cqreqiIs3/VCaifRVStsFFwm8VBb+J4l8vYmeMpv/GLnDu5KyCgC95CVFO2QLKug",
	"RZ+OHtfzplcK3Bg41HLXmXo8qOrsG9mo2vA3HfTWVZFGLvM81UQjj2XSYZ9mcbx8aaSkVrONlII2u8vk",
	"zdfZW5+ka7MVxQwpP16o3HCu155tEueBEKniEQ/njmx6GUDrQHKq4XBWwI7ixC/chtifDNCR2AOUBZqA",
	"vSeRCS5+GsiYUKddWZNNIaO77wWnW2bFIOyqkrN7xamthO6nJ+11g2iXkJeJSK2SOn10kAqxDzlH2p5R",
	"c8LEu5VqpKBps5/QbtMYB16P9YD53JvKuBEmMw+RSB3jwmRW1UHyLXmQqZ823aknvdMYQMVNH5IjeoVS",
	"VTDddTRp2CDdsIG1Z8WJdYx0UmHGXAUfiuWpg0tlNORON4EHXTJCyAAqp1mKSsiHNTJh4NiU7nZOwtQc",
	"aqnm8d3hxRkIJFBhlKoB8/Oj8riLncKujmW6jv/cgdtErT3HU81zVRtqiPLRNKXJG5ODtc302hIfTd5l",
	"vn10iwmSZ2s3w5TjQEWFsXdp52rRVic9jl9wGEYjBac1yowtTNNRtohTFFWK2xyU4Jkwlkl0XF/8IUUO",
	"0keNeeop+MXDJqFzLVvtQfToNn8AmZWSjC0N2nrSM6NMZYd3dX93wZB7mTqBn+5zfgOIYrf00PR0/DLk",
	"usoXO5Efj7pw1arVyd1b2Nyui/U8LFCns9fo4jnWY8cR6RYtfSwYngkrtx69+9aZ7R1LRepWN4Pw+kgf",
	"BLcTUlymvmr1h6rqMqj6KV7f8RyjOri+eXjIlJx7Ls5pTtf5xKoaIn9ylJRelyNhk+ZuLMLOBsjT7Q3k",
	"DFAl7+On5VD7S93JeVgpOHrMS062m0Ga8vZmDTWWsqhSh7EwSBm9zytO/lxlYHv7tdqrpW3neuIdeGf5",
	"KMWm3jYcPzvGMBOz1vsJZKk868LmhxCHGtbS+KYn9upqbUmXmkLqvbFhCDEjz5YUr/OpvRLjQRNjluHo",
	"3Ur9/2U1epziGAhKYNXmb8v16x3YSUMO/A3jFFTZ02KhW7eMqsvM5+Cp1p5+nck3yrekjyXkYyZwsKGf",
	"NYvkuqh13HDTgCSuHnVoV1u96Zft3vRRU36Htxkm6fXCzeJh8pRhn9NYqoN3C3FKZpjMPJ6qktT6Koao",
	"PplT1mvZxWmtYhKdQmjqZOWxJZSM15egXBn/5ACTHsnTJkJX8ePMhPykqOU4vOBDPedVa55J7A4cjGzL",
	"q+5Z/WntxIlVQPlmz2entGRyH3cxKUnqdpH9sPvOT0EReChua2lm3y303ejRvudlLdJZnpyKbgrxosB6",
	"wHwuQeuq8PYWHs3Lo3XRLrJx6fSUOVJ1SIpFQUme9DDV2rI3K5RGIyoCjnAsb1zIyScsj9/Hktrxrnet",
	"LFKLoCfzQqnjAjjFcN+bPg7f4Kher9V6gItJshVqNPDuYBl4KfWsdore3dIzbKHxgcPzwxsSe43pN5oL",
	"5kzUPs2FfbNpfiBKIuH/ChHciV03MjCSvKRWR4dadajSv6ydtQtvOakW/WoiMlXK8fi85XJdk4wBlSKK",
	"vdyDwlWKMySv67S9usQHUfpErsbBu9B71XxaKHU4HpyLr6fm+U3SfvKr/CqMuYUuGj3a92N2cHYNHDU6",
	"aW8ObV57cvOSIfpO0ejFlgbJF9Yh+lsMliaa2LEv2sbur2retU5Hqd2rNwV3KSDSRJuvPuSRa9J9slWV",
	"wnaomkdhulgeR7JODZs22LNiakPx4AA8dhg8ld8z8dJrbQryMNdaI6IuwDeRcnMp/hMYxyOcLFLKj5oH",
	"szoWnKi5DVeW5z0K72ZUimBnNW+d0dev6I1J1LJupIP0NybL9kuQXKWuTTVsWbf899qK5RxxqNy5bAHM",
	"OEUcZsvyBYYMaFHuX36Qv7ReWGymn8/JesHNABUVelRDeLFI3XVtJ3VffR62rIY11UybmwhZ1/C89uKg",
	"ptsZCDx8HPQiBL2fUAtnj6hsof+UuPX0hWwvzLZU8tgTbO5lJAKqtn+fVN0Zwui4WaHUcq/yWRMOyYur",
	"nkVh2i/vfZu6XEMoc7WaPS5R3X1lDjzkhQuv21VHu10ll9/2vNVNHEcdzmqsSkY8MUO3JB14W2g68LWI",
	"w1yzuO+Y2JosOX523WQvikjGc7Dd0ObHScjuO5ggHy7/9PgccW+OqhYJYt4UEM8oMDffsDH7cPlnbwvk",
	"iYyE9vKaHH7ykUbUVoeaxp565mEiUaqHeLFapg9ZlTjBqrIvKOt41dHg/DyD1MjbFp7+BKkUpFvxtR7k",
	"eHm72wHGJoVlUODkd4Pk4iq1l8npfYmtrPcC3yD5ldMNp48esbyvurFUjEDf3lJGzDXZ/erDmKuxn0dZ",
	"mFpDri3jQ3V0y12V8NGPDTYNitzs1dQ/ZHJ4ArFZEMEzcb/bOymh1jn5pIlNhr64Rp4Z71K24jy5hSja",
	"7EbkVy//RbN+la53HQHI7Yj2apwyBvY8inGKNzzLWpyKcPIyYut+85HVoRtGhTgToyxifi3f+ZzKd3bn",
	"gN2L0q4lPS1iPL6KniV0PxfP7VWK2lJ0yAqgFq2/FgC1C4A+Lz7S8xKr7X3Ypyw+qjqMT8Gqa+GdevPo",
	"CWqOtvqBssqWggOiZxIcNFUfd7/Ha4IGPxS+TzpuDZlueVI480RP73aZ3/uNiE6S8yZn1aM/ur/KTH2/",
	"lNlzY6Z3inZGTGJ8nQzblv/4gk+o9V7bPAeytKp+4L/uyBg+68deG3LVKzcdHjf1ZqIXzTwKWxyNHtUn",
	"YZ4V8fHDR4SBus14kjH6gaNKd7VnQGKOFzG4z38ULo7rKdc35jVaaIJR5dV6e/eiSockjuKA36CBLT2f",
	"QpboraANLcZ6Zhw9yv/uohUOSt9byEq+vWvA6rmShwnE1ZNHcHyitb2DTaKtMSeJioGjTa8C+aUK5MzU",
	"JagXyKvVfwMAAP//G32nD/S/AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
