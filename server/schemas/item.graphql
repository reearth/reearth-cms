type Item implements Node {
  id: ID!
  modelId: ID!
  model: Model!
  values: [ItemValue!]!
  publicVersion: String!
  #  draftVersion: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ItemValue {
  itemId: ID!
  fieldId: ID!
  #  version: String!
  value: Any!
}

# Inputs
input ItemValueInput {
  fieldId: ID!
  value: Any!
}

input CreateItemInput {
  modelId: ID!
  values: [ItemValueInput!]!
}

input UpdateItemInput {
  itemId: ID!
  values: [ItemValueInput!]!
}

input DeleteItemInput {
  itemId: ID!
}

# Payloads
type ItemPayload {
  item: Item!
}

type DeleteItemPayload {
  itemId: ID!
}

type ItemConnection {
  edges: [ItemEdge!]!
  nodes: [Item]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ItemEdge {
  cursor: Cursor!
  node: Item
}

extend type Query {
  items(
    projectId: ID!
    first: Int
    last: Int
    after: Cursor
    before: Cursor
  ): ItemConnection!
  checkItemKeyAvailability(key: String!): KeyAvailability!
}

extend type Mutation {
  createItem(input: CreateItemInput!): ProjectPayload
  updateItem(input: UpdateItemInput!): ProjectPayload
  deleteItem(input: DeleteItemInput!): DeleteProjectPayload
}
