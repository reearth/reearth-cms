type Item implements Node {
  id: ID!
  schemaID: ID!
  fields: [ItemField!]
}

type ItemField {
  schemaFieldID: ID!
  type: SchemaFiledType!
  value: Any!
}

type VersionedItem {
  version: ID!
  parents: [ID!]
  refs: [String]
  value: Item!
}

# Inputs
input ItemFieldInput {
  schemaFieldID: ID!
  type: SchemaFiledType!
  value: Any!
}

input CreateItemInput {
  schemaID: ID!
  fields: [ItemFieldInput!]!
}

input UpdateItemInput {
  itemID: ID!
  fields: [ItemFieldInput!]!
}

input DeleteItemInput {
  itemID: ID!
}

# Payloads
type ItemPayload {
  item: Item!
}

type DeleteItemPayload {
  itemID: ID!
}

type ItemConnection {
  edges: [ItemEdge!]!
  nodes: [Item]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ItemEdge {
  cursor: Cursor!
  node: Item
}

extend type Query {
  items(
    schemaID: ID!
    first: Int
    last: Int
    after: Cursor
    before: Cursor
  ): ItemConnection!
  versionsByItem(itemID: ID!): [VersionedItem!]
}

extend type Mutation {
  createItem(input: CreateItemInput!): ItemPayload
  updateItem(input: UpdateItemInput!): ItemPayload
  deleteItem(input: DeleteItemInput!): DeleteItemPayload
}
