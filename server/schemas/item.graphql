type Item implements Node {
  id: ID!
  schemaId: ID!
  projectId: ID!
  project: Project!
  schema: Schema!
  fields: [ItemField!]!
  createdAt: DateTime!
}

type ItemField {
  schemaFieldId: ID!
  type: SchemaFiledType!
  value: Any!
}

type VersionedItem {
  version: String!
  parents: [String!]
  refs: [String!]!
  value: Item!
}

# Inputs
input ItemFieldInput {
  schemaFieldId: ID!
  type: SchemaFiledType!
  value: Any!
}

input CreateItemInput {
  schemaId: ID!
  fields: [ItemFieldInput!]!
}

input UpdateItemInput {
  itemId: ID!
  fields: [ItemFieldInput!]!
}

input DeleteItemInput {
  itemId: ID!
}

# Payloads
type ItemPayload {
  item: Item!
}

type DeleteItemPayload {
  itemId: ID!
}

type ItemConnection {
  edges: [ItemEdge!]!
  nodes: [Item]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ItemEdge {
  cursor: Cursor!
  node: Item
}

input ItemQuery {
  workspace: ID!
  project: ID!
  q: String
}

extend type Query {
  items(
    schemaId: ID!
    first: Int
    last: Int
    after: Cursor
    before: Cursor
  ): ItemConnection!
  versionsByItem(itemId: ID!): [VersionedItem!]!
  searchItem(
    query: ItemQuery!
    first: Int
    last: Int
    after: Cursor
    before: Cursor
  ): ItemConnection!
}

extend type Mutation {
  createItem(input: CreateItemInput!): ItemPayload
  updateItem(input: UpdateItemInput!): ItemPayload
  deleteItem(input: DeleteItemInput!): DeleteItemPayload
}
