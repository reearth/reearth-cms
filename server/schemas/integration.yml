openapi: 3.0.3
info:
  title: ReEarth-CMS Integration API
  description: ReEarth-CMS Integration API
  version: 1.0.0
paths:
  '/{workspaceId}/projects':
    parameters:
      - $ref: '#/components/parameters/workspaceIdParam'
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/perPageParam'
    get:
      operationId: ProjectFilter
      security:
        - bearerAuth: []
      summary: Returns a list of projects.
      tags:
        - Projects
      description: Returns a list of projects
      responses:
        '200':
          description: A JSON array of projects
          content:
            application/json:
              schema:
                type: object
                properties:
                  projects:
                    type: array
                    items:
                      $ref: '#/components/schemas/project'
                  totalCount:
                    type: integer
                    minimum: 0
                  page:
                    type: integer
                    minimum: 1
                  perPage:
                    type: integer
                    minimum: 1
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          description: Internal server error
  '/projects/{projectIdOrAlias}/models':
    parameters:
      - $ref: '#/components/parameters/projectIdOrAliasParam'
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/perPageParam'
    get:
      operationId: ModelFilter
      security:
        - bearerAuth: []
      summary: Returns a list of models.
      tags:
        - Models
      description: Returns a list of models.
      responses:
        '200':
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: object
                properties:
                  models:
                    type: array
                    items:
                      $ref: '#/components/schemas/model'
                  totalCount:
                    type: integer
                    minimum: 0
                  page:
                    type: integer
                    minimum: 1
                  perPage:
                    type: integer
                    minimum: 1
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
        '500':
          description: Internal server error
    post:
      operationId: ModelCreate
      summary: create a model
      tags:
        - Models
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                key:
                  type: string
      responses:
        '200':
          description: A JSON object of model
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model'
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/projects/{projectIdOrAlias}/schemata':
    parameters:
      - $ref: '#/components/parameters/projectIdOrAliasParam'
      - $ref: '#/components/parameters/sortParam'
      - $ref: '#/components/parameters/sortDirParam'
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/perPageParam'
      - $ref: '#/components/parameters/keywordParam'
    get:
      operationId: SchemaFilter
      security:
        - bearerAuth: [ ]
      summary: Returns a schema.
      tags:
        - Schemata
      description: Returns a schema.
      responses:
        '200':
          description: A JSON array of schema objects
          content:
            application/json:
              schema:
                type: object
                properties:
                  models:
                    type: array
                    items:
                      $ref: '#/components/schemas/model'
                  totalCount:
                    type: integer
                    minimum: 0
                  page:
                    type: integer
                    minimum: 1
                  perPage:
                    type: integer
                    minimum: 1
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
        '500':
          description: Internal server error
  '/schemata/{schemaId}/schema.json':
    parameters:
      - $ref: '#/components/parameters/schemaIdParam'
    get:
      operationId: SchemaByIDAsJSON
      security:
        - bearerAuth: []
      summary: Returns a schema as json by schema ID
      tags:
        - Schema
        - JSON
      description: Returns a schema as json by schema ID
      responses:
        '200':
          description: A JSON object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemaJSON'
                format: binary
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
        '500':
          description: Internal server error
  '/projects/{projectIdOrAlias}/schemata/{schemaId}/schema.json':
    parameters:
      - $ref: '#/components/parameters/projectIdOrAliasParam'
      - $ref: '#/components/parameters/schemaIdParam'
    get:
      operationId: SchemaByIDWithProjectAsJSON
      security:
        - bearerAuth: []
      summary: Returns a schema as json by project and schema ID
      tags:
        - Schema
        - JSON
      description: Returns a schema as json by project and schema ID
      responses:
        '200':
          description: A JSON object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemaJSON'
                format: binary
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
        '500':
          description: Internal server error
  '/models/{modelId}':
    parameters:
      - $ref: '#/components/parameters/modelIdParam'
    get:
      operationId: ModelGet
      security:
        - bearerAuth: []
      summary: Returns a model.
      tags:
        - Models
      description: Returns a model.
      responses:
        '200':
          description: A JSON array of user names
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model'
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
        '500':
          description: Internal server error
    patch:
      operationId: ModelUpdate
      security:
        - bearerAuth: []
      summary: Update a model.
      tags:
        - Models
      description: Update a model.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                key:
                  type: string
      responses:
        '200':
          description: A JSON object of model
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model'
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      operationId: ModelDelete
      summary: delete a model
      tags:
          - Models
      security:
          - bearerAuth: []
      responses:
          '200':
            description: delete a model
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    id:
                      x-go-type: id.ModelID
                      type: string
          '400':
            description: Invalid request parameter value
          '401':
            $ref: '#/components/responses/UnauthorizedError'
  /models/{modelId}/schema.json:
    parameters:
      - $ref: '#/components/parameters/modelIdParam'
    get:
      operationId: SchemaByModelAsJSON
      security:
        - bearerAuth: []
      summary: Returns a schema as json by model ID
      tags:
        - Schema
        - JSON
      description: Returns a schema as json by model ID
      responses:
        '200':
          description: A JSON object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemaJSON'
                format: binary
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
        '500':
          description: Internal server error
  /models/{modelId}/metadata_schema.json:
    parameters:
      - $ref: '#/components/parameters/modelIdParam'
    get:
      operationId: MetadataSchemaByModelAsJSON
      security:
        - bearerAuth: []
      summary: Returns a metadata schema as json by model ID
      tags:
        - MetadataSchema
        - JSON
      description: Returns a metadata schema as json by model ID
      responses:
        '200':
          description: A JSON object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemaJSON'
                format: binary
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
        '500':
          description: Internal server error
  '/models/{modelId}/import':
    parameters:
      - $ref: '#/components/parameters/modelIdParam'
    put:
      operationId: ModelImport
      summary: Import data under the selected model
      tags:
        - Models
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                assetId:
                  x-go-type: id.AssetID
                  type: string
                format:
                  type: string
                  enum:
                    - geoJson
                    - json
                strategy:
                  type: string
                  enum:
                    - insert
                    - update
                    - upsert
                mutateSchema:
                  type: boolean
                geometryFieldKey:
                  type: string
                asBackground:
                  type: boolean
              required:
                - assetId
                - format
                - strategy
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                format:
                  type: string
                  enum:
                    - geoJson
                    - json
                strategy:
                  type: string
                  enum:
                    - insert
                    - update
                    - upsert
                mutateSchema:
                  type: boolean
                geometryFieldKey:
                  type: string
              required:
                - assetId
                - format
                - strategy
      responses:
        '200':
          description: A JSON object of import status
          content:
            application/json:
              schema:
                type: object
                properties:
                  modelId:
                    x-go-type: id.ModelID
                    type: string
                  itemsCount:
                    type: integer
                  insertedCount:
                    type: integer
                  updatedCount:
                    type: integer
                  ignoredCount:
                    type: integer
                  newFields:
                    type: array
                    items:
                      $ref: '#/components/schemas/schemaField'
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Internal server error
  '/models/{modelId}/copy':
    parameters:
      - $ref: '#/components/parameters/modelIdParam'
    post:
      operationId: CopyModel
      summary: Copy schema and items of a selected model
      tags:
        - Models
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                key:
                  type: string
      responses:
        '200':
          description: A JSON object of field
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/model'
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          description: Internal server error
  '/schemata/{schemaId}/fields':
    parameters:
      - $ref: '#/components/parameters/schemaIdParam'
    post:
      operationId: FieldCreate
      summary: create a field
      tags:
        - Fields
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  $ref: '#/components/schemas/valueType'
                key:
                  type: string
                required:
                  type: boolean
                multiple:
                  type: boolean
      responses:
        '200':
          description: A JSON object of field
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/schemaField'
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/schemata/{schemaId}/fields/{fieldIdOrKey}':
    parameters:
      - $ref: '#/components/parameters/schemaIdParam'
      - $ref: '#/components/parameters/fieldIdOrKeyParam'
    patch:
      operationId: FieldUpdate
      summary: update a field
      tags:
        - Fields
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  $ref: '#/components/schemas/valueType'
                key:
                  type: string
                required:
                  type: boolean
                multiple:
                  type: boolean
      responses:
        '200':
          description: A JSON object of field
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemaField'
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      operationId: FieldDelete
      summary: delete a field
      tags:
        - Fields
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: A JSON object of field
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    x-go-type: id.FieldID
                    type: string
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/models/{modelId}/items':
    parameters:
      - $ref: '#/components/parameters/modelIdParam'
    get:
      operationId: ItemFilter
      security:
        - bearerAuth: []
      summary: Returns a list of items.
      tags:
        - Items
      description: Returns a list of items with filtering and ordering.
      parameters:
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDirParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
        - $ref: '#/components/parameters/refParam'
        - $ref: '#/components/parameters/assetParam'
        - $ref: '#/components/parameters/keywordParam'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  $ref: '#/components/schemas/condition'
      responses:
        '200':
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/versionedItem'
                  totalCount:
                    type: integer
                    minimum: 0
                  page:
                    type: integer
                    minimum: 1
                  perPage:
                    type: integer
                    minimum: 1
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
        '500':
          description: Internal server error
    post:
      operationId: ItemCreate
      summary: create an item
      tags:
        - Items
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fields:
                  type: array
                  items:
                    $ref: '#/components/schemas/field'
                metadataFields:
                  type: array
                  items:
                    $ref: '#/components/schemas/field'
      responses:
        '200':
          description: A JSON array of user names
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/versionedItem'
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/models/{modelId}/items.geojson':
    parameters:
      - $ref: '#/components/parameters/modelIdParam'
    get:
      operationId: ItemsAsGeoJSON
      security:
        - bearerAuth: []
      summary: Returns a GeoJSON that has a list of items as features.
      tags:
        - Items
        - GeoJSON
      description: Returns a GeoJSON that has a list of items as features.
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
        - $ref: '#/components/parameters/refParam'
      responses:
        '200':
          description: A GeoJSON object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeoJSON'
                format: binary
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
        '500':
          description: Internal server error
  '/models/{modelId}/items.csv':
    parameters:
      - $ref: '#/components/parameters/modelIdParam'
    get:
      operationId: ItemsAsCSV
      security:
        - bearerAuth: []
      summary: Returns a CSV that has a list of items as features.
      tags:
        - Items project
        - CSV
      description: Returns a CSV that has a list of items as features.
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
        - $ref: '#/components/parameters/refParam'
      responses:
        '200':
          description: A string in CSV format
          content:
            text/csv:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
        '500':
          description: Internal server error
  '/projects/{projectIdOrAlias}/models/{modelIdOrKey}':
    parameters:
      - $ref: '#/components/parameters/projectIdOrAliasParam'
      - $ref: '#/components/parameters/modelIdOrKeyParam'
    get:
      operationId: ModelGetWithProject
      security:
        - bearerAuth: []
      summary: Returns a model.
      tags:
        - Models
      description: Returns a model.
      responses:
        '200':
          description: A JSON array of user names
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model'
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
        '500':
          description: Internal server error
    patch:
      operationId: ModelUpdateWithProject
      security:
        - bearerAuth: [ ]
      summary: Update a model.
      tags:
        - Models
      description: Update a model.
      requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  description:
                    type: string
                  key:
                    type: string
      responses:
        '200':
          description: A JSON object of model
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model'
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
        '500':
          description: Internal server error
    delete:
      operationId: ModelDeleteWithProject
      security:
        - bearerAuth: [ ]
      summary: Delete a model.
      tags:
        - Models
      description: Delete a model.
      responses:
        '200':
          description: The model id
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    x-go-type: id.ModelID
                    type: string
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
        '500':
          description: Internal server error
  '/projects/{projectIdOrAlias}/models/{modelIdOrKey}/fields':
    parameters:
      - $ref: '#/components/parameters/projectIdOrAliasParam'
      - $ref: '#/components/parameters/modelIdOrKeyParam'
    post:
      operationId: FieldCreateWithProject
      summary: create a field
      tags:
        - Fields
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  $ref: '#/components/schemas/valueType'
                key:
                  type: string
                required:
                  type: boolean
                multiple:
                  type: boolean
      responses:
        '200':
          description: A JSON object of field
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemaField'
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/projects/{projectIdOrAlias}/models/{modelIdOrKey}/fields/{fieldIdOrKey}':
    parameters:
      - $ref: '#/components/parameters/projectIdOrAliasParam'
      - $ref: '#/components/parameters/modelIdOrKeyParam'
      - $ref: '#/components/parameters/fieldIdOrKeyParam'
    patch:
      operationId: FieldUpdateWithProject
      summary: update a field
      tags:
        - Fields
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  $ref: '#/components/schemas/valueType'
                key:
                  type: string
                required:
                  type: boolean
                multiple:
                  type: boolean
      responses:
        '200':
          description: A JSON object of field
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemaField'
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      operationId: FieldDeleteWithProject
      security:
        - bearerAuth: [ ]
      summary: Delete a field.
      tags:
        - Fields
      description: Returns the field id.
      responses:
        '200':
          description: A field id
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    x-go-type: id.FieldID
                    type: string
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
        '500':
          description: Internal server error
  '/projects/{projectIdOrAlias}/models/{modelIdOrKey}/items':
    parameters:
      - $ref: '#/components/parameters/projectIdOrAliasParam'
      - $ref: '#/components/parameters/modelIdOrKeyParam'
    get:
      operationId: ItemFilterWithProject
      security:
        - bearerAuth: []
      summary: Returns a list of items.
      tags:
        - Items project
      description: Returns a list of items with filtering and ordering.
      parameters:
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDirParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
        - $ref: '#/components/parameters/refParam'
        - $ref: '#/components/parameters/assetParam'
      responses:
        '200':
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/versionedItem'
                  totalCount:
                    type: integer
                    minimum: 0
                  page:
                    type: integer
                    minimum: 1
                  perPage:
                    type: integer
                    minimum: 1
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
        '500':
          description: Internal server error
    post:
      operationId: ItemCreateWithProject
      summary: Create an Item.
      tags:
        - Items project
      description: Create an Item.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fields:
                  type: array
                  items:
                    $ref: '#/components/schemas/field'
                metadataFields:
                  type: array
                  items:
                    $ref: '#/components/schemas/field'
      responses:
        '200':
          description: A JSON array of user names
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/versionedItem'
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/projects/{projectIdOrAlias}/models/{modelIdOrKey}/items.geojson':
    parameters:
      - $ref: '#/components/parameters/projectIdOrAliasParam'
      - $ref: '#/components/parameters/modelIdOrKeyParam'
    get:
      operationId: ItemsWithProjectAsGeoJSON
      security:
        - bearerAuth: []
      summary: Returns a GeoJSON that has a list of items as features.
      tags:
        - Items project
        - GeoJSON
      description: Returns a GeoJSON that has a list of items as features.
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
        - $ref: '#/components/parameters/refParam'
      responses:
        '200':
          description: A GeoJSON object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeoJSON'
                format: binary
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
        '500':
          description: Internal server error
  '/projects/{projectIdOrAlias}/models/{modelIdOrKey}/items.csv':
    parameters:
      - $ref: '#/components/parameters/projectIdOrAliasParam'
      - $ref: '#/components/parameters/modelIdOrKeyParam'
    get:
      operationId: ItemsWithProjectAsCSV
      security:
        - bearerAuth: []
      summary: Returns a CSV that has a list of items as features.
      tags:
        - Items project
        - CSV
      description: Returns a CSV that has a list of items as features.
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
        - $ref: '#/components/parameters/refParam'
      responses:
        '200':
          description: A string in CSV format
          content:
            text/csv:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
        '500':
          description: Internal server error
  '/projects/{projectIdOrAlias}/models/{modelIdOrKey}/schema.json':
    parameters:
      - $ref: '#/components/parameters/projectIdOrAliasParam'
      - $ref: '#/components/parameters/modelIdOrKeyParam'
    get:
      operationId: SchemaByModelWithProjectAsJSON
      security:
        - bearerAuth: []
      summary: Returns a schema as json by project and model ID
      tags:
        - Schema
        - JSON
      description: Returns a schema as json by project and model ID
      responses:
        '200':
          description: A JSON object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemaJSON'
                format: binary
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
        '500':
          description: Internal server error
  '/projects/{projectIdOrAlias}/models/{modelIdOrKey}/metadata_schema.json':
    parameters:
      - $ref: '#/components/parameters/projectIdOrAliasParam'
      - $ref: '#/components/parameters/modelIdOrKeyParam'
    get:
      operationId: MetadataSchemaByModelWithProjectAsJSON
      security:
        - bearerAuth: []
      summary: Returns a metadata schema as json by project and model ID
      tags:
        - MetadataSchema
        - JSON
      description: Returns a metadata schema as json by project and model ID
      responses:
        '200':
          description: A JSON object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemaJSON'
                format: binary
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
        '500':
          description: Internal server error
  '/items/{itemId}':
    parameters:
      - $ref: '#/components/parameters/itemIdParam'
    get:
      operationId: ItemGet
      security:
        - bearerAuth: []
      summary: Returns an item.
      tags:
        - Items
      description: Returns an item.
      parameters:
        - $ref: '#/components/parameters/refParam'
        - $ref: '#/components/parameters/assetParam'
      responses:
        '200':
          description: An item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/versionedItem'
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
        '500':
          description: Internal server error
    patch:
      operationId: ItemUpdate
      security:
        - bearerAuth: []
      summary: Update an item.
      tags:
        - Items
      description: Update an item.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fields:
                  type: array
                  items:
                    $ref: '#/components/schemas/field'
                metadataFields:
                  type: array
                  items:
                    $ref: '#/components/schemas/field'
                asset:
                  $ref: '#/components/schemas/assetEmbedding'
      responses:
        '200':
          description: An item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/versionedItem'
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
        '500':
          description: Internal server error
    delete:
      operationId: ItemDelete
      summary: delete an item
      tags:
        - Items
      security:
        - bearerAuth: []
      responses:
        '200':
          description: delete an item
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    x-go-type: id.ItemID
                    type: string
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
  '/items/{itemId}/comments':
    parameters:
      - $ref: '#/components/parameters/itemIdParam'
    get:
      operationId: ItemCommentList
      summary: get an item comment
      tags:
        - Items comments
      security:
        - bearerAuth: []
      responses:
        '200':
          description: item comments list
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    type: array
                    items:
                      $ref: '#/components/schemas/comment'
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
    post:
      operationId: ItemCommentCreate
      summary: create an item comment
      tags:
        - Items comments
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment'
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
  '/items/{itemId}/comments/{commentId}':
    parameters:
      - $ref: '#/components/parameters/itemIdParam'
      - $ref: '#/components/parameters/commentIdParam'
    patch:
      operationId: ItemCommentUpdate
      tags:
        - Items comments
      security:
        - bearerAuth: []
      summary: Update Item Comment
      description: ''
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        '200':
          description: Update An item comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment'
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
    delete:
      operationId: ItemCommentDelete
      summary: delete item comment
      tags:
        - Items comments
      security:
        - bearerAuth: []
      responses:
        '200':
          description: delete an item comment
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    x-go-type: id.CommentID
                    type: string
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
  '/projects/{projectId}/assets':
    parameters:
      - $ref: '#/components/parameters/projectIdParam'
    get:
      operationId: AssetFilter
      tags:
        - Assets project
      security:
        - bearerAuth: []
      summary: Returns a list of assets.
      description: Returns a list of assets with filtering and ordering.
      parameters:
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/sortDirParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
        - $ref: '#/components/parameters/keywordParam'
      responses:
        '200':
          description: assets list
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/asset'
                  totalCount:
                    type: integer
                    minimum: 0
                  page:
                    type: integer
                    minimum: 1
                  perPage:
                    type: integer
                    minimum: 1
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
    post:
      operationId: AssetCreate
      tags:
        - Assets project
      security:
        - bearerAuth: []
      summary: Create an new asset.
      description: Create a new asset and return the created asset.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                contentType:
                  type: string
                contentEncoding:
                  type: string
                skipDecompression:
                  type: boolean
                  default: false
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                token:
                  type: string
                skipDecompression:
                  type: boolean
                  nullable: true
                  default: false
                contentEncoding:
                  type: string
      responses:
        '200':
          description: assets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/asset'
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
  '/projects/{projectId}/assets/uploads':
    post:
      operationId: AssetUploadCreate
      tags:
        - Assets project
      security:
        - bearerAuth: []
      summary: Upload an asset.
      description: Issue an URL and a token to upload an asset.
      parameters:
        - $ref: '#/components/parameters/projectIdParam'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                contentLength:
                  type: integer
                contentType:
                  type: string
                contentEncoding:
                  type: string
                cursor:
                  type: string
      responses:
        '200':
          description: asset upload
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                  token:
                    type: string
                  contentType:
                    type: string
                  contentLength:
                    type: integer
                  contentEncoding:
                    type: string
                  next:
                    type: string
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
  '/assets/{assetId}':
    parameters:
      - $ref: '#/components/parameters/assetIdParam'
    get:
      operationId: AssetGet
      summary: get asset
      tags:
        - Assets
      responses:
        '200':
          description: assets list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/asset'
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
    delete:
      operationId: AssetDelete
      summary: delete asset
      tags:
        - Assets
      responses:
        '200':
          description: assets list
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    x-go-type: id.AssetID
                    type: string
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
  '/assets':
    delete:
      operationId: AssetBatchDelete
      summary: delete assets in batch
      tags:
        - Assets
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                assetIDs:
                  type: array
                  items:
                    type: string
                    x-go-type: id.AssetID
      responses:
        '200':
          description: assets list
          content:
            application/json:
              schema:
                type: object
                properties:
                  ids:
                    type: array
                    items:
                      x-go-type: id.AssetID
                      type: string
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
  '/assets/{assetId}/comments':
    parameters:
      - $ref: '#/components/parameters/assetIdParam'
    get:
      operationId: AssetCommentList
      summary: get asset comments
      tags:
        - Assets comments
      security:
        - bearerAuth: []
      responses:
        '200':
          description: asset comments list
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    type: array
                    items:
                      $ref: '#/components/schemas/comment'
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
    post:
      operationId: AssetCommentCreate
      summary: create asset comments
      tags:
        - Assets comments
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment'
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
  '/assets/{assetId}/comments/{commentId}':
    parameters:
      - $ref: '#/components/parameters/assetIdParam'
      - $ref: '#/components/parameters/commentIdParam'
    patch:
      operationId: AssetCommentUpdate
      tags:
        - Assets comments
      security:
        - bearerAuth: []
      summary: Update AssetComment
      description: ''
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        '200':
          description: Update An asset comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment'
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
    delete:
      operationId: AssetCommentDelete
      summary: delete asset comments
      tags:
        - Assets comments
      security:
        - bearerAuth: []
      responses:
        '200':
          description: delete an asset comment
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    x-go-type: id.CommentID
                    type: string
        '400':
          description: Invalid request parameter value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found

components:
  parameters:
    workspaceIdParam:
      name: workspaceId
      in: path
      description: ID of the selected workspace
      required: true
      schema:
        x-go-type: accountdomain.WorkspaceID
    projectIdParam:
      name: projectId
      in: path
      description: ID of the selected project
      required: true
      schema:
        x-go-type: id.ProjectID
    projectIdOrAliasParam:
      name: projectIdOrAlias
      in: path
      description: ID or alias of the project
      required: true
      schema:
        type: string
        x-go-type: project.IDOrAlias
    modelIdParam:
      name: modelId
      in: path
      description: ID of the model in the project
      required: true
      schema:
        type: string
        x-go-type: id.ModelID
    schemaIdParam:
      name: schemaId
      in: path
      description: ID of the schema in the model
      required: true
      schema:
        type: string
        x-go-type: id.SchemaID
    fieldIdParam:
      name: fieldId
      in: path
      description: ID of the field in the models schema
      required: true
      schema:
        type: string
        x-go-type: id.FieldID
    modelIdOrKeyParam:
      name: modelIdOrKey
      in: path
      description: ID or key of the model in the project
      required: true
      schema:
        type: string
        x-go-type: model.IDOrKey
    fieldIdOrKeyParam:
      name: fieldIdOrKey
      in: path
      description: ID or key of the field in the models schema
      required: true
      schema:
        type: string
        x-go-type: schema.FieldIDOrKey
    itemIdParam:
      name: itemId
      in: path
      description: ID of the selected item
      required: true
      schema:
        type: string
        x-go-type: id.ItemID
    assetIdParam:
      name: assetId
      in: path
      description: ID of the selected asset
      required: true
      schema:
        type: string
        x-go-type: id.AssetID
    commentIdParam:
      name: commentId
      in: path
      description: ID of the selected comment
      required: true
      schema:
        x-go-type: id.CommentID
        type: string
    sortParam:
      name: sort
      in: query
      description: Used to define the order of the response list
      required: false
      schema:
        type: string
        default: createdAt
        enum:
          - createdAt
          - updatedAt
    sortDirParam:
      name: dir
      in: query
      description: 'Used to define the order direction of the response list, will be ignored if the order is not presented'
      required: false
      schema:
        type: string
        default: desc
        enum:
          - asc
          - desc
    pageParam:
      name: page
      in: query
      description: Used to select the page
      required: false
      schema:
        type: integer
        default: 1
        minimum: 1
    perPageParam:
      name: perPage
      in: query
      description: Used to select the page
      required: false
      schema:
        type: integer
        default: 50
        minimum: 1
        maximum: 100
    refParam:
      name: ref
      in: query
      description: Used to select a ref or ver
      required: false
      schema:
        type: string
        default: latest
        enum:
          - latest
          - public
    assetParam:
      name: asset
      in: query
      description: Specifies whether asset data are embedded in the results
      schema:
        $ref: '#/components/schemas/assetEmbedding'
    keywordParam:
      name: keyword
      in: query
      description: keyword string
      required: false
      schema:
        type: string
  schemas:
    project:
      type: object
      properties:
        id:
          x-go-type: id.ProjectID
          type: string
        workspaceId:
          x-go-type: accountdomain.WorkspaceID
          type: string
        name:
          type: string
        description:
          type: string
        alias:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    model:
      type: object
      properties:
        id:
          x-go-type: id.ModelID
          type: string
        projectId:
          x-go-type: id.ProjectID
          type: string
        schemaId:
          x-go-type: id.SchemaID
          type: string
        schema:
          $ref: '#/components/schemas/schema'
        metadataSchemaId:
          x-go-type: id.SchemaID
          type: string
        metadataSchema:
            $ref: '#/components/schemas/schema'
        name:
          type: string
        description:
          type: string
        public:
          type: boolean
        key:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        lastModified:
          type: string
          format: date-time
    schema:
      type: object
      properties:
        id:
          x-go-type: id.SchemaID
          type: string
        projectId:
          x-go-type: id.ProjectID
          type: string
        fields:
          type: array
          items:
            $ref: '#/components/schemas/schemaField'
        titleField:
          x-go-type: id.FieldID
          type: string
        createdAt:
          type: string
          format: date-time
    schemaJSON:
      type: object
      required: ["type", "properties"]
      properties:
        $schema:
          type: string
        $id:
          type: string
        title:
          type: string
        description:
          type: string
        type:
          type: string
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/schemaJSONProperties'
    schemaJSONProperties:
      type: object
      required: ["type"]
      properties:
        type:
          type: string
        title:
          type: string
        description:
          type: string
        format:
          type: string
        minimum:
          type: number
          format: double
        maximum:
          type: number
          format: double
        maxLength:
          type: integer
        items:
          $ref: '#/components/schemas/schemaJSON'
    valueType:
      type: string
      enum:
        - text
        - textArea
        - richText
        - markdown
        - checkbox
        - asset
        - date
        - bool
        - select
        - integer
        - number
        - reference
        - url
        - group
        - tag
        - geometryObject
        - geometryEditor
    tagResponse:
      type: object
      properties:
        id:
          x-go-type: id.TagID
          type: string
        name:
          type: string
        color:
          type: string
    schemaField:
      type: object
      properties:
        id:
          x-go-type: id.FieldID
          type: string
        type:
          $ref: '#/components/schemas/valueType'
        key:
          type: string
        required:
          type: boolean
        multiple:
          type: boolean
    version:
      type: object
      properties:
        version:
          type: string
          format: uuid
        parents:
          type: array
          items:
            type: string
            format: uuid
        refs:
          type: array
          items:
            type: string
            format: uuid
    item:
      type: object
      properties:
        id:
          x-go-type: id.ItemID
          type: string
        metadataItemId:
          x-go-type: id.ItemID
          type: string
        originalItemId:
          x-go-type: id.ItemID
          type: string
        modelId:
          type: string
        fields:
          type: array
          items:
            $ref: '#/components/schemas/field'
        createdAt:
          type: string
          format: date-time
        isMetadata:
          type: boolean
        updatedAt:
          type: string
          format: date-time
    GeoJSON:
      $ref: '#/components/schemas/FeatureCollection'
    FeatureCollection:
      type: object
      properties:
        type:
          type: string
          enum: [FeatureCollection]
        features:
          type: array
          items:
            $ref: '#/components/schemas/Feature'
    Feature:
      type: object
      properties:
        id:
          x-go-type: id.ItemID
          type: string
        type:
          type: string
          enum: [Feature]
        geometry:
          $ref: '#/components/schemas/Geometry'
        properties:
          type: object
          x-go-type: orderedmap.OrderedMap
    Geometry:
      type: object
      properties:
        type:
          type: string
          enum: [Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection]
        coordinates:
          oneOf:
            - $ref: '#/components/schemas/Point'
            - $ref: '#/components/schemas/MultiPoint'
            - $ref: '#/components/schemas/LineString'
            - $ref: '#/components/schemas/MultiLineString'
            - $ref: '#/components/schemas/Polygon'
            - $ref: '#/components/schemas/MultiPolygon'
        geometries:
          type: array
          items:
            $ref: '#/components/schemas/Geometry'
    GeometryCollection:
      type: object
      properties:
        type:
          type: string
          enum: [GeometryCollection]
        geometries:
          type: array
          items:
            $ref: '#/components/schemas/Geometry'
    Point:
      type: array
      items:
        type: number
        format: double
      minItems: 2
      maxItems: 3
    MultiPoint:
      type: array
      items:
        $ref: '#/components/schemas/Point'
    LineString:
      type: array
      items:
        $ref: '#/components/schemas/Point'
      minItems: 2
    MultiLineString:
      type: array
      items:
        $ref: '#/components/schemas/LineString'
    Polygon:
      type: array
      items:
        type: array
        items:
          $ref: '#/components/schemas/Point'
      minItems: 4
    MultiPolygon:
      type: array
      items:
        $ref: '#/components/schemas/Polygon'
    versionedItem:
      type: object
      properties:
        id:
          x-go-type: id.ItemID
          type: string
        modelId:
          type: string
        fields:
          type: array
          items:
            $ref: '#/components/schemas/field'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        version:
          type: string
          format: uuid
        parents:
          type: array
          items:
            type: string
            format: uuid
        refs:
          type: array
          items:
            type: string
        referencedItems:
          type: array
          items:
            $ref: '#/components/schemas/versionedItem'
        metadataFields:
          type: array
          items:
            $ref: '#/components/schemas/field'
        isMetadata:
          type: boolean
    field:
      type: object
      properties:
        id:
          x-go-type: id.FieldID
          type: string
        type:
          $ref: '#/components/schemas/valueType'
        value: {}
        key:
          type: string
        group:
          x-go-type: id.ItemGroupID
          type: string
    refOrVersion:
      type: object
      properties:
        ref:
          type: string
          enum:
            - latest
            - public
        version:
          type: string
          format: uuid
    assetEmbedding:
      type: string
      enum:
        - all
        - "true"
        - "false"
    asset:
      type: object
      required:
        - id
        - projectId
        - url
        - createdAt
        - updatedAt
      properties:
        id:
          x-go-type: id.AssetID
          type: string
        projectId:
          x-go-type: id.ProjectID
          type: string
        name:
          type: string
        url:
          type: string
        contentType:
          type: string
        previewType:
          type: string
          enum:
            - image
            - image_svg
            - geo
            - geo_3d_Tiles
            - geo_mvt
            - model_3d
            - csv
            - unknown
        totalSize:
          type: number
        archiveExtractionStatus:
          type: string
          enum:
            - pending
            - in_progress
            - done
            - failed
        file:
          $ref: '#/components/schemas/file'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    comment:
      type: object
      properties:
        id:
          x-go-type: id.CommentID
          type: string
        authorId:
          type: string
          x-go-type: any
        authorType:
          type: string
          enum:
            - user
            - integrtaion
        content:
          type: string
        createdAt:
          type: string
          format: date-time
    file:
      type: object
      properties:
        name:
          type: string
        size:
          type: number
        contentType:
          type: string
        path:
          type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/file'
    fieldSelector:
      type: object
      properties:
        fieldId:
          x-go-type: id.FieldID
          type: string
        type:
          type: string
          enum:
            - id
            - creationDate
            - creationUser
            - modificationDate
            - modificationUser
            - status
            - field
            - metaField
    condition:
        type: object
        properties:
          and:
            type: array
            items:
              $ref: '#/components/schemas/condition'
          or:
            type: array
            items:
              $ref: '#/components/schemas/condition'
          basic:
            type: object
            properties:
              fieldId:
                $ref: '#/components/schemas/fieldSelector'
              operator:
                type: string
                enum:
                  - equals
                  - notEquals
              value: {}
          nullable:
            type: object
            properties:
              fieldId:
                $ref: '#/components/schemas/fieldSelector'
              operator:
                type: string
                enum:
                  - empty
                  - notEmpty
          multiple:
            type: object
            properties:
              fieldId:
                $ref: '#/components/schemas/fieldSelector'
              operator:
                type: string
                enum:
                  - includesAny
                  - notIncludesAny
                  - includesAll
                  - notIncludesAll
              value:
                type: array
                items: {}
            required:
              - fieldId
              - operator
              - value
          bool:
            type: object
            properties:
              fieldId:
                $ref: '#/components/schemas/fieldSelector'
              operator:
                type: string
                enum:
                  - equals
                  - notEquals
              value:
                type: boolean
            required:
              - fieldId
              - operator
              - value
          string:
            type: object
            properties:
              fieldId:
                $ref: '#/components/schemas/fieldSelector'
              operator:
                type: string
                enum:
                  - contains
                  - notContains
                  - startsWith
                  - endsWith
                  - notStartsWith
                  - notEndsWith
              value:
                type: string
            required:
              - fieldId
              - operator
              - value
          number:
            type: object
            properties:
              fieldId:
                $ref: '#/components/schemas/fieldSelector'
              operator:
                type: string
                enum:
                  - greaterThan
                  - lessThan
                  - greaterThanOrEqualTo
                  - lessThanOrEqualTo
              value:
                type: number
            required:
              - fieldId
              - operator
              - value
          time:
            type: object
            properties:
              fieldId:
                $ref: '#/components/schemas/fieldSelector'
              operator:
                type: string
                enum:
                  - before
                  - after
                  - beforeOrOn
                  - afterOrOn
                  - ofThisWeek
                  - ofThisMonth
                  - ofThisYear
              value:
                type: string
                format: date-time
            required:
              - fieldId
              - operator
              - value
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    NotFoundError:
      description: The requested resource was not found
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
