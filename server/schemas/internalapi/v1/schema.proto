syntax = "proto3";

package reearth.cms.v1;

import "google/protobuf/timestamp.proto";

option go_package = "proto/v1";

service ReEarthCMS {
  // Main operations
  rpc CreateProject(CreateProjectRequest) returns (ProjectResponse) {}
  rpc UpdateProject(UpdateProjectRequest) returns (ProjectResponse) {}
  rpc DeleteProject(DeleteProjectRequest) returns (DeleteProjectResponse) {}
  rpc ListProjects(ListProjectsRequest) returns (ListProjectsResponse) {}
  rpc ListModels(ListModelsRequest) returns (ListModelsResponse) {}
  rpc GetModelGeoJSONExportURL(ExportRequest) returns (ExportURLResponse) {}
}

// Implementation note:
// Authentication should be implemented using gRPC interceptors
// M2M tokens should be passed in metadata with key "authorization"
// Format: "Bearer <token>"
// UserId should be passed in metadata with key "user-id"

// Core messages
message Project {
  string id = 1;
  string name = 2;
  string alias = 3;
  optional string description = 4;
  optional string license = 5;
  optional string readme = 6;
  string workspace_id = 7;
  ProjectAccessibility accessibility = 8;
  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp updated_at = 10;
}

message ProjectPublicationSettings {
  repeated string public_models = 1;
  bool public_assets = 2;
}

message APIKey {
  string id = 1;
  string name = 2;
  string description = 3;
  string key = 4;
  ProjectPublicationSettings publication = 5;
}

message ProjectAccessibility {
  ProjectVisibility visibility = 1;
  ProjectPublicationSettings publication = 2;
  repeated APIKey api_keys = 3;
}

enum ProjectVisibility {
  PUBLIC = 0;
  PRIVATE = 1;
}

message Model {
  string id = 1;
  string project_id = 2;
  string name = 3;
  string description = 4;
  string key = 5;
  Schema schema = 6;
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp updated_at = 8;
}

message Schema {
  string schema_id = 1;
  repeated Field fields = 2;
}

message Field {
  string field_id = 1;
  string name = 2;
  string type = 3;
  string key = 4;
  optional string description = 5;
}

// Request messages
message CreateProjectRequest {
  string workspace_id = 1;
  string name = 2;
  optional string description = 3;
  optional string license = 4;
  optional string readme = 5;
  string alias = 6;
  ProjectAccessibility accessibility = 7;
}

message UpdateProjectRequest {
  string project_id = 1;
  string name = 2;
  optional string description = 3;
  optional string license = 4;
  optional string readme = 5;
  string alias = 6;
  ProjectAccessibility accessibility = 7;
}

message DeleteProjectRequest {
  string project_id = 1;
}

message ListProjectsRequest {
  string workspace_id = 1;
}

message ListModelsRequest {
  string project_id = 1;
}

message ExportRequest {
  string project_id = 1;
  string model_id = 2;
}

// Response messages
message ProjectResponse {
  Project project = 1;
}

message DeleteProjectResponse {
  string project_id = 1;
}

message ListProjectsResponse {
  repeated Project projects = 1;
  int32 total_count = 2;
}

message ListModelsResponse {
  repeated Model models = 1;
  int32 total_count = 2;
}

message ExportURLResponse {
  string url = 1;
}
