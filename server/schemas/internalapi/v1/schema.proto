syntax = "proto3";

package reearth.cms.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

option go_package = "proto/v1";

service ReEarthCMS {
  // Main operations
  rpc CreateProject(CreateProjectRequest) returns (ProjectResponse) {}
  rpc UpdateProject(UpdateProjectRequest) returns (ProjectResponse) {}
  rpc DeleteProject(DeleteProjectRequest) returns (DeleteProjectResponse) {}
  rpc CheckAliasAvailability(AliasAvailabilityRequest) returns (AliasAvailabilityResponse) {}
  rpc GetProject(ProjectRequest) returns (ProjectResponse) {}
  rpc ListProjects(ListProjectsRequest) returns (ListProjectsResponse) {}
  rpc GetAsset(AssetRequest) returns (AssetResponse) {}
  rpc ListAssets(ListAssetsRequest) returns (ListAssetsResponse) {}
  rpc GetModel(ModelRequest) returns (ModelResponse) {}
  rpc ListModels(ListModelsRequest) returns (ListModelsResponse) {}
  rpc ListItems(ListItemsRequest) returns (ListItemsResponse) {}
  rpc GetModelGeoJSONExportURL(ExportRequest) returns (ExportURLResponse) {}
}

// Implementation note:
// Authentication should be implemented using gRPC interceptors
// M2M tokens should be passed in metadata with key "authorization"
// Format: "Bearer <token>"
// UserId should be passed in metadata with key "user-id"

// Core messages
message Project {
  string id = 1;
  string name = 2;
  string alias = 3;
  optional string description = 4;
  optional string license = 5;
  optional string readme = 6;
  string workspace_id = 7;
  Visibility visibility = 8;
  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp updated_at = 10;
}

enum Visibility {
  PUBLIC = 0;
  PRIVATE = 1;
}

message Asset {
  string id = 1;
  string uuid = 2;
  string project_id = 3;
  string filename = 4;
  uint64 size = 5;
  optional string preview_type = 6;
  string url = 7;
  optional string archive_extraction_status = 8;
  bool public = 9;
  google.protobuf.Timestamp created_at = 10;
}

message Model {
  string id = 1;
  string project_id = 2;
  string name = 3;
  string description = 4;
  string key = 5;
  Schema schema = 6;
  string public_api_ep = 7;
  string editor_url = 8;
  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp updated_at = 10;
}

message Item {
  string id = 1;
  map<string, google.protobuf.Any> fields = 2;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
}



message Schema {
  string schema_id = 1;
  repeated SchemaField fields = 2;
}

message SchemaField {
  enum Type {
    Text = 0;
    TextArea = 1;
    RichText = 2;
    MarkdownText = 3;
    Asset = 4;
    Date = 5;
    Bool = 6;
    Select = 7;
    Tag = 8;
    Integer = 9;
    Number = 10;
    Reference = 11;
    Checkbox = 12;
    URL = 13;
    Group = 14;
    GeometryObject = 15;
    GeometryEditor = 16;
  }

  string field_id = 1;
  string name = 2;
  Type type = 3;
  string key = 4;
  optional string description = 5;
}

// Request messages
message PageInfo {
  int32 page = 1;
  int32 page_size = 2;
}

message SortInfo {
  string key = 1;
  bool reverted = 2;
}

message ProjectRequest {
  string project_id_or_alias = 1;
}

message AliasAvailabilityRequest {
  string alias = 1;
}

message CreateProjectRequest {
  string workspace_id = 1;
  string name = 2;
  optional string description = 3;
  optional string license = 4;
  optional string readme = 5;
  string alias = 6;
  Visibility visibility = 7;
}

message UpdateProjectRequest {
  string project_id = 1;
  optional string name = 2;
  optional string description = 3;
  optional string license = 4;
  optional string readme = 5;
  optional string alias = 6;
  optional Visibility visibility = 7;
}

message DeleteProjectRequest {
  string project_id = 1;
}

message ListProjectsRequest {
  repeated string workspace_ids = 1;
  bool public_only = 3;

  optional PageInfo page_info = 100;
  optional SortInfo sort_info = 101;
}

message AssetRequest {
  string asset_id = 1;
}

message ListAssetsRequest {
  string project_id = 1;

  optional PageInfo page_info = 100;
  optional SortInfo sort_info = 101;
}

message ModelRequest {
  string project_id_or_alias = 1;
  string model_id_or_alias = 2;
}

message ListModelsRequest {
  string project_id = 1;

  optional PageInfo page_info = 100;
  optional SortInfo sort_info = 101;
}

message ListItemsRequest {
  string model_id = 1;
  string project_id = 2;
  optional string keyword = 3;

  optional PageInfo page_info = 100;
  optional SortInfo sort_info = 101;
}

message ExportRequest {
  string project_id = 1;
  string model_id = 2;
}

// Response messages
message ProjectResponse {
  Project project = 1;
}

message AliasAvailabilityResponse {
  bool available = 1;
}

message DeleteProjectResponse {
  string project_id = 1;
}

message ListProjectsResponse {
  repeated Project projects = 1;
  int64 total_count = 2;

  PageInfo page_info = 100;
}

message AssetResponse {
  Asset asset = 1;
}

message ListAssetsResponse {
  repeated Asset assets = 1;
  int64 total_count = 2;

  PageInfo page_info = 100;
}

message ModelResponse {
  Model model = 1;
}

message ListModelsResponse {
  repeated Model models = 1;
  int64 total_count = 2;

  PageInfo page_info = 100;
}

message ListItemsResponse {
  repeated Item items = 1;
  int64 total_count = 2;

  PageInfo page_info = 100;
}

message ExportURLResponse {
  string url = 1;
}
