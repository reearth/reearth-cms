type Workspace implements Node {
    id: ID!
    name: String!
    members: [WorkspaceMember!]!
    personal: Boolean!
}

type WorkspaceMember {
    userId: ID!
    role: Role!
    user: User
}

enum Role {
    # a role who can read project
    READER
    # a role who can read and write project
    WRITER
    # a eole who can have full control of project
    OWNER
}


input CreateWorkspaceInput {
    name: String!
}

input UpdateWorkspaceInput {
    workspaceId: ID!
    name: String!
}

input AddMemberToWorkspaceInput {
    workspaceId: ID!
    userId: ID!
    role: Role!
}

input RemoveMemberFromWorkspaceInput {
    workspaceId: ID!
    userId: ID!
}

input UpdateMemberOfWorkspaceInput {
    workspaceId: ID!
    userId: ID!
    role: Role!
}

input DeleteWorkspaceInput {
    workspaceId: ID!
}

# extend type Query { }

type CreateWorkspacePayload {
    workspace: Workspace!
}

type UpdateWorkspacePayload {
    workspace: Workspace!
}

type AddMemberToWorkspacePayload {
    workspace: Workspace!
}

type RemoveMemberFromWorkspacePayload {
    workspace: Workspace!
}

type UpdateMemberOfWorkspacePayload {
    workspace: Workspace!
}

type DeleteWorkspacePayload {
    workspaceId: ID!
}

extend type Mutation {
    createWorkspace(input: CreateWorkspaceInput!): CreateWorkspacePayload
    deleteWorkspace(input: DeleteWorkspaceInput!): DeleteWorkspacePayload
    updateWorkspace(input: UpdateWorkspaceInput!): UpdateWorkspacePayload
    addMemberToWorkspace(input: AddMemberToWorkspaceInput!): AddMemberToWorkspacePayload
    removeMemberFromWorkspace(input: RemoveMemberFromWorkspaceInput!): RemoveMemberFromWorkspacePayload
    updateMemberOfWorkspace(input: UpdateMemberOfWorkspaceInput!): UpdateMemberOfWorkspacePayload
}