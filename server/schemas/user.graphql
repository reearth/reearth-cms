type User implements Node {
    id: ID!
    name: String!
    email: String!
}

type Me {
    id: ID!
    name: String!
    email: String!
    lang: Lang!
    theme: Theme!
    myWorkspaceId: ID!
    auths: [String!]!
    workspaces: [Workspace!]!
    myWorkspace: Workspace!
    integrations: [Integration!]!
}

input SignupInput {
    lang: Lang
    theme: Theme
    userId: ID
    workspaceId: ID
    secret: String
}

input UpdateMeInput {
    name: String
    email: String
    lang: Lang
    theme: Theme
    password: String
    passwordConfirmation: String
}

input RemoveMyAuthInput {
    auth: String!
}

input DeleteMeInput {
    userId: ID!
}

extend type Query {
    me: Me
    searchUser(nameOrEmail: String!): User
}


type UpdateMePayload {
    me: Me!
}

type SignupPayload {
    user: User!
    workspace: Workspace!
}

type DeleteMePayload {
    userId: ID!
}

extend type Mutation {
    signup(input: SignupInput!): SignupPayload
    updateMe(input: UpdateMeInput!): UpdateMePayload
    removeMyAuth(input: RemoveMyAuthInput!): UpdateMePayload
    deleteMe(input: DeleteMeInput!): DeleteMePayload
}