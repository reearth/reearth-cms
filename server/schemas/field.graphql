enum FiledType {
  Text
  TextArea
  RichText
  MarkdownText
  Asset
  Date
  Bool
  Select
  Tag
  Integer
  Reference
  URL
}

interface SchemaField {
  id: ID!
  modelId: ID!
  model: Model!
  type: FiledType!
  key: String!
  title: String!
  description: String

  # FieldSettings
  multiValue: Boolean
  defaultValue: Any

  # FieldConstraints
  unique: Boolean
  required: Boolean
  #  max: Int
  #  min: Int

  createdAt: DateTime!
  updatedAt: DateTime!
}

type Field implements SchemaField {
  id: ID!
  modelId: ID!
  model: Model!
  type: FiledType!
  key: String!
  title: String!
  description: String

  # FieldSettings
  multiValue: Boolean
  defaultValue: Any

  # FieldConstraints
  unique: Boolean
  required: Boolean
  #  max: Int
  #  min: Int

  values: Any # for select field
  referencedModelId: ID # for reference field
  createdAt: DateTime!
  updatedAt: DateTime!
}

# Inputs
input CreateFieldInput {
  modelId: ID!
  type: FiledType!
  title: String!
  description: String
  key: String!
  isMultiValue: Boolean
  DefaultValue: Any
  values: Any # for select field
  isUnique: Boolean
  isRequired: Boolean
}

input UpdateFieldInput {
  title: String
  description: String
  key: String
  isMultiValue: Boolean
  DefaultValue: Any
  # TODO: make sure what are the editable fields
}

input DeleteFieldInput {
  fieldId: ID!
}

# Payloads
type FieldPayload {
  field: Field!
}

type DeleteFieldPayload {
  fieldId: ID!
}

extend type Query {
  getModelFields(modelId: ID!): [Field!]!
  checkFieldKeyAvailability(key: String!): KeyAvailability!
}

extend type Mutation {
  createField(input: CreateFieldInput!): FieldPayload
  updateField(input: UpdateFieldInput!): FieldPayload
  deleteField(input: DeleteFieldInput!): DeleteFieldPayload
}
