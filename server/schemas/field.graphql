enum FiledType {
  Text
  TextArea
  RichText
  MarkdownText
  Asset
  Date
  Bool
  Select
  Tag
  Integer
  Reference
  URL
}

type SchemaField {
  id: ID!
  modelId: ID!
  model: Model!
  typeProperties: SchemaFieldTypeProperties
  key: String!
  title: String!
  description: String

  # FieldSettings
  multiValue: Boolean
  defaultValue: Any

  # FieldConstraints
  unique: Boolean
  required: Boolean
  #  max: Int
  #  min: Int

  createdAt: DateTime!
  updatedAt: DateTime!
}

union SchemaFieldTypeProperties = SchemaTextFieldProperties | SchemaTextAreaFieldProperties | SchemaRichTextFieldProperties | SchemaMarkdownTextFieldProperties | SchemaAssetFieldProperties | SchemaDateFieldProperties | SchemaBoolFieldProperties | SchemaSelectFieldProperties | SchemaTagFieldProperties | SchemaIntegerFieldProperties | SchemaReferenceFieldProperties | SchemaURLFieldProperties


type SchemaTextFieldProperties  { _f: Any}
type SchemaTextAreaFieldProperties  { _f: Any}
type SchemaRichTextFieldProperties  { _f: Any}
type SchemaMarkdownTextFieldProperties  { _f: Any}
type SchemaAssetFieldProperties { _f: Any}
type SchemaDateFieldProperties  { _f: Any}
type SchemaBoolFieldProperties  { _f: Any}
type SchemaSelectFieldProperties {
  values: Any
}
type SchemaTagFieldProperties  { _f: Any}
type SchemaIntegerFieldProperties  { _f: Any}
type SchemaReferenceFieldProperties {
  referencedModelId: ID
}
type SchemaURLFieldProperties  { _f: Any}

# Inputs
input CreateFieldInput {
  modelId: ID!
  type: FiledType!
  title: String!
  description: String
  key: String!
  isMultiValue: Boolean
  DefaultValue: Any
  values: Any # for select field
  isUnique: Boolean
  isRequired: Boolean
}

input UpdateFieldInput {
  title: String
  description: String
  key: String
  isMultiValue: Boolean
  DefaultValue: Any
  # TODO: make sure what are the editable fields
}

input DeleteFieldInput {
  fieldId: ID!
}

# Payloads
type FieldPayload {
  field: SchemaField!
}

type DeleteFieldPayload {
  fieldId: ID!
}

extend type Query {
  getModelFields(modelId: ID!): [SchemaField!]!
  checkFieldKeyAvailability(key: String!): KeyAvailability!
}

extend type Mutation {
  createField(input: CreateFieldInput!): FieldPayload
  updateField(input: UpdateFieldInput!): FieldPayload
  deleteField(input: DeleteFieldInput!): DeleteFieldPayload
}
